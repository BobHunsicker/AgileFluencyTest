// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.ListIterator = {"": ["i", "list"],
 "super": "Object",
 get$hasNext: function() {
  return this.i < this.list.length;
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$("No more elements"));
  var value = this.list[this.i];
  this.i = this.i + 1;
  return value;
}
};

$$.StackTrace = {"": ["stack"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.stack;
  if (typeof t1 !== 'string')
    return this.toString$0$bailout1(1, t1);
  return t1;
},
 toString$0$bailout1: function(state0, t1) {
  return !(t1 == null) ? t1 : "";
}
};

$$.Closure = {
 "super": "Object",
 toString$0: function() {
  return "Closure";
}
};

$$.Creates = {"": ["types"],
 "super": "Object"
};

$$.Returns = {"": ["types"],
 "super": "Object"
};

$$.CastErrorImplementation = {"": ["actualType", "expectedType"],
 "super": "Object",
 toString$0: function() {
  return "CastError: Casting value of type " + $.S(this.actualType) + " to" + " incompatible type " + $.S(this.expectedType);
}
};

$$.ConstantMap = {"": ["length>", "_jsObject", "_liblib0$_keys"],
 "super": "Object",
 containsValue$1: function(needle) {
  var t1 = this.get$values();
  return $.getInterceptor(t1).some$1(t1, new $.ConstantMap_containsValue_anon(needle));
},
 containsKey$1: function(key) {
  if ($.eqB(key, "__proto__"))
    return false;
  return this._jsObject.hasOwnProperty(key);
},
 operator$index$1: function(key) {
  if (this.containsKey$1(key) !== true)
    return;
  return this._jsObject[key];
},
 forEach$1: function(f) {
  var t1 = this._liblib0$_keys;
  $.getInterceptor(t1).forEach$1(t1, new $.ConstantMap_forEach_anon(this, f));
},
 get$keys: function() {
  return this._liblib0$_keys;
},
 get$values: function() {
  var result, t1;
  result = [];
  t1 = this._liblib0$_keys;
  $.getInterceptor(t1).forEach$1(t1, new $.ConstantMap_values_anon(this, result));
  return result;
},
 get$isEmpty: function() {
  return $.eq(this.length, 0);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _throwUnmodifiable$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot modify unmodifiable Map"));
},
 oprator$indexSet$2: function(key, val) {
  return this._throwUnmodifiable$0();
},
 remove$1: function(key) {
  return this._throwUnmodifiable$0();
},
 clear$0: function() {
  return this._throwUnmodifiable$0();
},
 is$Map: function() { return true; }
};

$$.MetaInfo = {"": ["_tag>", "_tags", "_set>"],
 "super": "Object"
};

$$.JSSyntaxRegExp = {"": ["_liblib0$_pattern", "_multiLine", "_ignoreCase"],
 "super": "Object",
 firstMatch$1: function(str) {
  var m, matchStart, t1, matchEnd;
  m = $.regExpExec(this, $.checkString(str));
  if (m == null)
    return;
  matchStart = m.index;
  t1 = $.index(m, 0);
  t1 = $.getInterceptor(t1).get$length(t1);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  matchEnd = matchStart + t1;
  return $._MatchImplementation$(this.get$pattern(), str, matchStart, matchEnd, m);
},
 hasMatch$1: function(str) {
  return $.regExpTest(this, $.checkString(str));
},
 allMatches$1: function(str) {
  $.checkString(str);
  return $._AllMatchesIterable$(this, str);
},
 get$pattern: function() {
  return this._liblib0$_pattern;
},
 get$multiLine: function() {
  return this._multiLine;
},
 get$ignoreCase: function() {
  return this._ignoreCase;
},
 is$JSSyntaxRegExp: true,
 is$RegExp: true
};

$$._MatchImplementation = {"": ["pattern>", "str", "start", "end", "_groups"],
 "super": "Object",
 start$0: function() { return this.start.call$0(); },
 group$1: function(index) {
  return $.index(this._groups, index);
},
 operator$index$1: function(index) {
  return $.index(this._groups, index);
}
};

$$._AllMatchesIterable = {"": ["_re", "_str>"],
 "super": "Object",
 iterator$0: function() {
  return $._AllMatchesIterator$(this._re, this._str);
}
};

$$._AllMatchesIterator = {"": ["_re", "_str>", "_liblib0$_next=", "_done"],
 "super": "Object",
 _liblib0$_next$0: function() { return this._liblib0$_next.call$0(); },
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$("No more elements"));
  var next = this._liblib0$_next;
  this._liblib0$_next = null;
  return next;
},
 get$hasNext: function() {
  if (this._done)
    return false;
  else if (!(this._liblib0$_next == null))
    return true;
  this._liblib0$_next = this._re.firstMatch$1(this._str);
  if (this._liblib0$_next == null) {
    this._done = true;
    return false;
  } else
    return true;
}
};

$$.StringMatch = {"": ["start", "str", "pattern>"],
 "super": "Object",
 operator$index$1: function(g) {
  return this.group$1(g);
},
 group$1: function(group_) {
  if (!$.eqB(group_, 0))
    throw $.$$throw($.RangeError$value(group_));
  return this.pattern;
},
 start$0: function() { return this.start.call$0(); }
};

$$._DateImpl = {"": ["millisecondsSinceEpoch>", "isUtc"],
 "super": "Object",
 operator$eq$1: function(other) {
  if (!(typeof other === 'object' && other !== null && !!other.is$Date))
    return false;
  return $.eq(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$lt$1: function(other) {
  return $.lt(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$gt$1: function(other) {
  return $.gt(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$ge$1: function(other) {
  return $.ge(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 get$hashCode: function() {
  return this.millisecondsSinceEpoch;
},
 toLocal$0: function() {
  if (this.isUtc === true)
    return $.Date_Date$fromMillisecondsSinceEpoch(this.millisecondsSinceEpoch, false);
  return this;
},
 toString$0: function() {
  var t1, t2, t3, y, m, d, h, min, sec, ms;
  t1 = new $._DateImpl_toString_fourDigits();
  t2 = new $._DateImpl_toString_threeDigits();
  t3 = new $._DateImpl_toString_twoDigits();
  y = t1.call$1(this.get$year());
  m = t3.call$1(this.get$month());
  d = t3.call$1(this.get$day());
  h = t3.call$1(this.get$hour());
  min = t3.call$1(this.get$minute());
  sec = t3.call$1(this.get$second());
  ms = t2.call$1(this.get$millisecond());
  if (this.isUtc === true)
    return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms) + "Z";
  else
    return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms);
},
 add$1: function(duration) {
  var ms, t2;
  ms = this.millisecondsSinceEpoch;
  if (typeof ms !== 'number')
    return this.add$1$bailout0(1, duration, ms);
  t2 = duration.get$inMilliseconds();
  if (typeof t2 !== 'number')
    return this.add$1$bailout0(2, ms, t2);
  return $.Date_Date$fromMillisecondsSinceEpoch(ms + t2, this.isUtc);
},
 add$1$bailout0: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      ms = env1;
      duration = env0;
      break;
    case 2:
      t2 = env1;
      ms = env0;
      break;
  }
  switch (state0) {
    case 0:
      ms = this.millisecondsSinceEpoch;
    case 1:
      state0 = 0;
      t2 = duration.get$inMilliseconds();
    case 2:
      var ms, duration, t2;
      state0 = 0;
      return $.Date_Date$fromMillisecondsSinceEpoch($.add(ms, t2), this.isUtc);
  }
},
 get$year: function() {
  return $.Primitives_getYear(this);
},
 get$month: function() {
  return $.Primitives_getMonth(this);
},
 get$day: function() {
  return $.Primitives_getDay(this);
},
 get$hour: function() {
  return $.Primitives_getHours(this);
},
 get$minute: function() {
  return $.Primitives_getMinutes(this);
},
 get$second: function() {
  return $.Primitives_getSeconds(this);
},
 get$millisecond: function() {
  return $.Primitives_getMilliseconds(this);
},
 _DateImpl$fromMillisecondsSinceEpoch$2: function(millisecondsSinceEpoch, isUtc) {
  var t1 = this.millisecondsSinceEpoch;
  if ($.gtB($.getInterceptor(t1).abs$0(t1), 8640000000000000))
    throw $.$$throw($.ArgumentError$(t1));
  t1 = this.isUtc;
  if (t1 == null)
    throw $.$$throw($.ArgumentError$(t1));
},
 _DateImpl$now$0: function() {
  $.Primitives_lazyAsJsDate(this);
},
 is$Date: true
};

$$.NullThrownError = {
 "super": "Object",
 toString$0: function() {
  return "Throw of null.";
}
};

$$.ArgumentError = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  if (!(t1 == null))
    return "Illegal argument(s): " + $.S(t1);
  return "Illegal argument(s)";
}
};

$$.RangeError = {"": ["message"],
 "super": "ArgumentError",
 toString$0: function() {
  return "RangeError: " + $.S(this.message);
}
};

$$.NoSuchMethodError = {"": ["_receiver", "_memberName", "_arguments", "_namedArguments", "_existingArgumentNames"],
 "super": "Object",
 toString$0: function() {
  var t1, t2, t3, t4, t5, actualParameters, i, formalParameters;
  t1 = {};
  t1.sb_1 = $.StringBuffer_StringBuffer("");
  t1.i_2 = 0;
  t2 = this._arguments;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
    return this.toString$0$bailout(1, t1, t2);
  for (; $.ltB(t1.i_2, t2.length); t1.i_2 = $.add(t1.i_2, 1)) {
    if ($.gtB(t1.i_2, 0)) {
      t3 = t1.sb_1;
      $.getInterceptor(t3).add$1(t3, ", ");
    }
    t3 = t1.sb_1;
    t4 = $.getInterceptor(t3);
    t5 = t1.i_2;
    if (t5 !== (t5 | 0))
      throw $.iae(t5);
    if (t5 < 0 || t5 >= t2.length)
      throw $.ioore(t5);
    t4.add$1(t3, $.Error_safeToString(t2[t5]));
  }
  t2 = this._namedArguments;
  if (!(t2 == null))
    $.getInterceptor(t2).forEach$1(t2, new $.NoSuchMethodError_toString_anon(t1));
  t2 = this._existingArgumentNames;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
    return this.toString$0$bailout(2, t1, t2);
  t3 = t1.sb_1;
  actualParameters = $.getInterceptor(t3).toString$0(t3);
  t1.sb_1 = $.StringBuffer_StringBuffer("");
  for (i = 0; i < t2.length; ++i) {
    if (i > 0) {
      t3 = t1.sb_1;
      $.getInterceptor(t3).add$1(t3, ", ");
    }
    t3 = t1.sb_1;
    t4 = $.getInterceptor(t3);
    if (i >= t2.length)
      throw $.ioore(i);
    t4.add$1(t3, t2[i]);
  }
  t1 = t1.sb_1;
  formalParameters = $.getInterceptor(t1).toString$0(t1);
  t1 = this._memberName;
  return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t1) + "(" + $.S(formalParameters) + ")";
},
 toString$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t2 = env1;
      t1 = env0;
      break;
    case 2:
      t2 = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
      t1.sb_1 = $.StringBuffer_StringBuffer("");
      t1.i_2 = 0;
      t2 = this._arguments;
    case 1:
      state0 = 0;
      if (!(t2 == null))
        for (; $.ltB(t1.i_2, $.getInterceptor(t2).get$length(t2)); t1.i_2 = $.add(t1.i_2, 1)) {
          if ($.gtB(t1.i_2, 0)) {
            t3 = t1.sb_1;
            $.getInterceptor(t3).add$1(t3, ", ");
          }
          t3 = t1.sb_1;
          $.getInterceptor(t3).add$1(t3, $.Error_safeToString($.index(t2, t1.i_2)));
        }
      t2 = this._namedArguments;
      if (!(t2 == null))
        $.getInterceptor(t2).forEach$1(t2, new $.NoSuchMethodError_toString_anon(t1));
      t2 = this._existingArgumentNames;
    case 2:
      var t1, t2, t3, actualParameters, i, formalParameters;
      state0 = 0;
      if (t2 == null)
        return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Arguments: [" + $.S(t1.sb_1) + "]";
      else {
        t3 = t1.sb_1;
        actualParameters = $.getInterceptor(t3).toString$0(t3);
        t1.sb_1 = $.StringBuffer_StringBuffer("");
        for (i = 0; $.ltB(i, $.getInterceptor(t2).get$length(t2)); ++i) {
          if (i > 0) {
            t3 = t1.sb_1;
            $.getInterceptor(t3).add$1(t3, ", ");
          }
          t3 = t1.sb_1;
          $.getInterceptor(t3).add$1(t3, $.index(t2, i));
        }
        t1 = t1.sb_1;
        formalParameters = $.getInterceptor(t1).toString$0(t1);
        t1 = this._memberName;
        return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t1) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t1) + "(" + $.S(formalParameters) + ")";
      }
  }
}
};

$$.UnsupportedError = {"": ["message>"],
 "super": "Object",
 toString$0: function() {
  return "Unsupported operation: " + $.S(this.get$message());
}
};

$$.UnimplementedError = {"": ["message>"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  return !(t1 == null) ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
}
};

$$.StateError = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  return "Bad state: " + this.message;
}
};

$$.StackOverflowError = {
 "super": "Object",
 toString$0: function() {
  return "Stack Overflow";
}
};

$$._ExceptionImplementation = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  if (t1 == null)
    return "Exception";
  return "Exception: " + $.S(t1);
},
 is$Exception: true
};

$$.FormatException = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  return "FormatException: " + $.S(this.message);
},
 is$Exception: true
};

$$.IllegalJSRegExpException = {"": ["_pattern", "_errmsg"],
 "super": "Object",
 toString$0: function() {
  return "IllegalJSRegExpException: '" + $.S(this._pattern) + "' '" + this._errmsg + "'";
},
 is$Exception: true
};

$$.RuntimeError = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  return "RuntimeError: " + this.message;
},
 is$Exception: true
};

$$.FutureNotCompleteException = {
 "super": "Object",
 toString$0: function() {
  return "Exception: future has not been completed";
},
 is$Exception: true
};

$$.FutureAlreadyCompleteException = {
 "super": "Object",
 toString$0: function() {
  return "Exception: future already completed";
},
 is$Exception: true
};

$$.FutureUnhandledException = {"": ["source", "stackTrace>"],
 "super": "Object",
 toString$0: function() {
  var t1, t2, t3;
  t1 = this.source;
  t1 = $.getInterceptor(t1).toString$0(t1);
  t2 = "FutureUnhandledException: exception while executing Future\n  " + $.S($.getInterceptor(t1).replaceAll$2(t1, "\n", "\n  ")) + "\n" + "original stack trace:\n  ";
  t3 = this.stackTrace;
  t3 = $.getInterceptor(t3).toString$0(t3);
  return t2 + $.S($.getInterceptor(t3).replaceAll$2(t3, "\n", "\n  "));
},
 is$Exception: true
};

$$._FutureImpl = {"": ["_isComplete", "_value", "_exception", "_stackTrace", "_exceptionHandled", "_throwOnException", "_successListeners", "_exceptionHandlers", "_completionListeners"],
 "super": "Object",
 get$value: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  var t1 = this._exception;
  if (!(t1 == null))
    throw $.$$throw($.FutureUnhandledException$(t1, this.get$stackTrace()));
  return this._value;
},
 get$stackTrace: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  return this._stackTrace;
},
 get$isComplete: function() {
  return this._isComplete;
},
 get$hasValue: function() {
  return this.get$isComplete() === true && this._exception == null;
},
 then$1: function(onSuccess) {
  var t1;
  if (this.get$hasValue() === true)
    onSuccess.call$1(this.get$value());
  else if (this.get$isComplete() !== true) {
    this._throwOnException = true;
    t1 = this._successListeners;
    $.getInterceptor(t1).add$1(t1, onSuccess);
  } else if (this._exceptionHandled !== true)
    throw $.$$throw($.FutureUnhandledException$(this._exception, this.get$stackTrace()));
},
 handleException$1: function(onException) {
  var t1;
  if (this._exceptionHandled === true)
    return;
  if (this._isComplete) {
    t1 = this._exception;
    if (!(t1 == null))
      this._exceptionHandled = onException.call$1(t1);
  } else {
    t1 = this._exceptionHandlers;
    $.getInterceptor(t1).add$1(t1, onException);
  }
},
 _complete$0: function(exception) {
  var t1, handler, listener, listener0;
  this._isComplete = true;
  try {
    if (!(this._exception == null))
      for (t1 = this._exceptionHandlers, t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;) {
        handler = t1.next$0();
        if ($.eqB(handler.call$1(this._exception), true)) {
          this._exceptionHandled = true;
          break;
        }
      }
    if (this.get$hasValue() === true)
      for (t1 = this._successListeners, t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;) {
        listener = t1.next$0();
        listener.call$1(this.get$value());
      }
    else if (this._exceptionHandled !== true && this._throwOnException)
      throw $.$$throw($.FutureUnhandledException$(this._exception, this.get$stackTrace()));
  } finally {
    for (t1 = this._completionListeners, t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;) {
      listener0 = t1.next$0();
      try {
        listener0.call$1(this);
      } catch (exception) {
        $.unwrapException(exception);
      }

    }
  }
},
 _setValue$1: function(value) {
  if (this._isComplete)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._value = value;
  this._complete$0();
},
 _setException$2: function(exception, stackTrace) {
  if (exception == null)
    throw $.$$throw($.ArgumentError$(null));
  if (this._isComplete)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._exception = exception;
  this._stackTrace = stackTrace;
  this._complete$0();
}
};

$$._CompleterImpl = {"": ["_futureImpl"],
 "super": "Object",
 get$future: function() {
  return this._futureImpl;
},
 complete$1: function(value) {
  this._futureImpl._setValue$1(value);
},
 completeException$2: function(exception, stackTrace) {
  this._futureImpl._setException$2(exception, stackTrace);
},
 completeException$1: function(exception) {
  return this.completeException$2(exception,null)
}
};

$$.List = {
 "super": "Object",
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._HashMapImpl = {"": ["_keys", "_values", "_loadLimit", "_numberOfEntries", "_numberOfDeleted"],
 "super": "Object",
 _probeForAdding$1: function(key) {
  var t1, hash, insertionIndex, numberOfProbes, existingKey, numberOfProbes0;
  if (key == null)
    throw $.$$throw($.ArgumentError$(null));
  t1 = $.getInterceptor(key).get$hashCode(key);
  if (t1 !== (t1 | 0))
    return this._probeForAdding$1$bailout(1, key, t1);
  hash = (t1 & this._keys.length - 1) >>> 0;
  for (insertionIndex = -1, numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null) {
      if (insertionIndex < 0)
        return hash;
      return insertionIndex;
    } else if ($.eqB(existingKey, key))
      return hash;
    else if (insertionIndex < 0 && existingKey === $.CTC8)
      insertionIndex = hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
  }
},
 _probeForAdding$1$bailout: function(state0, key, t1) {
  var hash, insertionIndex, numberOfProbes, existingKey, numberOfProbes0;
  hash = $.and(t1, this._keys.length - 1);
  for (insertionIndex = -1, numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash !== (hash | 0))
      throw $.iae(hash);
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null) {
      if (insertionIndex < 0)
        return hash;
      return insertionIndex;
    } else if ($.eqB(existingKey, key))
      return hash;
    else if (insertionIndex < 0 && existingKey === $.CTC8)
      insertionIndex = hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
  }
},
 _probeForLookup$1: function(key) {
  var hash, numberOfProbes, t1, existingKey, numberOfProbes0;
  if (key == null)
    throw $.$$throw($.ArgumentError$(null));
  hash = $.and($.getInterceptor(key).get$hashCode(key), this._keys.length - 1);
  if (hash !== (hash | 0))
    return this._probeForLookup$1$bailout(1, key, hash);
  for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
  }
},
 _probeForLookup$1$bailout: function(state0, key, hash) {
  var numberOfProbes, t1, existingKey, numberOfProbes0;
  for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash !== (hash | 0))
      throw $.iae(hash);
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
  }
},
 _ensureCapacity$0: function() {
  var newNumberOfEntries, capacity, numberOfFreeOrDeleted, t1;
  newNumberOfEntries = this._numberOfEntries + 1;
  if ($.geB(newNumberOfEntries, this._loadLimit)) {
    this._grow$1(this._keys.length * 2);
    return;
  }
  capacity = this._keys.length;
  numberOfFreeOrDeleted = capacity - newNumberOfEntries;
  t1 = this._numberOfDeleted;
  if (t1 > numberOfFreeOrDeleted - t1)
    this._grow$1(capacity);
},
 _grow$1: function(newCapacity) {
  var capacity, oldKeys, oldValues, t1, t2, i, key, value, newIndex, t3;
  capacity = this._keys.length;
  this._loadLimit = $.tdiv(newCapacity * 3, 4);
  oldKeys = this._keys;
  oldValues = this._values;
  this._keys = $.List_List(newCapacity);
  this._values = $.List_List(newCapacity);
  for (t1 = oldKeys.length, t2 = oldValues.length, i = 0; i < capacity; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    key = oldKeys[i];
    if (key == null || key === $.CTC8)
      continue;
    if (i >= t2)
      throw $.ioore(i);
    value = oldValues[i];
    newIndex = this._probeForAdding$1(key);
    t3 = this._keys;
    if (newIndex !== (newIndex | 0))
      throw $.iae(newIndex);
    if (newIndex < 0 || newIndex >= t3.length)
      throw $.ioore(newIndex);
    t3[newIndex] = key;
    t3 = this._values;
    if (newIndex >= t3.length)
      throw $.ioore(newIndex);
    t3[newIndex] = value;
  }
  this._numberOfDeleted = 0;
},
 clear$0: function() {
  var t1, length$, t2, t3, i;
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  t1 = this._keys;
  length$ = t1.length;
  for (t2 = this._values, t3 = t2.length, i = 0; i < length$; ++i) {
    t1[i] = null;
    if (i >= t3)
      throw $.ioore(i);
    t2[i] = null;
  }
},
 oprator$indexSet$2: function(key, value) {
  var index, t1;
  this._ensureCapacity$0();
  index = this._probeForAdding$1(key);
  t1 = this._keys;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  t1 = t1[index];
  if (t1 == null || t1 === $.CTC8)
    this._numberOfEntries = this._numberOfEntries + 1;
  t1 = this._keys;
  if (index >= t1.length)
    throw $.ioore(index);
  t1[index] = key;
  t1 = this._values;
  if (index >= t1.length)
    throw $.ioore(index);
  t1[index] = value;
},
 operator$index$1: function(key) {
  var index, t1;
  index = this._probeForLookup$1(key);
  if ($.ltB(index, 0))
    return;
  t1 = this._values;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 remove$1: function(key) {
  var index, t1, value;
  index = this._probeForLookup$1(key);
  if ($.geB(index, 0)) {
    this._numberOfEntries = this._numberOfEntries - 1;
    t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    value = t1[index];
    t1[index] = null;
    t1 = this._keys;
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = $.CTC8;
    this._numberOfDeleted = this._numberOfDeleted + 1;
    return value;
  }
  return;
},
 get$isEmpty: function() {
  return this._numberOfEntries === 0;
},
 get$length: function() {
  return this._numberOfEntries;
},
 forEach$1: function(f) {
  var length$, i, t1, key;
  length$ = this._keys.length;
  for (i = 0; i < length$; ++i) {
    t1 = this._keys;
    if (i >= t1.length)
      throw $.ioore(i);
    key = t1[i];
    if (!(key == null) && !(key === $.CTC8)) {
      t1 = this._values;
      if (i >= t1.length)
        throw $.ioore(i);
      f.call$2(key, t1[i]);
    }
  }
},
 get$keys: function() {
  var t1, list;
  t1 = {};
  list = $.List_List(this.get$length());
  t1.i_1 = 0;
  $.getInterceptor(this).forEach$1(this, new $._HashMapImpl_keys_anon(t1, list));
  return list;
},
 get$values: function() {
  var t1, list;
  t1 = {};
  list = $.List_List(this.get$length());
  t1.i_10 = 0;
  $.getInterceptor(this).forEach$1(this, new $._HashMapImpl_values_anon(t1, list));
  return list;
},
 containsKey$1: function(key) {
  return !$.eqB(this._probeForLookup$1(key), -1);
},
 containsValue$1: function(value) {
  var t1, length$, t2, t3, i, key, t4;
  t1 = this._values;
  length$ = t1.length;
  for (t2 = this._keys, t3 = t2.length, i = 0; i < length$; ++i) {
    if (i >= t3)
      throw $.ioore(i);
    key = t2[i];
    if (!(key == null) && !(key === $.CTC8)) {
      t4 = t1[i];
      if (typeof t4 !== 'string')
        return this.containsValue$1$bailout(1, value, i, t4, length$);
      if (t4 === value)
        return true;
    }
  }
  return false;
},
 containsValue$1$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      length$ = env3;
      t1 = env2;
      i = env1;
      value = env0;
      break;
  }
  switch (state0) {
    case 0:
      length$ = this._values.length;
      i = 0;
    case 1:
      var length$, i, t1, key, value;
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!(i < length$))
                break L0;
              t1 = this._keys;
              if (i >= t1.length)
                throw $.ioore(i);
              key = t1[i];
            case 1:
              if (state0 === 1 || state0 === 0 && !(key == null) && !(key === $.CTC8))
                switch (state0) {
                  case 0:
                    t1 = this._values;
                    if (i >= t1.length)
                      throw $.ioore(i);
                    t1 = t1[i];
                  case 1:
                    state0 = 0;
                    if ($.eqB(t1, value))
                      return true;
                }
              ++i;
          }
      return false;
  }
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _HashMapImpl$0: function() {
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  this._loadLimit = $._HashMapImpl__computeLoadLimit(8);
  this._keys = $.List_List(8);
  this._values = $.List_List(8);
},
 is$Map: function() { return true; }
};

$$._DeletedKeySentinel = {
 "super": "Object"
};

$$._KeyValuePair = {"": ["key>", "value="],
 "super": "Object"
};

$$._LinkedHashMapImpl = {"": ["_liblib$_list", "_map"],
 "super": "Object",
 oprator$indexSet$2: function(key, value) {
  var t1;
  if (this._map.containsKey$1(key) === true)
    $.index(this._map, key).get$element().set$value(value);
  else {
    t1 = this._liblib$_list;
    $.getInterceptor(t1).addLast$1(t1, $._KeyValuePair$(key, value));
    $.indexSet(this._map, key, this._liblib$_list.lastEntry$0());
  }
},
 operator$index$1: function(key) {
  var entry = $.index(this._map, key);
  if (entry == null)
    return;
  return entry.get$element().get$value();
},
 remove$1: function(key) {
  var entry = this._map.remove$1(key);
  if (entry == null)
    return;
  entry.remove$0();
  return entry.get$element().get$value();
},
 get$keys: function() {
  var t1, list, t2;
  t1 = {};
  list = $.List_List(this.get$length());
  t1.index_10 = 0;
  t2 = this._liblib$_list;
  $.getInterceptor(t2).forEach$1(t2, new $._LinkedHashMapImpl_keys_anon(list, t1));
  return list;
},
 get$values: function() {
  var t1, list, t2;
  t1 = {};
  list = $.List_List(this.get$length());
  t1.index_1 = 0;
  t2 = this._liblib$_list;
  $.getInterceptor(t2).forEach$1(t2, new $._LinkedHashMapImpl_values_anon(t1, list));
  return list;
},
 forEach$1: function(f) {
  var t1 = this._liblib$_list;
  $.getInterceptor(t1).forEach$1(t1, new $._LinkedHashMapImpl_forEach_anon(f));
},
 containsKey$1: function(key) {
  return this._map.containsKey$1(key);
},
 containsValue$1: function(value) {
  var t1 = this._liblib$_list;
  return $.getInterceptor(t1).some$1(t1, new $._LinkedHashMapImpl_containsValue_anon(value));
},
 get$length: function() {
  var t1 = this._map;
  return $.getInterceptor(t1).get$length(t1);
},
 get$isEmpty: function() {
  return $.eq(this.get$length(), 0);
},
 clear$0: function() {
  var t1 = this._map;
  $.getInterceptor(t1).clear$0(t1);
  t1 = this._liblib$_list;
  $.getInterceptor(t1).clear$0(t1);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _LinkedHashMapImpl$0: function() {
  this._map = $.HashMap_HashMap();
  this._liblib$_list = $.DoubleLinkedQueue$();
},
 is$Map: function() { return true; }
};

$$.Object = {
 "super": "",
 operator$eq$1: function(other) {
  return this === other;
},
 get$hashCode: function() {
  return $.Primitives_objectHashCode(this);
},
 toString$0: function() {
  return $.Primitives_objectToString(this);
}
};

$$.DoubleLinkedQueueEntry = {"": ["_previous<", "_next=", "_liblib$_element>"],
 "super": "Object",
 _next$0: function() { return this._next.call$0(); },
 _link$2: function(p, n) {
  this._next = n;
  this._previous = p;
  p.set$_next(this);
  n.set$_previous(this);
},
 append$1: function(e) {
  $.DoubleLinkedQueueEntry$(e)._link$2(this, this._next);
},
 prepend$1: function(e) {
  $.DoubleLinkedQueueEntry$(e)._link$2(this._previous, this);
},
 remove$0: function() {
  var t1 = this._next;
  this._previous.set$_next(t1);
  t1 = this._previous;
  this._next.set$_previous(t1);
  this._next = null;
  this._previous = null;
  return this._liblib$_element;
},
 _asNonSentinelEntry$0: function() {
  return this;
},
 previousEntry$0: function() {
  return this._previous._asNonSentinelEntry$0();
},
 get$element: function() {
  return this._liblib$_element;
},
 DoubleLinkedQueueEntry$1: function(e) {
  this._liblib$_element = e;
}
};

$$._DoubleLinkedQueueEntrySentinel = {"": ["_previous", "_next", "_liblib$_element"],
 "super": "DoubleLinkedQueueEntry",
 remove$0: function() {
  throw $.$$throw($.StateError$("Empty queue"));
},
 _asNonSentinelEntry$0: function() {
  return;
},
 get$element: function() {
  throw $.$$throw($.StateError$("Empty queue"));
},
 _DoubleLinkedQueueEntrySentinel$0: function() {
  this._link$2(this, this);
}
};

$$.DoubleLinkedQueue = {"": ["_sentinel"],
 "super": "Object",
 addLast$1: function(value) {
  this._sentinel.prepend$1(value);
},
 addFirst$1: function(value) {
  this._sentinel.append$1(value);
},
 add$1: function(value) {
  this._sentinel.prepend$1(value);
},
 addAll$1: function(collection) {
  var t1, t2;
  for (t1 = $.getInterceptor(collection).iterator$0(collection); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    this._sentinel.prepend$1(t2);
  }
},
 removeLast$0: function() {
  return this._sentinel._previous.remove$0();
},
 removeFirst$0: function() {
  return this._sentinel._next.remove$0();
},
 get$first: function() {
  return this._sentinel._next.get$element();
},
 get$last: function() {
  return this._sentinel._previous.get$element();
},
 lastEntry$0: function() {
  return this._sentinel.previousEntry$0();
},
 get$length: function() {
  var t1 = {};
  t1.counter_1 = 0;
  $.getInterceptor(this).forEach$1(this, new $.DoubleLinkedQueue_length_anon(t1));
  return t1.counter_1;
},
 get$isEmpty: function() {
  var t1 = this._sentinel;
  return t1._next === t1;
},
 clear$0: function() {
  var t1 = this._sentinel;
  t1._next = t1;
  t1 = this._sentinel;
  t1._previous = t1;
},
 forEach$1: function(f) {
  var entry, nextEntry;
  entry = this._sentinel._next;
  for (; !(entry === this._sentinel); entry = nextEntry) {
    nextEntry = entry.get$_next();
    f.call$1(entry.get$_liblib$_element());
  }
},
 some$1: function(f) {
  var entry, nextEntry;
  entry = this._sentinel._next;
  for (; !(entry === this._sentinel); entry = nextEntry) {
    nextEntry = entry.get$_next();
    if (f.call$1(entry.get$_liblib$_element()) === true)
      return true;
  }
  return false;
},
 filter$1: function(f) {
  var other, entry, nextEntry;
  other = $.Queue_Queue();
  entry = this._sentinel._next;
  for (; !(entry === this._sentinel); entry = nextEntry) {
    nextEntry = entry.get$_next();
    if (f.call$1(entry.get$_liblib$_element()) === true)
      $.getInterceptor(other).addLast$1(other, entry.get$_liblib$_element());
  }
  return other;
},
 iterator$0: function() {
  return $._DoubleLinkedQueueIterator$(this._sentinel);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 DoubleLinkedQueue$0: function() {
  this._sentinel = $._DoubleLinkedQueueEntrySentinel$();
},
 is$Collection: function() { return true; }
};

$$._DoubleLinkedQueueIterator = {"": ["_sentinel", "_currentEntry"],
 "super": "Object",
 get$hasNext: function() {
  return !(this._currentEntry.get$_next() === this._sentinel);
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$("No more elements"));
  this._currentEntry = this._currentEntry.get$_next();
  return this._currentEntry.get$element();
},
 _DoubleLinkedQueueIterator$1: function(_sentinel) {
  this._currentEntry = this._sentinel;
}
};

$$._HashSetImpl = {"": ["_backingMap>"],
 "super": "Object",
 clear$0: function() {
  var t1 = this._backingMap;
  $.getInterceptor(t1).clear$0(t1);
},
 add$1: function(value) {
  this._backingMap.oprator$indexSet$2(value, value);
},
 contains$1: function(value) {
  return this._backingMap.containsKey$1(value);
},
 remove$1: function(value) {
  if (this._backingMap.containsKey$1(value) !== true)
    return false;
  this._backingMap.remove$1(value);
  return true;
},
 addAll$1: function(collection) {
  $.getInterceptor(collection).forEach$1(collection, new $._HashSetImpl_addAll_anon(this));
},
 forEach$1: function(f) {
  var t1 = this._backingMap;
  $.getInterceptor(t1).forEach$1(t1, new $._HashSetImpl_forEach_anon(f));
},
 filter$1: function(f) {
  var result, t1;
  result = $.Set_Set();
  t1 = this._backingMap;
  $.getInterceptor(t1).forEach$1(t1, new $._HashSetImpl_filter_anon(f, result));
  return result;
},
 some$1: function(f) {
  var keys = this._backingMap.get$keys();
  return $.getInterceptor(keys).some$1(keys, f);
},
 get$isEmpty: function() {
  var t1 = this._backingMap;
  return $.getInterceptor(t1).get$isEmpty(t1);
},
 get$length: function() {
  var t1 = this._backingMap;
  return $.getInterceptor(t1).get$length(t1);
},
 iterator$0: function() {
  return $._HashSetIterator$(this);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 _HashSetImpl$0: function() {
  this._backingMap = $._HashMapImpl$();
},
 is$Collection: function() { return true; }
};

$$._HashSetIterator = {"": ["_entries", "_nextValidIndex"],
 "super": "Object",
 get$hasNext: function() {
  var t1, t2, t3;
  t1 = this._nextValidIndex;
  t2 = this._entries;
  t3 = t2.length;
  if (t1 >= t3)
    return false;
  if (t1 < 0)
    throw $.ioore(t1);
  if (t2[t1] === $.CTC8)
    this._advance$0();
  return this._nextValidIndex < t3;
},
 next$0: function() {
  var t1, t2, res;
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$("No more elements"));
  t1 = this._entries;
  t2 = this._nextValidIndex;
  if (t2 < 0 || t2 >= t1.length)
    throw $.ioore(t2);
  res = t1[t2];
  this._advance$0();
  return res;
},
 _advance$0: function() {
  var t1, length$, t2, entry;
  t1 = this._entries;
  length$ = t1.length;
  do {
    t2 = this._nextValidIndex + 1;
    this._nextValidIndex = t2;
    if (t2 >= length$)
      break;
    t2 = this._nextValidIndex;
    if (t2 < 0 || t2 >= length$)
      throw $.ioore(t2);
    entry = t1[t2];
  } while (entry == null || entry === $.CTC8);
},
 _HashSetIterator$1: function(set_) {
  this._advance$0();
}
};

$$.String = {
 "super": "Object",
 is$String: true
};

$$._StringBufferImpl = {"": ["_buffer>", "_length>"],
 "super": "Object",
 get$length: function() {
  return this._length;
},
 get$isEmpty: function() {
  return $.eq(this._length, 0);
},
 add$1: function(obj) {
  var str, t1, t3;
  str = $.getInterceptor(obj).toString$0(obj);
  if (str == null || $.getInterceptor(str).get$isEmpty(str) === true)
    return this;
  t1 = this._buffer;
  $.getInterceptor(t1).add$1(t1, str);
  t1 = this._length;
  if (typeof t1 !== 'number')
    return this.add$1$bailout(1, str, t1);
  t3 = $.getInterceptor(str).get$length(str);
  if (typeof t3 !== 'number')
    return this.add$1$bailout(2, t3, t1);
  this._length = t1 + t3;
  return this;
},
 add$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env1;
      str = env0;
      break;
    case 2:
      t1 = env1;
      t3 = env0;
      break;
  }
  switch (state0) {
    case 0:
      str = $.getInterceptor(obj).toString$0(obj);
      if (str == null || $.getInterceptor(str).get$isEmpty(str) === true)
        return this;
      t1 = this._buffer;
      $.getInterceptor(t1).add$1(t1, str);
      t1 = this._length;
    case 1:
      state0 = 0;
      t3 = $.getInterceptor(str).get$length(str);
    case 2:
      var str, t1, t3;
      state0 = 0;
      this._length = $.add(t1, t3);
      return this;
  }
},
 addAll$1: function(objects) {
  var t1, t2;
  for (t1 = $.getInterceptor(objects).iterator$0(objects); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    $.getInterceptor(this).add$1(this, t2);
  }
  return this;
},
 clear$0: function() {
  this._buffer = $.List_List(null);
  this._length = 0;
  return this;
},
 toString$0: function() {
  var t1, result;
  t1 = this._buffer;
  if ($.eqB($.getInterceptor(t1).get$length(t1), 0))
    return "";
  t1 = this._buffer;
  if ($.eqB($.getInterceptor(t1).get$length(t1), 1))
    return $.index(this._buffer, 0);
  result = $.stringJoinUnchecked($.Strings__toJsStringArray(this._buffer), "");
  t1 = this._buffer;
  $.getInterceptor(t1).clear$0(t1);
  t1 = this._buffer;
  $.getInterceptor(t1).add$1(t1, result);
  return result;
},
 _StringBufferImpl$1: function(content$) {
  $.getInterceptor(this).clear$0(this);
  $.getInterceptor(this).add$1(this, content$);
}
};

$$.ObjectInterceptor = {
 "super": "Object",
 toString$0: function(receiver) { return receiver.toString$0(); },
 add$1: function(receiver, a0) { return receiver.add$1(a0); },
 charCodeAt$1: function(receiver, a0) { return receiver.charCodeAt$1(a0); },
 iterator$0: function(receiver) { return receiver.iterator$0(); },
 substring$1: function(receiver, a0) { return receiver.substring$1(a0); },
 indexOf$2: function(receiver, a0, a1) { return receiver.indexOf$2(a0, a1); },
 truncate$0: function(receiver) { return receiver.truncate$0(); },
 set$length: function(receiver) { return receiver.set$length(); },
 contains$2: function(receiver, a0, a1) { return receiver.contains$2(a0, a1); },
 removeAt$1: function(receiver, a0) { return receiver.removeAt$1(a0); },
 removeLast$0: function(receiver) { return receiver.removeLast$0(); },
 operator$eq$1: function(receiver, a0) { return receiver.operator$eq$1(a0); },
 removeRange$2: function(receiver, a0, a1) { return receiver.removeRange$2(a0, a1); },
 get$length: function(receiver) { return receiver.get$length(); },
 floor$0: function(receiver) { return receiver.floor$0(); },
 forEach$1: function(receiver, a0) { return receiver.forEach$1(a0); },
 getRange$2: function(receiver, a0, a1) { return receiver.getRange$2(a0, a1); },
 get$first: function(receiver) { return receiver.get$first(); },
 toRadixString$1: function(receiver, a0) { return receiver.toRadixString$1(a0); },
 toLowerCase$0: function(receiver) { return receiver.toLowerCase$0(); },
 addAll$1: function(receiver, a0) { return receiver.addAll$1(a0); },
 replaceAll$2: function(receiver, a0, a1) { return receiver.replaceAll$2(a0, a1); },
 get$isNaN: function(receiver) { return receiver.get$isNaN(); },
 contains$1: function(receiver, a0) { return receiver.contains$1(a0); },
 get$hashCode: function(receiver) { return receiver.get$hashCode(); },
 clear$0: function(receiver) { return receiver.clear$0(); },
 allMatches$1: function(receiver, a0) { return receiver.allMatches$1(a0); },
 substring$2: function(receiver, a0, a1) { return receiver.substring$2(a0, a1); },
 ceil$0: function(receiver) { return receiver.ceil$0(); },
 filter$1: function(receiver, a0) { return receiver.filter$1(a0); },
 abs$0: function(receiver) { return receiver.abs$0(); },
 toInt$0: function(receiver) { return receiver.toInt$0(); },
 split$1: function(receiver, a0) { return receiver.split$1(a0); },
 get$isInfinite: function(receiver) { return receiver.get$isInfinite(); },
 indexOf$1: function(receiver, a0) { return receiver.indexOf$1(a0); },
 get$isEmpty: function(receiver) { return receiver.get$isEmpty(); },
 endsWith$1: function(receiver, a0) { return receiver.endsWith$1(a0); },
 get$last: function(receiver) { return receiver.get$last(); },
 addLast$1: function(receiver, a0) { return receiver.addLast$1(a0); },
 some$1: function(receiver, a0) { return receiver.some$1(a0); },
 get$isNegative: function(receiver) { return receiver.get$isNegative(); },
 trim$0: function(receiver) { return receiver.trim$0(); },
 startsWith$1: function(receiver, a0) { return receiver.startsWith$1(a0); }
};

$$.JSFunction = {
 "super": "Object",
 toString$0: function(receiver) {
  return "Closure";
}
};

$$.JSBool = {
 "super": "Object",
 toString$0: function(receiver) {
  return String(receiver);
},
 get$hashCode: function(receiver) {
  return receiver ? 519018 : 218159;
},
 is$bool: true
};

$$.JSNull = {
 "super": "Object",
 toString$0: function(receiver) {
  return "null";
},
 get$hashCode: function(receiver) {
  return 0;
}
};

$$.JSArray = {
 "super": "Object",
 add$1: function(receiver, value) {
  $.checkGrowable(receiver, "add");
  receiver.push(value);
},
 removeAt$1: function(receiver, index) {
  if (!(typeof index === 'number' && Math.floor(index) === index))
    throw $.$$throw($.ArgumentError$(index));
  if (index < 0 || index >= receiver.length)
    throw $.$$throw($.RangeError$value(index));
  $.checkGrowable(receiver, "removeAt");
  return receiver.splice(index, 1)[0];
},
 removeLast$0: function(receiver) {
  $.checkGrowable(receiver, "removeLast");
  if (receiver.length === 0)
    throw $.$$throw($.RangeError$value(-1));
  return receiver.pop();
},
 filter$1: function(receiver, f) {
  return $.Collections_filter(receiver, [], f);
},
 addAll$1: function(receiver, collection) {
  var t1, t2;
  for (t1 = $.getInterceptor(collection).iterator$0(collection); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    $.getInterceptor(receiver).add$1(receiver, t2);
  }
},
 addLast$1: function(receiver, value) {
  $.checkGrowable(receiver, "addLast");
  receiver.push(value);
},
 clear$0: function(receiver) {
  this.set$length(receiver, 0);
},
 forEach$1: function(receiver, f) {
  return $.Collections_forEach(receiver, f);
},
 getRange$2: function(receiver, start, length$) {
  var t1, end;
  if (0 === length$)
    return [];
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$))
    throw $.$$throw($.ArgumentError$(length$));
  t1 = length$ < 0;
  if (t1)
    throw $.$$throw($.ArgumentError$(length$));
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  end = start + length$;
  if (end > receiver.length)
    throw $.$$throw($.RangeError$value(length$));
  if (t1)
    throw $.$$throw($.ArgumentError$(length$));
  return receiver.slice(start, end);
},
 get$last: function(receiver) {
  var t1, t2;
  t1 = receiver.length;
  t2 = t1 - 1;
  if (t2 < 0)
    throw $.ioore(t2);
  return receiver[t2];
},
 get$first: function(receiver) {
  if (0 >= receiver.length)
    throw $.ioore(0);
  return receiver[0];
},
 removeRange$2: function(receiver, start, length$) {
  var receiverLength, t1, t2;
  $.checkGrowable(receiver, "removeRange");
  if ($.eqB(length$, 0))
    return;
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$))
    throw $.$$throw($.ArgumentError$(length$));
  if (length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  receiverLength = receiver.length;
  if (start < 0 || start >= receiverLength)
    throw $.$$throw($.RangeError$value(start));
  t1 = start + length$;
  if (t1 > receiverLength)
    throw $.$$throw($.RangeError$value(t1));
  t2 = receiverLength - length$;
  $.Arrays_copy(receiver, t1, receiver, start, t2 - start);
  $.getInterceptor(receiver).set$length(receiver, t2);
},
 some$1: function(receiver, f) {
  return $.Collections_some(receiver, f);
},
 indexOf$2: function(receiver, element, start) {
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  return $.Arrays_indexOf(receiver, element, start, receiver.length);
},
 indexOf$1: function($,element) {
  return this.indexOf$2($,element,0)
},
 contains$1: function(receiver, other) {
  var i;
  for (i = 0; i < receiver.length; ++i)
    if ($.eqB(other, receiver[i]))
      return true;
  return false;
},
 get$isEmpty: function(receiver) {
  return receiver.length === 0;
},
 toString$0: function(receiver) {
  return $.Collections_collectionToString(receiver);
},
 iterator$0: function(receiver) {
  return $.ListIterator$(receiver);
},
 get$hashCode: function(receiver) {
  return $.Primitives_objectHashCode(receiver);
},
 get$length: function(receiver) {
  return receiver.length;
},
 set$length: function(receiver, newLength) {
  if (!(typeof newLength === 'number' && Math.floor(newLength) === newLength))
    throw $.$$throw($.ArgumentError$(newLength));
  if (newLength < 0)
    throw $.$$throw($.RangeError$value(newLength));
  $.checkGrowable(receiver, "set length");
  receiver.length = newLength;
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$.JSNumber = {
 "super": "Object",
 get$isNegative: function(receiver) {
  return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
},
 get$isNaN: function(receiver) {
  return isNaN(receiver);
},
 abs$0: function(receiver) {
  return Math.abs(receiver);
},
 toInt$0: function(receiver) {
  var truncated;
  if (this.get$isNaN(receiver) === true)
    throw $.$$throw($.FormatException$("NaN"));
  if (this.get$isInfinite(receiver) === true)
    throw $.$$throw($.FormatException$("Infinity"));
  truncated = this.truncate$0(receiver);
  return truncated == -0.0 ? 0 : truncated;
},
 ceil$0: function(receiver) {
  return Math.ceil(receiver);
},
 floor$0: function(receiver) {
  return Math.floor(receiver);
},
 get$isInfinite: function(receiver) {
  return receiver == Infinity || receiver == -Infinity;
},
 truncate$0: function(receiver) {
  return receiver < 0 ? this.ceil$0(receiver) : this.floor$0(receiver);
},
 toRadixString$1: function(receiver, radix) {
  $.checkNum(radix);
  if ($.ltB(radix, 2) || $.gtB(radix, 36))
    throw $.$$throw($.ArgumentError$(radix));
  return receiver.toString(radix);
},
 toString$0: function(receiver) {
  if (receiver === 0 && (1 / receiver) < 0)
    return "-0.0";
  else
    return String(receiver);
},
 get$hashCode: function(receiver) {
  return receiver & 536870911;
}
};

$$.JSInt = {
 "super": "JSNumber"
};

$$.JSDouble = {
 "super": "JSNumber"
};

$$.JSString = {
 "super": "Object",
 charCodeAt$1: function(receiver, index) {
  if (!(typeof index === 'number'))
    throw $.$$throw($.ArgumentError$(index));
  if (index < 0)
    throw $.$$throw($.RangeError$value(index));
  if (index >= receiver.length)
    throw $.$$throw($.RangeError$value(index));
  return receiver.charCodeAt(index);
},
 allMatches$1: function(receiver, str) {
  $.checkString(str);
  return $.allMatchesInStringUnchecked(receiver, str);
},
 endsWith$1: function(receiver, other) {
  var otherLength, t1;
  $.checkString(other);
  otherLength = $.getInterceptor(other).get$length(other);
  t1 = receiver.length;
  if ($.gtB(otherLength, t1))
    return false;
  if (typeof otherLength !== 'number')
    throw $.iae(otherLength);
  return $.eq(other, this.substring$1(receiver, t1 - otherLength));
},
 replaceAll$2: function(receiver, from, to) {
  $.checkString(to);
  return $.stringReplaceAllUnchecked(receiver, from, to);
},
 split$1: function(receiver, pattern) {
  $.checkNull(pattern);
  return $.stringSplitUnchecked(receiver, pattern);
},
 startsWith$1: function(receiver, other) {
  var otherLength;
  $.checkString(other);
  otherLength = $.getInterceptor(other).get$length(other);
  if ($.gtB(otherLength, receiver.length))
    return false;
  return other == receiver.substring(0, otherLength);
},
 substring$2: function(receiver, startIndex, endIndex) {
  $.checkNum(startIndex);
  if (endIndex == null)
    endIndex = receiver.length;
  $.checkNum(endIndex);
  if ($.ltB(startIndex, 0))
    throw $.$$throw($.RangeError$value(startIndex));
  if ($.gtB(startIndex, endIndex))
    throw $.$$throw($.RangeError$value(startIndex));
  if ($.gtB(endIndex, receiver.length))
    throw $.$$throw($.RangeError$value(endIndex));
  return receiver.substring(startIndex, endIndex);
},
 substring$1: function($,startIndex) {
  return this.substring$2($,startIndex,null)
},
 toLowerCase$0: function(receiver) {
  return receiver.toLowerCase();
},
 trim$0: function(receiver) {
  return receiver.trim();
},
 indexOf$2: function(receiver, other, start) {
  $.checkNull(other);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (!(typeof other === 'string'))
    throw $.$$throw($.ArgumentError$(other));
  if (start < 0)
    return -1;
  return receiver.indexOf(other, start);
},
 indexOf$1: function($,other) {
  return this.indexOf$2($,other,0)
},
 contains$2: function(receiver, other, startIndex) {
  $.checkNull(other);
  return $.stringContainsUnchecked(receiver, other, startIndex);
},
 contains$1: function($,other) {
  return this.contains$2($,other,0)
},
 get$isEmpty: function(receiver) {
  return receiver.length === 0;
},
 toString$0: function(receiver) {
  return receiver;
},
 get$hashCode: function(receiver) {
  var hash, i, hash0, hash1;
  for (hash = 0, i = 0; i < receiver.length; ++i, hash = hash1) {
    hash0 = 536870911 & hash + receiver.charCodeAt(i);
    hash1 = 536870911 & hash0 + ((524287 & hash0) << 10 >>> 0);
    hash1 = hash1 ^ (hash1 >> 6);
  }
  hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash0 = hash0 ^ (hash0 >> 11);
  return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
},
 get$length: function(receiver) {
  return receiver.length;
},
 is$String: true
};

$$.AbstractWorkerEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.AudioContextEvents = {"": ["_ptr"],
 "super": "Events",
 get$complete: function() {
  return this.operator$index$1("complete");
},
 complete$1: function(arg0) { return this.get$complete().call$1(arg0); }
};

$$.BatteryManagerEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.BodyElementEvents = {"": ["_ptr"],
 "super": "ElementEvents"
};

$$.DOMApplicationCacheEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.DedicatedWorkerContextEvents = {"": ["_ptr"],
 "super": "WorkerContextEvents"
};

$$.DocumentEvents = {"": ["_ptr"],
 "super": "ElementEvents",
 get$click: function() {
  return this.operator$index$1("click");
},
 get$copy: function() {
  return this.operator$index$1("copy");
},
 copy$1: function(arg0) { return this.get$copy().call$1(arg0); },
 get$mouseOut: function() {
  return this.operator$index$1("mouseout");
},
 get$mouseOver: function() {
  return this.operator$index$1("mouseover");
},
 get$readyStateChange: function() {
  return this.operator$index$1("readystatechange");
},
 get$reset: function() {
  return this.operator$index$1("reset");
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$._FrozenCssClassSet = {
 "super": "CssClassSet",
 writeClasses$1: function(s) {
  throw $.$$throw($.UnsupportedError$("frozen class set cannot be modified"));
},
 readClasses$0: function() {
  return $.Set_Set();
}
};

$$._ChildrenElementList = {"": ["_element>", "_childElements"],
 "super": "Object",
 _toList$0: function() {
  var t1, t3, output, len, i, t2;
  t1 = this._childElements;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this._toList$0$bailout(1, t1);
  t3 = t1.length;
  output = $.List_List(t3);
  len = t1.length;
  i = 0;
  for (; i < len; ++i) {
    t2 = t1[i];
    if (i >= t3)
      throw $.ioore(i);
    output[i] = t2;
  }
  return output;
},
 _toList$0$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      output = env2;
      len = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this._childElements;
    case 1:
      state0 = 0;
      output = $.List_List($.getInterceptor(t1).get$length(t1));
      len = $.getInterceptor(t1).get$length(t1);
    case 2:
      var t1, output, len, i, t2;
      state0 = 0;
      i = 0;
      for (; $.ltB(i, len); ++i) {
        t2 = $.index(t1, i);
        if (i >= output.length)
          throw $.ioore(i);
        output[i] = t2;
      }
      return output;
  }
},
 contains$1: function(element) {
  var t1 = this._childElements;
  return $.getInterceptor(t1).contains$1(t1, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = this._childElements, t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
},
 filter$1: function(f) {
  var output, t1, t2;
  output = [];
  t1 = new $._ChildrenElementList_filter_anon(output, f);
  for (t2 = this._childElements, t2 = $.getInterceptor(t2).iterator$0(t2); t2.get$hasNext() === true;)
    t1.call$1(t2.next$0());
  return $._FrozenElementList$_wrap(output);
},
 some$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    if (f.call$1(t1.next$0()) === true)
      return true;
  return false;
},
 get$isEmpty: function() {
  return this._element.get$$$dom_firstElementChild() == null;
},
 get$length: function() {
  var t1 = this._childElements;
  return $.getInterceptor(t1).get$length(t1);
},
 operator$index$1: function(index) {
  return $.index(this._childElements, index);
},
 oprator$indexSet$2: function(index, value) {
  this._element.$$dom_replaceChild$2(value, $.index(this._childElements, index));
},
 set$length: function(newLength) {
  throw $.$$throw($.UnsupportedError$(""));
},
 add$1: function(value) {
  this._element.$$dom_appendChild$1(value);
  return value;
},
 addLast$1: function(value) {
  this._element.$$dom_appendChild$1(value);
  return value;
},
 iterator$0: function() {
  var t1 = this._toList$0();
  return $.getInterceptor(t1).iterator$0(t1);
},
 addAll$1: function(collection) {
  var t1, t2;
  for (t1 = $.getInterceptor(collection).iterator$0(collection), t2 = this._element; t1.get$hasNext() === true;)
    t2.$$dom_appendChild$1(t1.next$0());
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnimplementedError$(null));
},
 getRange$2: function(start, rangeLength) {
  return $._FrozenElementList$_wrap($._Lists_getRange(this, start, rangeLength, []));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 clear$0: function() {
  this._element.set$text("");
},
 removeLast$0: function() {
  var result = $.getInterceptor(this).get$last(this);
  if (!(result == null))
    this._element.$$dom_removeChild$1(result);
  return result;
},
 get$first: function() {
  return this._element.get$$$dom_firstElementChild();
},
 get$last: function() {
  return this._element.get$$$dom_lastElementChild();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._FrozenElementList = {"": ["_nodeList"],
 "super": "Object",
 contains$1: function(element) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    if ($.eqB(t1.next$0(), element))
      return true;
  return false;
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
},
 filter$1: function(f) {
  var out, t1, t2;
  out = [];
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (f.call$1(t2) === true)
      $.getInterceptor(out).add$1(out, t2);
  }
  return out;
},
 some$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    if (f.call$1(t1.next$0()) === true)
      return true;
  return false;
},
 get$isEmpty: function() {
  var t1 = this._nodeList;
  return $.getInterceptor(t1).get$isEmpty(t1);
},
 get$length: function() {
  var t1 = this._nodeList;
  return $.getInterceptor(t1).get$length(t1);
},
 operator$index$1: function(index) {
  return $.index(this._nodeList, index);
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$(""));
},
 set$length: function(newLength) {
  var t1 = this._nodeList;
  $.getInterceptor(t1).set$length(t1, newLength);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$(""));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$(""));
},
 iterator$0: function() {
  return $._FrozenElementListIterator$(this);
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$(""));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$(""));
},
 getRange$2: function(start, rangeLength) {
  var t1 = this._nodeList;
  return $._FrozenElementList$_wrap($.getInterceptor(t1).getRange$2(t1, start, rangeLength));
},
 indexOf$2: function(element, start) {
  var t1 = this._nodeList;
  return $.getInterceptor(t1).indexOf$2(t1, element, start);
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$(""));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$(""));
},
 get$first: function() {
  var t1 = this._nodeList;
  return $.getInterceptor(t1).get$first(t1);
},
 get$last: function() {
  var t1 = this._nodeList;
  return $.getInterceptor(t1).get$last(t1);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._FrozenElementListIterator = {"": ["_list", "_index"],
 "super": "Object",
 next$0: function() {
  var t1, t2;
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$("No more elements"));
  t1 = this._list;
  t2 = this._index;
  this._index = t2 + 1;
  return t1.operator$index$1(t2);
},
 get$hasNext: function() {
  var t1, t2;
  t1 = this._index;
  t2 = this._list;
  return $.lt(t1, $.getInterceptor(t2).get$length(t2));
}
};

$$._ElementAttributeMap = {"": ["_element>"],
 "super": "Object",
 containsValue$1: function(value) {
  var attributes, len, i;
  attributes = this._element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.containsValue$1$bailout0(1, value, attributes);
  len = attributes.length;
  i = 0;
  for (; i < len; ++i) {
    if (i >= attributes.length)
      throw $.ioore(i);
    if (value === attributes[i].get$value())
      return true;
  }
  return false;
},
 containsValue$1$bailout0: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      attributes = env1;
      value = env0;
      break;
    case 2:
      attributes = env2;
      len = env1;
      value = env0;
      break;
  }
  switch (state0) {
    case 0:
      attributes = this._element.get$$$dom_attributes();
    case 1:
      state0 = 0;
      len = $.getInterceptor(attributes).get$length(attributes);
    case 2:
      var attributes, value, len, i;
      state0 = 0;
      i = 0;
      for (; $.ltB(i, len); ++i)
        if (value === $.index(attributes, i).get$value())
          return true;
      return false;
  }
},
 containsKey$1: function(key) {
  return this._element.$$dom_hasAttribute$1(key);
},
 operator$index$1: function(key) {
  return this._element.$$dom_getAttribute$1(key);
},
 oprator$indexSet$2: function(key, value) {
  this._element.$$dom_setAttribute$2(key, $.S(value));
},
 remove$1: function(key) {
  var t1, value;
  t1 = this._element;
  value = t1.$$dom_getAttribute$1(key);
  t1.$$dom_removeAttribute$1(key);
  return value;
},
 clear$0: function() {
  var attributes, i;
  attributes = this._element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.clear$0$bailout(1, attributes);
  i = attributes.length - 1;
  for (; i >= 0; --i) {
    if (i >= attributes.length)
      throw $.ioore(i);
    this.remove$1(attributes[i].get$name());
  }
},
 clear$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      attributes = env0;
      break;
    case 2:
      attributes = env1;
      i = env0;
      break;
  }
  switch (state0) {
    case 0:
      attributes = this._element.get$$$dom_attributes();
    case 1:
      state0 = 0;
      i = $.sub($.getInterceptor(attributes).get$length(attributes), 1);
    case 2:
      var attributes, i;
      state0 = 0;
      for (; $.geB(i, 0); i = $.sub(i, 1))
        this.remove$1($.index(attributes, i).get$name());
  }
},
 forEach$1: function(f) {
  var attributes, len, i, item;
  attributes = this._element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.forEach$1$bailout(1, f, attributes);
  len = attributes.length;
  i = 0;
  for (; i < len; ++i) {
    if (i >= attributes.length)
      throw $.ioore(i);
    item = attributes[i];
    f.call$2(item.get$name(), item.get$value());
  }
},
 forEach$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      attributes = env1;
      f = env0;
      break;
    case 2:
      attributes = env2;
      len = env1;
      f = env0;
      break;
  }
  switch (state0) {
    case 0:
      attributes = this._element.get$$$dom_attributes();
    case 1:
      state0 = 0;
      len = $.getInterceptor(attributes).get$length(attributes);
    case 2:
      var attributes, f, len, i, item;
      state0 = 0;
      i = 0;
      for (; $.ltB(i, len); ++i) {
        item = $.index(attributes, i);
        f.call$2(item.get$name(), item.get$value());
      }
  }
},
 get$keys: function() {
  var attributes, t2, keys, len, i, t1;
  attributes = this._element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.get$keys$bailout(1, attributes);
  t2 = attributes.length;
  keys = $.List_List(t2);
  len = attributes.length;
  i = 0;
  for (; i < len; ++i) {
    t1 = attributes[i].get$name();
    if (i >= t2)
      throw $.ioore(i);
    keys[i] = t1;
  }
  return keys;
},
 get$keys$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      attributes = env0;
      break;
    case 2:
      keys = env2;
      len = env1;
      attributes = env0;
      break;
  }
  switch (state0) {
    case 0:
      attributes = this._element.get$$$dom_attributes();
    case 1:
      state0 = 0;
      keys = $.List_List($.getInterceptor(attributes).get$length(attributes));
      len = $.getInterceptor(attributes).get$length(attributes);
    case 2:
      var attributes, keys, len, i, t1;
      state0 = 0;
      i = 0;
      for (; $.ltB(i, len); ++i) {
        t1 = $.index(attributes, i).get$name();
        if (i >= keys.length)
          throw $.ioore(i);
        keys[i] = t1;
      }
      return keys;
  }
},
 get$values: function() {
  var attributes, t2, values, len, i, t1;
  attributes = this._element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.get$values$bailout(1, attributes);
  t2 = attributes.length;
  values = $.List_List(t2);
  len = attributes.length;
  i = 0;
  for (; i < len; ++i) {
    if (i >= attributes.length)
      throw $.ioore(i);
    t1 = attributes[i].get$value();
    if (i >= t2)
      throw $.ioore(i);
    values[i] = t1;
  }
  return values;
},
 get$values$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      attributes = env0;
      break;
    case 2:
      values = env2;
      len = env1;
      attributes = env0;
      break;
  }
  switch (state0) {
    case 0:
      attributes = this._element.get$$$dom_attributes();
    case 1:
      state0 = 0;
      values = $.List_List($.getInterceptor(attributes).get$length(attributes));
      len = $.getInterceptor(attributes).get$length(attributes);
    case 2:
      var attributes, values, len, i, t1;
      state0 = 0;
      i = 0;
      for (; $.ltB(i, len); ++i) {
        t1 = $.index(attributes, i).get$value();
        if (i >= values.length)
          throw $.ioore(i);
        values[i] = t1;
      }
      return values;
  }
},
 get$length: function() {
  var t1 = this._element.get$$$dom_attributes();
  return $.getInterceptor(t1).get$length(t1);
},
 get$isEmpty: function() {
  return $.eq(this.get$length(), 0);
},
 is$Map: function() { return true; }
};

$$._ElementCssClassSet = {"": ["_element>"],
 "super": "CssClassSet",
 readClasses$0: function() {
  var s, classname, t1, t2, trimmed;
  s = $.Set_Set();
  classname = this._element.get$$$dom_className();
  for (t1 = $.getInterceptor(classname).split$1(classname, " "), t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    trimmed = $.getInterceptor(t2).trim$0(t2);
    if ($.getInterceptor(trimmed).get$isEmpty(trimmed) !== true)
      $.getInterceptor(s).add$1(s, trimmed);
  }
  return s;
},
 writeClasses$1: function(s) {
  var t1 = $.Strings_join($.List_List$from(s), " ");
  this._element.set$$$dom_className(t1);
}
};

$$.ElementEvents = {"": ["_ptr"],
 "super": "Events",
 get$click: function() {
  return this.operator$index$1("click");
},
 get$copy: function() {
  return this.operator$index$1("copy");
},
 copy$1: function(arg0) { return this.get$copy().call$1(arg0); },
 get$mouseOut: function() {
  return this.operator$index$1("mouseout");
},
 get$mouseOver: function() {
  return this.operator$index$1("mouseover");
},
 get$reset: function() {
  return this.operator$index$1("reset");
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$.EventSourceEvents = {"": ["_ptr"],
 "super": "Events",
 get$open: function() {
  return this.operator$index$1("open");
},
 open$3: function(arg0, arg1, arg2) { return this.get$open().call$3(arg0, arg1, arg2); }
};

$$.Events = {"": ["_ptr"],
 "super": "Object",
 operator$index$1: function(type) {
  return $.EventListenerList$(this._ptr, type);
}
};

$$.EventListenerList = {"": ["_ptr", "_type"],
 "super": "Object",
 add$2: function(listener, useCapture) {
  this._ptr.$$dom_addEventListener$3(this._type, listener, useCapture);
  return this;
},
 add$1: function(listener) {
  return this.add$2(listener,false)
},
 remove$2: function(listener, useCapture) {
  this._ptr.$$dom_removeEventListener$3(this._type, listener, useCapture);
  return this;
},
 remove$1: function(listener) {
  return this.remove$2(listener,false)
},
 dispatch$1: function(evt) {
  return this._ptr.$$dom_dispatchEvent$1(evt);
}
};

$$.FileReaderEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.FileWriterEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.FrameSetElementEvents = {"": ["_ptr"],
 "super": "ElementEvents"
};

$$.HttpRequestEvents = {"": ["_ptr"],
 "super": "Events",
 get$readyStateChange: function() {
  return this.operator$index$1("readystatechange");
}
};

$$.HttpRequestUploadEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.IDBDatabaseEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.IDBOpenDBRequestEvents = {"": ["_ptr"],
 "super": "IDBRequestEvents"
};

$$.IDBRequestEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.IDBTransactionEvents = {"": ["_ptr"],
 "super": "Events",
 get$complete: function() {
  return this.operator$index$1("complete");
},
 complete$1: function(arg0) { return this.get$complete().call$1(arg0); }
};

$$.IDBVersionChangeRequestEvents = {"": ["_ptr"],
 "super": "IDBRequestEvents"
};

$$.InputElementEvents = {"": ["_ptr"],
 "super": "ElementEvents"
};

$$.LocalWindowEvents = {"": ["_ptr"],
 "super": "Events",
 get$click: function() {
  return this.operator$index$1("click");
},
 get$mouseOut: function() {
  return this.operator$index$1("mouseout");
},
 get$mouseOver: function() {
  return this.operator$index$1("mouseover");
},
 get$reset: function() {
  return this.operator$index$1("reset");
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$.MediaElementEvents = {"": ["_ptr"],
 "super": "ElementEvents"
};

$$.MediaStreamEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.MediaStreamTrackEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.MediaStreamTrackListEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.MessagePortEvents = {"": ["_ptr"],
 "super": "Events"
};

$$._ChildNodeListLazy = {"": ["_this"],
 "super": "Object",
 get$first: function() {
  return this._this.firstChild;
},
 get$last: function() {
  return this._this.lastChild;
},
 add$1: function(value) {
  this._this.$$dom_appendChild$1(value);
},
 addLast$1: function(value) {
  this._this.$$dom_appendChild$1(value);
},
 addAll$1: function(collection) {
  var t1, t2;
  for (t1 = $.getInterceptor(collection).iterator$0(collection), t2 = this._this; t1.get$hasNext() === true;)
    t2.$$dom_appendChild$1(t1.next$0());
},
 removeLast$0: function() {
  var result = this.get$last();
  if (!(result == null))
    this._this.$$dom_removeChild$1(result);
  return result;
},
 clear$0: function() {
  this._this.set$text("");
},
 oprator$indexSet$2: function(index, value) {
  this._this.$$dom_replaceChild$2(value, this.operator$index$1(index));
},
 iterator$0: function() {
  var t1 = this._this.get$$$dom_childNodes();
  return $.getInterceptor(t1).iterator$0(t1);
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 get$length: function() {
  var t1 = this._this.get$$$dom_childNodes();
  return $.getInterceptor(t1).get$length(t1);
},
 operator$index$1: function(index) {
  var t1 = this._this.get$$$dom_childNodes();
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.operator$index$1$bailout(1, index, t1);
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 operator$index$1$bailout: function(state0, index, t1) {
  return $.index(t1, index);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$.NotificationEvents = {"": ["_ptr"],
 "super": "Events",
 get$click: function() {
  return this.operator$index$1("click");
},
 get$close: function() {
  return this.operator$index$1("close");
},
 close$0: function() { return this.get$close().call$0(); },
 get$display: function() {
  return this.operator$index$1("display");
},
 display$0: function() { return this.get$display().call$0(); }
};

$$.PeerConnection00Events = {"": ["_ptr"],
 "super": "Events",
 get$open: function() {
  return this.operator$index$1("open");
},
 open$3: function(arg0, arg1, arg2) { return this.get$open().call$3(arg0, arg1, arg2); }
};

$$.RTCDataChannelEvents = {"": ["_ptr"],
 "super": "Events",
 get$close: function() {
  return this.operator$index$1("close");
},
 close$0: function() { return this.get$close().call$0(); },
 get$open: function() {
  return this.operator$index$1("open");
},
 open$3: function(arg0, arg1, arg2) { return this.get$open().call$3(arg0, arg1, arg2); }
};

$$.RTCPeerConnectionEvents = {"": ["_ptr"],
 "super": "Events",
 get$open: function() {
  return this.operator$index$1("open");
},
 open$3: function(arg0, arg1, arg2) { return this.get$open().call$3(arg0, arg1, arg2); }
};

$$.ScriptProcessorNodeEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.SharedWorkerContextEvents = {"": ["_ptr"],
 "super": "WorkerContextEvents"
};

$$.SpeechRecognitionEvents = {"": ["_ptr"],
 "super": "Events",
 get$start: function() {
  return this.operator$index$1("start");
},
 start$0: function() { return this.get$start().call$0(); }
};

$$.TextTrackEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.TextTrackCueEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.TextTrackListEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.WebSocketEvents = {"": ["_ptr"],
 "super": "Events",
 get$close: function() {
  return this.operator$index$1("close");
},
 close$0: function() { return this.get$close().call$0(); },
 get$open: function() {
  return this.operator$index$1("open");
},
 open$3: function(arg0, arg1, arg2) { return this.get$open().call$3(arg0, arg1, arg2); }
};

$$.WorkerEvents = {"": ["_ptr"],
 "super": "AbstractWorkerEvents"
};

$$.WorkerContextEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.CssClassSet = {
 "super": "Object",
 toString$0: function() {
  return $.Strings_join($.List_List$from(this.readClasses$0()), " ");
},
 iterator$0: function() {
  var t1 = this.readClasses$0();
  return $.getInterceptor(t1).iterator$0(t1);
},
 forEach$1: function(f) {
  var t1 = this.readClasses$0();
  $.getInterceptor(t1).forEach$1(t1, f);
},
 filter$1: function(f) {
  var t1 = this.readClasses$0();
  return $.getInterceptor(t1).filter$1(t1, f);
},
 some$1: function(f) {
  var t1 = this.readClasses$0();
  return $.getInterceptor(t1).some$1(t1, f);
},
 get$isEmpty: function() {
  var t1 = this.readClasses$0();
  return $.getInterceptor(t1).get$isEmpty(t1);
},
 get$length: function() {
  var t1 = this.readClasses$0();
  return $.getInterceptor(t1).get$length(t1);
},
 contains$1: function(value) {
  var t1 = this.readClasses$0();
  return $.getInterceptor(t1).contains$1(t1, value);
},
 add$1: function(value) {
  this._modify$1(new $.CssClassSet_add_anon(value));
},
 remove$1: function(value) {
  var s, result;
  s = this.readClasses$0();
  result = s.remove$1(value);
  this.writeClasses$1(s);
  return result;
},
 addAll$1: function(collection) {
  this._modify$1(new $.CssClassSet_addAll_anon(collection));
},
 clear$0: function() {
  this._modify$1(new $.CssClassSet_clear_anon());
},
 _modify$1: function(f) {
  var s = this.readClasses$0();
  f.call$1(s);
  this.writeClasses$1(s);
},
 is$Collection: function() { return true; }
};

$$.FilteredElementList = {"": ["_node", "_childNodes"],
 "super": "Object",
 get$_filtered: function() {
  var t1 = this._childNodes;
  return $.List_List$from($.getInterceptor(t1).filter$1(t1, new $.FilteredElementList__filtered_anon()));
},
 forEach$1: function(f) {
  var t1 = this.get$_filtered();
  $.getInterceptor(t1).forEach$1(t1, f);
},
 oprator$indexSet$2: function(index, value) {
  this.operator$index$1(index).replaceWith$1(value);
},
 set$length: function(newLength) {
  var len = $.getInterceptor(this).get$length(this);
  if ($.geB(newLength, len))
    return;
  else if ($.ltB(newLength, 0))
    throw $.$$throw($.ArgumentError$("Invalid list length"));
  $.getInterceptor(this).removeRange$2(this, $.sub(newLength, 1), $.sub(len, newLength));
},
 add$1: function(value) {
  var t1 = this._childNodes;
  $.getInterceptor(t1).add$1(t1, value);
},
 get$add: function() { return new $.BoundClosure2(this, 'add$1'); },
 addAll$1: function(collection) {
  $.getInterceptor(collection).forEach$1(collection, this.get$add());
},
 addLast$1: function(value) {
  var t1 = this._childNodes;
  $.getInterceptor(t1).add$1(t1, value);
},
 contains$1: function(element) {
  var t1, t2;
  if (typeof element === 'object' && element !== null && element.is$Element()) {
    t1 = this._childNodes;
    t2 = $.getInterceptor(t1).contains$1(t1, element) === true;
    t1 = t2;
  } else
    t1 = false;
  return t1;
},
 removeRange$2: function(start, rangeLength) {
  var t1 = this.get$_filtered();
  t1 = $.getInterceptor(t1).getRange$2(t1, start, rangeLength);
  $.getInterceptor(t1).forEach$1(t1, new $.FilteredElementList_removeRange_anon());
},
 clear$0: function() {
  var t1 = this._childNodes;
  $.getInterceptor(t1).clear$0(t1);
},
 removeLast$0: function() {
  var result = $.getInterceptor(this).get$last(this);
  if (!(result == null))
    result.remove$0();
  return result;
},
 filter$1: function(f) {
  var t1 = this.get$_filtered();
  return $.getInterceptor(t1).filter$1(t1, f);
},
 some$1: function(f) {
  var t1 = this.get$_filtered();
  return $.getInterceptor(t1).some$1(t1, f);
},
 get$isEmpty: function() {
  var t1 = this.get$_filtered();
  return $.getInterceptor(t1).get$isEmpty(t1);
},
 get$length: function() {
  var t1 = this.get$_filtered();
  return $.getInterceptor(t1).get$length(t1);
},
 operator$index$1: function(index) {
  return $.index(this.get$_filtered(), index);
},
 iterator$0: function() {
  var t1 = this.get$_filtered();
  return $.getInterceptor(t1).iterator$0(t1);
},
 getRange$2: function(start, rangeLength) {
  var t1 = this.get$_filtered();
  return $.getInterceptor(t1).getRange$2(t1, start, rangeLength);
},
 indexOf$2: function(element, start) {
  var t1 = this.get$_filtered();
  return $.getInterceptor(t1).indexOf$2(t1, element, start);
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  var t1 = this.get$_filtered();
  return $.getInterceptor(t1).get$first(t1);
},
 get$last: function() {
  var t1 = this.get$_filtered();
  return $.getInterceptor(t1).get$last(t1);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._DOMWindowCrossFrame = {"": ["_window"],
 "super": "Object",
 close$0: function() {
  return this._window.close();
},
 is$_DOMWindowCrossFrame: true
};

$$.FixedSizeListIterator = {"": ["_liblib2$_length>", "_array", "_pos"],
 "super": "_VariableSizeListIterator",
 get$hasNext: function() {
  return $.gt(this._liblib2$_length, this._pos);
}
};

$$._VariableSizeListIterator = {
 "super": "Object",
 get$hasNext: function() {
  var t1 = this._array;
  return $.gt($.getInterceptor(t1).get$length(t1), this._pos);
},
 next$0: function() {
  var t1, t3;
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$("No more elements"));
  t1 = this._array;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.next$0$bailout(1, t1);
  t3 = this._pos;
  this._pos = t3 + 1;
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  return t1[t3];
},
 next$0$bailout: function(state0, t1) {
  var t3 = this._pos;
  this._pos = t3 + 1;
  return $.index(t1, t3);
}
};

$$._Manager = {"": ["nextIsolateId=", "currentManagerId>", "nextManagerId", "currentContext=", "rootContext=", "topEventLoop>", "fromCommandLine>", "isWorker>", "supportsWorkers", "isolates>", "mainManager>", "managers>"],
 "super": "Object",
 get$useWorkers: function() {
  return this.supportsWorkers;
},
 get$needSerialization: function() {
  return this.get$useWorkers();
},
 _nativeDetectEnvironment$0: function() {
  this.isWorker = $isWorker;
  this.supportsWorkers = $supportsWorkers;
  this.fromCommandLine = typeof(window) == 'undefined';
},
 _nativeInitWorkerMessageHandler$0: function() {
  $globalThis.onmessage = function (e) {
  _IsolateNatives._processWorkerMessage(this.mainManager, e);
};
},
 maybeCloseWorker$0: function() {
  var t1 = this.isolates;
  if ($.getInterceptor(t1).get$isEmpty(t1) === true)
    this.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "close"])));
},
 _Manager$0: function() {
  this._nativeDetectEnvironment$0();
  this.topEventLoop = $._EventLoop$();
  this.isolates = $.Map_Map();
  this.managers = $.Map_Map();
  if (this.isWorker === true) {
    this.mainManager = $._MainManagerStub$();
    this._nativeInitWorkerMessageHandler$0();
  }
}
};

$$._IsolateContext = {"": ["id=", "ports>", "isolateStatics"],
 "super": "Object",
 initGlobals$0: function() {
  $initGlobals(this);
},
 eval$1: function(code) {
  var old, result, t1;
  old = $._globalState().get$currentContext();
  $._globalState().set$currentContext(this);
  this._setGlobals$0();
  result = null;
  try {
    result = code.call$0();
  } finally {
    t1 = old;
    $._globalState().set$currentContext(t1);
    if (!(old == null))
      old._setGlobals$0();
  }
  return result;
},
 _setGlobals$0: function() {
  $setGlobals(this);
},
 lookup$1: function(portId) {
  return $.index(this.ports, portId);
},
 register$2: function(portId, port) {
  if (this.ports.containsKey$1(portId) === true)
    throw $.$$throw($.Exception_Exception("Registry: ports must be registered only once."));
  $.indexSet(this.ports, portId, port);
  $.indexSet($._globalState().get$isolates(), this.id, this);
},
 unregister$1: function(portId) {
  var t1;
  this.ports.remove$1(portId);
  t1 = this.ports;
  if ($.getInterceptor(t1).get$isEmpty(t1) === true)
    $._globalState().get$isolates().remove$1(this.id);
},
 _IsolateContext$0: function() {
  var t1, t2;
  t1 = $._globalState();
  t2 = t1.get$nextIsolateId();
  t1.set$nextIsolateId($.add(t2, 1));
  this.id = t2;
  this.ports = $.Map_Map();
  this.initGlobals$0();
}
};

$$._EventLoop = {"": ["events"],
 "super": "Object",
 enqueue$3: function(isolate, fn, msg) {
  var t1 = this.events;
  $.getInterceptor(t1).addLast$1(t1, $._IsolateEvent$(isolate, fn, msg));
},
 dequeue$0: function() {
  var t1 = this.events;
  if ($.getInterceptor(t1).get$isEmpty(t1) === true)
    return;
  return t1.removeFirst$0();
},
 runIteration$0: function() {
  var event$, t1, t2;
  event$ = this.dequeue$0();
  if (event$ == null) {
    if ($._globalState().get$isWorker() === true)
      $._globalState().maybeCloseWorker$0();
    else {
      if (!($._globalState().get$rootContext() == null))
        if ($._globalState().get$isolates().containsKey$1($._globalState().get$rootContext().get$id()) === true)
          if ($._globalState().get$fromCommandLine() === true) {
            t1 = $._globalState().get$rootContext().get$ports();
            t2 = $.getInterceptor(t1).get$isEmpty(t1) === true;
            t1 = t2;
          } else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      if (t1)
        throw $.$$throw($.Exception_Exception("Program exited with open ReceivePorts."));
    }
    return false;
  }
  event$.process$0();
  return true;
},
 _runHelper$0: function() {
  if (!($._window() == null))
    new $._EventLoop__runHelper_next(this).call$0();
  else
    for (; this.runIteration$0() === true;)
      ;
},
 run$0: function(exception) {
  var t1, e, trace;
  if ($._globalState().get$isWorker() !== true)
    this._runHelper$0();
  else
    try {
      this._runHelper$0();
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $._globalState().get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)])));
    }

}
};

$$._IsolateEvent = {"": ["isolate", "fn", "message"],
 "super": "Object",
 process$0: function() {
  this.isolate.eval$1(this.fn);
}
};

$$._MainManagerStub = {
 "super": "Object",
 get$id: function() {
  return 0;
},
 set$id: function(i) {
  throw $.$$throw($.UnimplementedError$(null));
},
 postMessage$1: function(msg) {
  $globalThis.postMessage(msg);
}
};

$$._BaseSendPort = {"": ["_isolateId>"],
 "super": "Object",
 _checkReplyTo$1: function(replyTo) {
  if (!(replyTo == null) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_NativeJsSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_WorkerSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_BufferingSendPort))
    throw $.$$throw($.Exception_Exception("SendPort.send: Illegal replyTo port type"));
},
 call$1: function(message) {
  var completer, port;
  completer = $.Completer_Completer();
  port = $._ReceivePortImpl$();
  this.send$2(message, port.toSendPort$0());
  port.receive$1(new $._BaseSendPort_call_anon(completer, port));
  return completer.get$future();
},
 is$SendPort: true
};

$$._NativeJsSendPort = {"": ["_receivePort>", "_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, replyTo, message));
},
 operator$eq$1: function(other) {
  return typeof other === 'object' && other !== null && !!other.is$_NativeJsSendPort && $.eqB(this._receivePort, other._receivePort);
},
 get$hashCode: function() {
  return this._receivePort.get$_id();
},
 is$_NativeJsSendPort: true,
 is$SendPort: true
};

$$._WorkerSendPort = {"": ["_workerId>", "_receivePortId", "_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(replyTo, message, this));
},
 operator$eq$1: function(other) {
  var t1;
  if (typeof other === 'object' && other !== null && !!other.is$_WorkerSendPort)
    t1 = $.eqB(this._workerId, other._workerId) && $.eqB(this._isolateId, other._isolateId) && $.eqB(this._receivePortId, other._receivePortId);
  else
    t1 = false;
  return t1;
},
 get$hashCode: function() {
  return $.xor($.xor($.shl(this._workerId, 16), $.shl(this._isolateId, 8)), this._receivePortId);
},
 is$_WorkerSendPort: true,
 is$SendPort: true
};

$$._ReceivePortImpl = {"": ["_id>", "_callback>"],
 "super": "Object",
 _callback$2: function(arg0, arg1) { return this._callback.call$2(arg0, arg1); },
 receive$1: function(onMessage) {
  this._callback = onMessage;
},
 close$0: function() {
  this._callback = null;
  $._globalState().get$currentContext().unregister$1(this._id);
},
 toSendPort$0: function() {
  return $._NativeJsSendPort$(this, $._globalState().get$currentContext().get$id());
},
 _ReceivePortImpl$0: function() {
  $._globalState().get$currentContext().register$2(this._id, this);
}
};

$$._PendingSendPortFinder = {"": ["ports>", "_visited"],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
},
 visitList$1: function(list) {
  if (!($.index(this._visited, list) == null))
    return;
  $.indexSet(this._visited, list, true);
  $.getInterceptor(list).forEach$1(list, new $._PendingSendPortFinder_visitList_anon(this));
},
 visitMap$1: function(map) {
  var t1;
  if (!($.index(this._visited, map) == null))
    return;
  $.indexSet(this._visited, map, true);
  t1 = map.get$values();
  $.getInterceptor(t1).forEach$1(t1, new $._PendingSendPortFinder_visitMap_anon(this));
},
 visitSendPort$1: function(port) {
  var t1;
  if (!!port.is$_BufferingSendPort && port._port == null) {
    t1 = this.ports;
    $.getInterceptor(t1).add$1(t1, port.get$_futurePort());
  }
},
 _PendingSendPortFinder$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsSerializer = {"": ["_nextFreeRefId", "_visited"],
 "super": "_Serializer",
 visitSendPort$1: function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return ["sendport", x._workerId, x._isolateId, x._receivePortId];
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw("Illegal underlying port " + $.S(x));
},
 visitNativeJsSendPort$1: function(port) {
  return ["sendport", $._globalState().get$currentManagerId(), port._isolateId, port._receivePort.get$_id()];
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
},
 _JsSerializer$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsCopier = {"": ["_visited"],
 "super": "_Copier",
 visitSendPort$1: function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return this.visitWorkerSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw("Illegal underlying port " + $.S(this.get$p()));
},
 visitNativeJsSendPort$1: function(port) {
  return $._NativeJsSendPort$(port._receivePort, port._isolateId);
},
 visitWorkerSendPort$1: function(port) {
  return $._WorkerSendPort$(port._workerId, port._isolateId, port._receivePortId);
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
},
 _JsCopier$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsDeserializer = {"": ["_deserialized"],
 "super": "_Deserializer",
 deserializeSendPort$1: function(x) {
  var managerId, isolateId, receivePortId, isolate;
  managerId = $.index(x, 1);
  isolateId = $.index(x, 2);
  receivePortId = $.index(x, 3);
  if ($.eqB(managerId, $._globalState().get$currentManagerId())) {
    isolate = $.index($._globalState().get$isolates(), isolateId);
    if (isolate == null)
      return;
    return $._NativeJsSendPort$(isolate.lookup$1(receivePortId), isolateId);
  } else
    return $._WorkerSendPort$(managerId, isolateId, receivePortId);
}
};

$$._JsVisitedMap = {"": ["tagged"],
 "super": "Object",
 operator$index$1: function(object) {
  return object['__MessageTraverser__attached_info__'];
},
 oprator$indexSet$2: function(object, info) {
  var t1 = this.tagged;
  $.getInterceptor(t1).add$1(t1, object);
  object['__MessageTraverser__attached_info__'] = info;
},
 reset$0: function() {
  this.tagged = $.List_List(null);
},
 cleanup$0: function() {
  var t1, length$, i;
  t1 = this.tagged;
  length$ = $.getInterceptor(t1).get$length(t1);
  if (typeof length$ !== 'number')
    return this.cleanup$0$bailout(1, length$);
  i = 0;
  for (; i < length$; ++i)
    $.index(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
  this.tagged = null;
},
 cleanup$0$bailout: function(state0, length$) {
  var i = 0;
  for (; $.ltB(i, length$); ++i)
    $.index(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
  this.tagged = null;
}
};

$$._MessageTraverserVisitedMap = {
 "super": "Object",
 operator$index$1: function(object) {
  return;
},
 oprator$indexSet$2: function(object, info) {
},
 reset$0: function() {
},
 cleanup$0: function() {
}
};

$$._MessageTraverser = {
 "super": "Object",
 traverse$1: function(x) {
  var t1, result;
  t1 = x;
  if (t1 == null || typeof t1 === 'string' || typeof t1 === 'number' || typeof t1 === 'boolean')
    return this.visitPrimitive$1(x);
  this._visited.reset$0();
  result = null;
  try {
    result = this._dispatch$1(x);
  } finally {
    this._visited.cleanup$0();
  }
  return result;
},
 _dispatch$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return this.visitPrimitive$1(x);
  if (typeof x === 'object' && x !== null && (x.constructor === Array || x.is$List()))
    return this.visitList$1(x);
  if (typeof x === 'object' && x !== null && x.is$Map())
    return this.visitMap$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPort)
    return this.visitSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPortSync)
    return this.visitSendPortSync$1(x);
  return this.visitObject$1(x);
},
 visitObject$1: function(x) {
  throw $.$$throw("Message serialization: Illegal value " + $.S(x) + " passed");
}
};

$$._Copier = {
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var copy, len, i;
  if (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior())
    return this.visitList$1$bailout(1, list);
  copy = $.index(this._visited, list);
  if (!(copy == null))
    return copy;
  len = list.length;
  copy = $.List_List(len);
  $.indexSet(this._visited, list, copy);
  for (i = 0; i < len; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    copy[i] = this._dispatch$1(list[i]);
  }
  return copy;
},
 visitList$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      list = env0;
      break;
    case 2:
      len = env1;
      list = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      copy = $.index(this._visited, list);
      if (!(copy == null))
        return copy;
      len = $.getInterceptor(list).get$length(list);
    case 2:
      var list, copy, len, i, t1;
      state0 = 0;
      copy = $.List_List(len);
      $.indexSet(this._visited, list, copy);
      for (i = 0; $.ltB(i, len); ++i) {
        t1 = this._dispatch$1($.index(list, i));
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
  }
},
 visitMap$1: function(map) {
  var t1, t2;
  t1 = {};
  t1.copy_10 = $.index(this._visited, map);
  t2 = t1.copy_10;
  if (!(t2 == null))
    return t2;
  t1.copy_10 = $.Map_Map();
  $.indexSet(this._visited, map, t1.copy_10);
  $.getInterceptor(map).forEach$1(map, new $._Copier_visitMap_anon(this, t1));
  return t1.copy_10;
}
};

$$._Serializer = {
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var copyId, id;
  copyId = $.index(this._visited, list);
  if (!(copyId == null))
    return ["ref", copyId];
  id = this._nextFreeRefId;
  this._nextFreeRefId = id + 1;
  $.indexSet(this._visited, list, id);
  return ["list", id, this._serializeList$1(list)];
},
 visitMap$1: function(map) {
  var copyId, id;
  copyId = $.index(this._visited, map);
  if (!(copyId == null))
    return ["ref", copyId];
  id = this._nextFreeRefId;
  this._nextFreeRefId = id + 1;
  $.indexSet(this._visited, map, id);
  return ["map", id, this._serializeList$1(map.get$keys()), this._serializeList$1(map.get$values())];
},
 _serializeList$1: function(list) {
  var len, result, i;
  if (typeof list !== 'string' && (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior()))
    return this._serializeList$1$bailout(1, list);
  len = list.length;
  result = $.List_List(len);
  for (i = 0; i < len; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    result[i] = this._dispatch$1(list[i]);
  }
  return result;
},
 _serializeList$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      list = env0;
      break;
    case 2:
      len = env1;
      list = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      len = $.getInterceptor(list).get$length(list);
    case 2:
      var list, len, result, i, t1;
      state0 = 0;
      result = $.List_List(len);
      for (i = 0; $.ltB(i, len); ++i) {
        t1 = this._dispatch$1($.index(list, i));
        if (i >= result.length)
          throw $.ioore(i);
        result[i] = t1;
      }
      return result;
  }
}
};

$$._Deserializer = {
 "super": "Object",
 deserialize$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return x;
  this._deserialized = $.HashMap_HashMap();
  return this._deserializeHelper$1(x);
},
 _deserializeHelper$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return x;
  switch ($.index(x, 0)) {
    case "ref":
      return this._deserializeRef$1(x);
    case "list":
      return this._deserializeList$1(x);
    case "map":
      return this._deserializeMap$1(x);
    case "sendport":
      return this.deserializeSendPort$1(x);
    default:
      return this.deserializeObject$1(x);
  }
},
 _deserializeRef$1: function(x) {
  var id = $.index(x, 1);
  return $.index(this._deserialized, id);
},
 _deserializeList$1: function(x) {
  var id, dartList, len, i, t1;
  id = $.index(x, 1);
  dartList = $.index(x, 2);
  if (typeof dartList !== 'object' || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.is$JavaScriptIndexingBehavior())
    return this._deserializeList$1$bailout(1, dartList, id);
  $.indexSet(this._deserialized, id, dartList);
  len = dartList.length;
  for (i = 0; i < len; ++i) {
    if (i >= dartList.length)
      throw $.ioore(i);
    t1 = this._deserializeHelper$1(dartList[i]);
    if (i >= dartList.length)
      throw $.ioore(i);
    dartList[i] = t1;
  }
  return dartList;
},
 _deserializeList$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      id = env1;
      dartList = env0;
      break;
    case 2:
      len = env1;
      dartList = env0;
      break;
  }
  switch (state0) {
    case 0:
      id = $.index(x, 1);
      dartList = $.index(x, 2);
    case 1:
      state0 = 0;
      $.indexSet(this._deserialized, id, dartList);
      len = $.getInterceptor(dartList).get$length(dartList);
    case 2:
      var id, dartList, len, i;
      state0 = 0;
      for (i = 0; $.ltB(i, len); ++i)
        $.indexSet(dartList, i, this._deserializeHelper$1($.index(dartList, i)));
      return dartList;
  }
},
 _deserializeMap$1: function(x) {
  var result, id, keys, values, len, i, key;
  result = $.Map_Map();
  id = $.index(x, 1);
  $.indexSet(this._deserialized, id, result);
  keys = $.index(x, 2);
  if (typeof keys !== 'string' && (typeof keys !== 'object' || keys === null || keys.constructor !== Array && !keys.is$JavaScriptIndexingBehavior()))
    return this._deserializeMap$1$bailout(1, x, result, keys);
  values = $.index(x, 3);
  if (typeof values !== 'string' && (typeof values !== 'object' || values === null || values.constructor !== Array && !values.is$JavaScriptIndexingBehavior()))
    return this._deserializeMap$1$bailout(2, values, result, keys);
  len = keys.length;
  for (i = 0; i < len; ++i) {
    if (i >= keys.length)
      throw $.ioore(i);
    key = this._deserializeHelper$1(keys[i]);
    if (i >= values.length)
      throw $.ioore(i);
    $.indexSet(result, key, this._deserializeHelper$1(values[i]));
  }
  return result;
},
 _deserializeMap$1$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      keys = env2;
      result = env1;
      x = env0;
      break;
    case 2:
      keys = env2;
      result = env1;
      values = env0;
      break;
    case 3:
      keys = env3;
      result = env2;
      len = env1;
      values = env0;
      break;
  }
  switch (state0) {
    case 0:
      result = $.Map_Map();
      id = $.index(x, 1);
      $.indexSet(this._deserialized, id, result);
      keys = $.index(x, 2);
    case 1:
      state0 = 0;
      values = $.index(x, 3);
    case 2:
      state0 = 0;
      len = $.getInterceptor(keys).get$length(keys);
    case 3:
      var result, id, keys, x, values, len, i;
      state0 = 0;
      for (i = 0; $.ltB(i, len); ++i)
        $.indexSet(result, this._deserializeHelper$1($.index(keys, i)), this._deserializeHelper$1($.index(values, i)));
      return result;
  }
},
 deserializeObject$1: function(x) {
  throw $.$$throw("Unexpected serialized object");
}
};

$$._Timer = {"": ["_once", "_handle"],
 "super": "Object",
 _Timer$repeating$2: function(milliSeconds, callback) {
  this._handle = $._window().setInterval$2(new $.anon0(this, callback), milliSeconds);
},
 _Timer$2: function(milliSeconds, callback) {
  this._handle = $._window().setTimeout$2(new $.anon(this, callback), milliSeconds);
}
};

$$.ElementInstanceEvents = {"": ["_ptr"],
 "super": "Events",
 get$click: function() {
  return this.operator$index$1("click");
},
 get$copy: function() {
  return this.operator$index$1("copy");
},
 copy$1: function(arg0) { return this.get$copy().call$1(arg0); },
 get$mouseOut: function() {
  return this.operator$index$1("mouseout");
},
 get$mouseOver: function() {
  return this.operator$index$1("mouseover");
},
 get$reset: function() {
  return this.operator$index$1("reset");
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$._AttributeClassSet = {"": ["_liblib1$_element>"],
 "super": "CssClassSet",
 readClasses$0: function() {
  var classname, s, t1, t2, trimmed;
  classname = $.index(this._liblib1$_element.get$attributes(), "class");
  s = $.Set_Set();
  if (classname == null)
    return s;
  for (t1 = $.getInterceptor(classname).split$1(classname, " "), t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    trimmed = $.getInterceptor(t2).trim$0(t2);
    if ($.getInterceptor(trimmed).get$isEmpty(trimmed) !== true)
      $.getInterceptor(s).add$1(s, trimmed);
  }
  return s;
},
 writeClasses$1: function(s) {
  var list = $.List_List$from(s);
  $.indexSet(this._liblib1$_element.get$attributes(), "class", $.Strings_join(list, " "));
}
};

$$.Test = {"": ["sections>", "currentSection>"],
 "super": "Object",
 nextSection$0: function() {
  var t1, num, t2;
  t1 = this.currentSection;
  if (t1 == null)
    num = 0;
  else {
    t2 = this.sections;
    num = $.add($.getInterceptor(t2).indexOf$2(t2, t1, 0), 1);
  }
  t1 = this.sections;
  if ($.gtB(t1.length, num)) {
    $.print("Next Section.");
    if (num !== (num | 0))
      throw $.iae(num);
    if (num < 0 || num >= t1.length)
      throw $.ioore(num);
    this.currentSection = t1[num];
    if (num !== 0)
      this.currentSection.nextQuestion$0();
  } else
    $.print("No more TestSections. Do something else here.");
  return this.currentSection;
},
 display$0: function() {
  var output = this.currentSection.display$0();
  return output == null ? $.Element_Element$html("<p>No output from TestSection.</p>") : output;
},
 next$0: function() {
  if (this.currentSection == null)
    this.nextSection$0();
  if (this.currentSection.next$0() == null)
    if (this.nextSection$0() == null)
      return $.Element_Element$html("<p>Its finished! Do something here.</p>");
  return this.display$0();
}
};

$$.Question = {"": ["text>", "explanation>"],
 "super": "Object",
 explain$0: function() {
  var output, t1;
  output = $.DivElement_DivElement();
  output.addHtml$1("<br/><h4>" + $.S(this.text) + "</h4>");
  t1 = output.get$classes();
  $.getInterceptor(t1).add$1(t1, "explanation");
  t1 = this.explanation;
  if (!(t1 == null))
    output.addHtml$1("Explanation: " + $.S(t1) + "<br/>");
  return output;
},
 enableNextButton$0: function() {
  $.query("#nextButton").set$disabled(false);
}
};

$$.Answer = {"": ["points>", "text>", "explanation>", "_showEvent", "_hideEvent", "_skipEvent"],
 "super": "Object",
 displayForExplanation$2: function(selectedByUser, maxPoints) {
  var answerString, t1, pointsColorNum, pointsColorHex;
  answerString = this.text;
  t1 = 255 * $.min(this.points, maxPoints);
  if (typeof maxPoints !== 'number')
    throw $.iae(maxPoints);
  t1 = $.tdiv(t1, maxPoints);
  pointsColorNum = $.getInterceptor(t1).toInt$0(t1);
  pointsColorHex = $.getInterceptor(pointsColorNum).toRadixString$1(pointsColorNum, 16);
  if (!$.eqB(pointsColorNum, 0))
    answerString = "<font color=\"rgb(0,0," + $.S(pointsColorHex) + ")\">" + $.S(answerString) + "</font>";
  return selectedByUser === true ? "=> " + $.S(answerString) + " <=" : answerString;
},
 explain$3: function(selectedByUser, maxPoints, displayExplanationMode) {
  var output, answerText, t1, explainButton, modal;
  output = $.LIElement_LIElement();
  answerText = this.displayForExplanation$2(selectedByUser, maxPoints);
  output.set$innerHTML($.S(answerText) + " &nbsp");
  t1 = this.explanation;
  if (typeof t1 !== 'string')
    return this.explain$3$bailout(1, t1, displayExplanationMode, output, answerText);
  if (!(t1 === "") && displayExplanationMode === 1) {
    t1 = output.get$on().get$mouseOver();
    $.getInterceptor(t1).add$1(t1, new $.Answer_explain_anon(output, this));
    t1 = output.get$on().get$mouseOut();
    $.getInterceptor(t1).add$1(t1, new $.Answer_explain_anon0(output, answerText));
  }
  t1 = this.explanation;
  if (typeof t1 !== 'string')
    return this.explain$3$bailout(2, t1, displayExplanationMode, output, answerText);
  if (!(t1 === "") && displayExplanationMode === 2) {
    t1 = output.get$on().get$mouseOver();
    $.getInterceptor(t1).add$1(t1, new $.Answer_explain_anon1(output, this));
    t1 = output.get$on().get$mouseOut();
    $.getInterceptor(t1).add$1(t1, new $.Answer_explain_anon2(output, answerText));
  }
  t1 = this.explanation;
  if (typeof t1 !== 'string')
    return this.explain$3$bailout(3, displayExplanationMode, output, t1);
  if (!(t1 === "") && displayExplanationMode === 3) {
    explainButton = $.InputElement_InputElement(null);
    explainButton.set$type("image");
    explainButton.set$src("images/question_8bit.png");
    output.insertAdjacentElement$2("beforeEnd", explainButton);
    modal = $.DivElement_DivElement();
    modal.set$innerHTML("<p>" + $.S(this.explanation) + "</p>");
    t1 = modal.get$classes();
    $.getInterceptor(t1).add$1(t1, "modal");
    output.insertAdjacentElement$2("beforeEnd", modal);
    this.hideModal$2(explainButton, modal);
  }
  return output;
},
 explain$3$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      answerText = env3;
      output = env2;
      displayExplanationMode = env1;
      t1 = env0;
      break;
    case 2:
      answerText = env3;
      output = env2;
      displayExplanationMode = env1;
      t1 = env0;
      break;
    case 3:
      t1 = env2;
      output = env1;
      displayExplanationMode = env0;
      break;
  }
  switch (state0) {
    case 0:
      output = $.LIElement_LIElement();
      answerText = this.displayForExplanation$2(selectedByUser, maxPoints);
      output.set$innerHTML($.S(answerText) + " &nbsp");
      t1 = this.explanation;
    case 1:
      state0 = 0;
      if (!(t1 == null) && !$.eqB(t1, "") && displayExplanationMode === 1) {
        t1 = output.get$on().get$mouseOver();
        $.getInterceptor(t1).add$1(t1, new $.Answer_explain_anon(output, this));
        t1 = output.get$on().get$mouseOut();
        $.getInterceptor(t1).add$1(t1, new $.Answer_explain_anon0(output, answerText));
      }
      t1 = this.explanation;
    case 2:
      state0 = 0;
      if (!(t1 == null) && !$.eqB(t1, "") && displayExplanationMode === 2) {
        t1 = output.get$on().get$mouseOver();
        $.getInterceptor(t1).add$1(t1, new $.Answer_explain_anon1(output, this));
        t1 = output.get$on().get$mouseOut();
        $.getInterceptor(t1).add$1(t1, new $.Answer_explain_anon2(output, answerText));
      }
      t1 = this.explanation;
    case 3:
      var output, answerText, t1, displayExplanationMode, explainButton, modal;
      state0 = 0;
      if (!(t1 == null) && !$.eqB(t1, "") && displayExplanationMode === 3) {
        explainButton = $.InputElement_InputElement(null);
        explainButton.set$type("image");
        explainButton.set$src("images/question_8bit.png");
        output.insertAdjacentElement$2("beforeEnd", explainButton);
        modal = $.DivElement_DivElement();
        modal.set$innerHTML("<p>" + $.S(this.explanation) + "</p>");
        t1 = modal.get$classes();
        $.getInterceptor(t1).add$1(t1, "modal");
        output.insertAdjacentElement$2("beforeEnd", modal);
        this.hideModal$2(explainButton, modal);
      }
      return output;
  }
},
 toggleListener$3: function(step, button, modal) {
  var t1;
  $.print("toggleListener: step: " + $.S(step));
  if (this._showEvent == null)
    this._showEvent = new $.Answer_toggleListener_anon(button, this, modal);
  if (this._hideEvent == null)
    this._hideEvent = new $.Answer_toggleListener_anon0(button, this, modal);
  if (this._skipEvent == null)
    this._skipEvent = new $.Answer_toggleListener_anon1(button, this, modal);
  if (step === 1) {
    t1 = button.get$on().get$click();
    $.getInterceptor(t1).add$1(t1, this._showEvent);
    $.document().get$on().get$click().remove$1(this._hideEvent);
  } else if (step === 2) {
    button.get$on().get$click().remove$1(this._showEvent);
    t1 = $.document().get$on().get$click();
    $.getInterceptor(t1).add$1(t1, this._skipEvent);
  } else {
    $.document().get$on().get$click().remove$1(this._skipEvent);
    t1 = $.document().get$on().get$click();
    $.getInterceptor(t1).add$1(t1, this._hideEvent);
  }
},
 showModal$2: function(button, modal) {
  var t1 = modal.get$style();
  t1.set$boxShadow("1.0em 1.0em 1.0em rgba(0,0,0,0.2)");
  t1.set$transform("translateX(-1em) translateY(-1em)");
  t1.set$opacity("1");
  t1.set$visibility("visible");
  this.toggleListener$3(2, button, modal);
},
 hideModal$2: function(button, modal) {
  var t1 = modal.get$style();
  t1.set$boxShadow("-0.2em -0.2em -0.2em rgba(0,0,0,0.3)");
  t1.set$transform("translateX(0em) translateY(0em)");
  t1.set$opacity("0");
  t1.set$visibility("hidden");
  this.toggleListener$3(1, button, modal);
}
};

$$.MultipleChoice = {
 "super": "Question",
 displayAnswers$0: function() {
  var output, t1, number, t2, button;
  output = $.DivElement_DivElement();
  output.set$id("answers");
  for (t1 = this.answers, t1 = $.getInterceptor(t1).iterator$0(t1), number = 0; t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    button = this._makeButton$2(t2, number);
    ++number;
    output.insertAdjacentElement$2("beforeEnd", button);
    output.addText$1(t2.get$text());
    output.addHtml$1("<br/>");
  }
  return output;
},
 display$0: function() {
  var output = $.DivElement_DivElement();
  output.set$id("question");
  output.insertAdjacentElement$2("beforeEnd", $.Element_Element$html("<p>" + $.S(this.text) + "</p>"));
  output.insertAdjacentElement$2("beforeEnd", this.displayAnswers$0());
  return output;
},
 MultipleChoice$1: function(text) {
  this.text = text;
}
};

$$.MultipleSelect = {"": ["selectedAnswers", "answers", "text", "explanation"],
 "super": "MultipleChoice",
 toggleAnswer$1: function(answerIndex) {
  var t1, answer, selectedIndex;
  t1 = this.answers;
  if (answerIndex !== (answerIndex | 0))
    throw $.iae(answerIndex);
  if (answerIndex < 0 || answerIndex >= t1.length)
    throw $.ioore(answerIndex);
  answer = t1[answerIndex];
  t1 = this.selectedAnswers;
  selectedIndex = $.getInterceptor(t1).indexOf$2(t1, answer, 0);
  if ($.eqB(selectedIndex, -1))
    $.getInterceptor(t1).add$1(t1, answer);
  else
    $.getInterceptor(t1).removeAt$1(t1, selectedIndex);
  $.query("#nextButton").get$style().set$visibility("visible");
  this.enableNextButton$0();
},
 _makeButton$2: function(answer, number) {
  var element, t1;
  element = $.Element_Element$html("<input type=\"checkbox\" name=\"" + $.S($.getInterceptor(number).toString$0(number)) + "\">");
  t1 = element.get$on().get$click();
  $.getInterceptor(t1).add$1(t1, new $.MultipleSelect__makeButton_anon(number, this));
  return element;
},
 getMaximumPoints$0: function() {
  var t1, total, t2, t3;
  for (t1 = this.answers, t1 = $.getInterceptor(t1).iterator$0(t1), total = 0; t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    t3 = t2.get$points();
    if (typeof t3 !== 'number')
      return this.getMaximumPoints$0$bailout(1, total, t2, t3, t1);
    if (t3 > 0) {
      if (t3 !== (t3 | 0))
        return this.getMaximumPoints$0$bailout(2, total, t3, t1);
      total += t3;
    }
  }
  return total;
},
 getMaximumPoints$0$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      t1 = env3;
      t3 = env2;
      t2 = env1;
      total = env0;
      break;
    case 2:
      t1 = env2;
      t2 = env1;
      total = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.answers;
      t1 = $.getInterceptor(t1).iterator$0(t1);
      total = 0;
    default:
      var t1, total, t2, t3;
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!(t1.get$hasNext() === true))
                break L0;
              t2 = t1.next$0();
              t3 = t2.get$points();
            case 1:
              state0 = 0;
            case 2:
              if (state0 === 2 || state0 === 0 && $.gtB(t3, 0))
                switch (state0) {
                  case 0:
                    t2 = t2.get$points();
                    if (typeof t2 !== 'number')
                      throw $.iae(t2);
                  case 2:
                    state0 = 0;
                    total += t2;
                }
          }
      return total;
  }
},
 getUserAnswerPoints$0: function() {
  var t1, total, t2;
  for (t1 = this.selectedAnswers, t1 = $.getInterceptor(t1).iterator$0(t1), total = 0; t1.get$hasNext() === true;) {
    t2 = t1.next$0().get$points();
    if (typeof t2 !== 'number')
      throw $.iae(t2);
    if (t2 !== (t2 | 0))
      return this.getUserAnswerPoints$0$bailout0(1, total, t2, t1);
    total += t2;
  }
  return total;
},
 getUserAnswerPoints$0$bailout0: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      t1 = env2;
      t2 = env1;
      total = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.selectedAnswers;
      t1 = $.getInterceptor(t1).iterator$0(t1);
      total = 0;
    case 1:
      var t1, total, t2;
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!(t1.get$hasNext() === true))
                break L0;
              t2 = t1.next$0().get$points();
              if (typeof t2 !== 'number')
                throw $.iae(t2);
            case 1:
              state0 = 0;
              total += t2;
          }
      return total;
  }
},
 explain$0: function() {
  var output, explainAnswers, t1, t2, t3;
  $.print("Explaining MultipleSelect");
  output = $.Question.prototype.explain$0.call(this);
  explainAnswers = $.UListElement_UListElement();
  for (t1 = this.answers, t1 = $.getInterceptor(t1).iterator$0(t1), t2 = this.selectedAnswers; t1.get$hasNext() === true;) {
    t3 = t1.next$0();
    explainAnswers.insertAdjacentElement$2("beforeEnd", t3.explain$3(!$.eqB($.getInterceptor(t2).indexOf$1(t2, t3), -1), 1, 3));
  }
  output.insertAdjacentElement$2("beforeEnd", explainAnswers);
  return output;
}
};

$$.SingleSelect = {"": ["selected", "answers", "text", "explanation"],
 "super": "MultipleChoice",
 getMaximumPoints$0: function() {
  var t1, highest, t2, t3;
  for (t1 = this.answers, t1 = $.getInterceptor(t1).iterator$0(t1), highest = 0; t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    t3 = t2.get$points();
    if (typeof t3 !== 'number')
      return this.getMaximumPoints$0$bailout0(1, highest, t2, t3, t1);
    if (t3 > highest) {
      if (t3 !== (t3 | 0))
        return this.getMaximumPoints$0$bailout0(2, t3, t1);
      highest = t3;
    }
  }
  return highest;
},
 getMaximumPoints$0$bailout0: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      t1 = env3;
      t3 = env2;
      t2 = env1;
      highest = env0;
      break;
    case 2:
      t1 = env1;
      highest = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.answers;
      t1 = $.getInterceptor(t1).iterator$0(t1);
      highest = 0;
    default:
      var t1, highest, t2, t3;
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!(t1.get$hasNext() === true))
                break L0;
              t2 = t1.next$0();
              t3 = t2.get$points();
            case 1:
              state0 = 0;
            case 2:
              if (state0 === 2 || state0 === 0 && $.gtB(t3, highest))
                switch (state0) {
                  case 0:
                    highest = t2.get$points();
                  case 2:
                    state0 = 0;
                }
          }
      return highest;
  }
},
 getUserAnswerPoints$0: function() {
  var t1 = this.selected;
  if (t1 == null)
    return 0;
  return t1.get$points();
},
 setAnswer$1: function(number) {
  var t1, nxtQuBtn, mouseEvent;
  $.print("setting answer to " + $.S(number));
  t1 = this.answers;
  if (number !== (number | 0))
    throw $.iae(number);
  if (number < 0 || number >= t1.length)
    throw $.ioore(number);
  this.selected = t1[number];
  $.print("answer: " + $.S(this.selected.get$text()));
  nxtQuBtn = $.query("#nextButton");
  this.enableNextButton$0();
  mouseEvent = $.MouseEvent_MouseEvent("click", $.window(), 0, 0, 0, 5, 5, 0, true, true, false, false, false, false, null);
  nxtQuBtn.get$on().get$click().dispatch$1(mouseEvent);
},
 _makeButton$2: function(answer, number) {
  var element, t1;
  element = $.Element_Element$html("<input type=\"radio\" name=\"group1\">");
  t1 = element.get$on().get$click();
  $.getInterceptor(t1).add$1(t1, new $.SingleSelect__makeButton_anon(this, number));
  return element;
},
 explain$0: function() {
  var output, explainAnswers, t1, t2;
  $.print("Explaining SingleSelect");
  output = $.Question.prototype.explain$0.call(this);
  explainAnswers = $.UListElement_UListElement();
  for (t1 = this.answers, t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    explainAnswers.insertAdjacentElement$2("beforeEnd", t2.explain$3($.eq(t2, this.selected), this.getMaximumPoints$0(), 3));
  }
  output.insertAdjacentElement$2("beforeEnd", explainAnswers);
  return output;
}
};

$$.TestSection = {"": ["questions", "allQnA", "star>", "name>", "description", "reference", "currentQuestion", "atSummary>", "atExplanation", "finished", "explainCorrectQuestions"],
 "super": "Object",
 getQnA$0: function() {
  var t1, t2, sections, sectionName, t3, sectionDescription, t4, referenceURL, questionList, text, explanation, answerList, answers, t5, points, answerTxt, explainTxt, answer, ss_question, ms_question;
  t1 = this.allQnA;
  t2 = this.star;
  sections = t1.query$1($.makeLiteralMap(["level", $.getInterceptor(t2).toString$0(t2)]));
  for (t1 = $.getInterceptor(sections).iterator$0(sections); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    sectionName = t2.query$1("name");
    t3 = $.getInterceptor(sectionName).get$last(sectionName);
    this.name = $.getInterceptor(t3).toString$0(t3);
    sectionDescription = t2.query$1("description");
    t4 = $.getInterceptor(sectionDescription).get$last(sectionDescription);
    this.description = $.getInterceptor(t4).toString$0(t4);
    referenceURL = t2.query$1("reference");
    this.reference = $.getInterceptor(referenceURL).get$last(referenceURL).get$text();
    questionList = t2.queryAll$1("question");
    for (t2 = $.getInterceptor(questionList).iterator$0(questionList); t2.get$hasNext() === true;) {
      t3 = t2.next$0();
      text = t3.query$1("text");
      explanation = t3.query$1("explanation");
      answerList = t3.queryAll$1("answer");
      answers = $.List_List(null);
      for (t4 = $.getInterceptor(answerList).iterator$0(answerList); t4.get$hasNext() === true;) {
        t5 = t4.next$0();
        points = t5.query$1("points");
        answerTxt = t5.query$1("text");
        explainTxt = t5.query$1("explanation");
        answer = $.Answer$($.parseInt($.index(points, 0).get$text()), $.index(answerTxt, 0).get$text(), $.index(explainTxt, 0).get$text());
        $.getInterceptor(answers).add$1(answers, answer);
      }
      if (t3.get$attributes().containsValue$1("SingleSelect") === true || t3.get$attributes().containsValue$1("MultipleChoice") === true) {
        ss_question = $.SingleSelect$($.index(text, 0).get$text());
        ss_question.explanation = $.index(explanation, 0).get$text();
        t3 = ss_question.answers;
        $.getInterceptor(t3).addAll$1(t3, answers);
        t3 = this.questions;
        $.getInterceptor(t3).add$1(t3, ss_question);
      } else if (t3.get$attributes().containsValue$1("MultipleSelect") === true) {
        ms_question = $.MultipleSelect$($.index(text, 0).get$text());
        ms_question.explanation = $.index(explanation, 0).get$text();
        t3 = ms_question.answers;
        $.getInterceptor(t3).addAll$1(t3, answers);
        t3 = this.questions;
        $.getInterceptor(t3).add$1(t3, ms_question);
      }
    }
  }
},
 nextQuestion$0: function() {
  var t1, t2, num;
  t1 = this.currentQuestion;
  if (t1 == null) {
    t1 = this.questions;
    if ($.gtB($.getInterceptor(t1).get$length(t1), 0)) {
      this.currentQuestion = $.index(this.questions, 0);
      return this.currentQuestion;
    } else {
      $.print("Why is the question list empty?");
      return;
    }
  } else {
    t2 = this.questions;
    num = $.add($.getInterceptor(t2).indexOf$2(t2, t1, 0), 1);
  }
  t1 = this.questions;
  if ($.gtB($.getInterceptor(t1).get$length(t1), num))
    this.currentQuestion = $.index(this.questions, num);
  else {
    $.print("No next Question.");
    return;
  }
  return this.currentQuestion;
},
 displayCurrentQuestion$0: function() {
  var output, sectionHeader, t1, questionNumber, t2, sectionLength;
  output = $.DivElement_DivElement();
  sectionHeader = "Destination " + $.S(this.star) + ": " + $.S(this.name);
  t1 = this.questions;
  questionNumber = $.add($.getInterceptor(t1).indexOf$2(t1, this.currentQuestion, 0), 1);
  t2 = this.questions;
  sectionLength = $.getInterceptor(t2).get$length(t2);
  output.addHtml$1("<h4>" + (sectionHeader + "<br/> Question " + $.S(questionNumber) + " of " + $.S(sectionLength)) + "</h4>");
  output.insertAdjacentElement$2("beforeEnd", this.currentQuestion.display$0());
  return output;
},
 display$0: function() {
  if (this.finished)
    return;
  if (this.atSummary)
    if (!this.atExplanation)
      return this.summary$0();
    else
      return $.query("#explainSection");
  if (!(this.currentQuestion == null))
    return this.displayCurrentQuestion$0();
  return;
},
 next$0: function() {
  if (this.finished)
    return;
  if (this.atSummary)
    this.finished = true;
  else if (this.nextQuestion$0() == null)
    this.atSummary = true;
  return this.display$0();
},
 explain$0: function() {
  var output, t1;
  output = $.DivElement_DivElement();
  for (t1 = this.explanations$0(), t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;)
    output.insertAdjacentElement$2("beforeEnd", t1.next$0());
  return output;
},
 explanations$0: function() {
  var output, t1, index, t2, questionExplanation;
  output = $.List_List(null);
  for (t1 = this.questions, t1 = $.getInterceptor(t1).iterator$0(t1), index = 0; t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    ++index;
    questionExplanation = t2.explain$0();
    questionExplanation.set$id("Section" + $.S(this.star) + "Explanation{" + $.S(index) + "}");
    $.getInterceptor(output).add$1(output, questionExplanation);
  }
  return output;
},
 getMaxPoints$0: function() {
  var t1, total, t2;
  for (t1 = this.questions, t1 = $.getInterceptor(t1).iterator$0(t1), total = 0; t1.get$hasNext() === true;) {
    t2 = t1.next$0().getMaximumPoints$0();
    if (typeof t2 !== 'number')
      throw $.iae(t2);
    total += t2;
  }
  return total;
},
 getUserAnswerPoints$0: function() {
  var t1, total, t2;
  for (t1 = this.questions, t1 = $.getInterceptor(t1).iterator$0(t1), total = 0; t1.get$hasNext() === true;) {
    t2 = t1.next$0().getUserAnswerPoints$0();
    if (typeof t2 !== 'number')
      throw $.iae(t2);
    if (t2 !== (t2 | 0))
      return this.getUserAnswerPoints$0$bailout(1, total, t2, t1);
    total += t2;
  }
  return total;
},
 getUserAnswerPoints$0$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      t1 = env2;
      t2 = env1;
      total = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.questions;
      t1 = $.getInterceptor(t1).iterator$0(t1);
      total = 0;
    case 1:
      var t1, total, t2;
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!(t1.get$hasNext() === true))
                break L0;
              t2 = t1.next$0().getUserAnswerPoints$0();
              if (typeof t2 !== 'number')
                throw $.iae(t2);
            case 1:
              state0 = 0;
              total += t2;
          }
      return total;
  }
},
 summary$0: function() {
  var output, t1, passport, content$, percentageScore, best, agile, t2, t3, t4;
  $.print("Summary section.");
  output = $.DivElement_DivElement();
  output.set$id("summary" + $.S(this.star));
  t1 = output.get$classes();
  $.getInterceptor(t1).add$1(t1, "summary");
  passport = $.ImageElement_ImageElement(null, null, null);
  t1 = passport.get$classes();
  $.getInterceptor(t1).add$1(t1, "passportImage");
  passport.set$src("images/passport_m.png");
  passport.get$style().set$zIndex("-10");
  output.insertAdjacentElement$2("beforeEnd", passport);
  content$ = $.ParagraphElement_ParagraphElement();
  t1 = content$.get$classes();
  $.getInterceptor(t1).add$1(t1, "detail");
  content$.addHtml$1("<h4>Destination " + $.S(this.star) + ": " + $.S(this.name) + "<br/>Summary</h4>");
  t1 = $.tdiv($.mul(this.getUserAnswerPoints$0(), 100), this.getMaxPoints$0());
  percentageScore = $.getInterceptor(t1).toInt$0(t1);
  for (t1 = this.questions, t1 = $.getInterceptor(t1).iterator$0(t1), best = 0, agile = 0; t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if ($.eqB(t2.getUserAnswerPoints$0(), t2.getMaximumPoints$0()))
      ++best;
    if ($.gtB(t2.getUserAnswerPoints$0(), 0))
      ++agile;
  }
  content$.addHtml$1("<h4>Estimated Fluency: " + $.S(percentageScore) + "%</h4>");
  t1 = "<li>Total Agile Answers: " + $.S(agile) + "/";
  t2 = this.questions;
  content$.addHtml$1(t1 + $.S($.getInterceptor(t2).get$length(t2)) + "</li>");
  t3 = "<li>Most Fluent Answers: " + $.S(best) + "/";
  t4 = this.questions;
  content$.addHtml$1(t3 + $.S($.getInterceptor(t4).get$length(t4)) + "</li></ul>");
  content$.addHtml$1("<p class=\"italicIndent\">" + $.S(this.description) + "</p>");
  content$.addHtml$1("<p class=\"smallerLeft\">Learn more about " + $.S(this.name) + " <a href='" + $.S(this.reference) + "' target='_blank'>here</a></p>");
  output.insertAdjacentElement$2("beforeEnd", content$);
  return output;
},
 TestSection$2: function(level, xml) {
  this.questions = $.List_List(null);
  this.star = level;
  this.allQnA = $.XML_parse(xml, false);
  this.getQnA$0();
}
};

$$.XmlElement = {"": ["name>", "_liblib3$_children>", "_attributes", "_namespaces", "type", "parent"],
 "super": "XmlNode",
 get$text: function() {
  var t1, tNodes, s;
  t1 = this._liblib3$_children;
  tNodes = $.getInterceptor(t1).filter$1(t1, new $.XmlElement_text_anon());
  if ($.getInterceptor(tNodes).get$isEmpty(tNodes) === true)
    return "";
  s = $.StringBuffer_StringBuffer("");
  $.getInterceptor(tNodes).forEach$1(tNodes, new $.XmlElement_text_anon0(s));
  return $.getInterceptor(s).toString$0(s);
},
 get$namespaces: function() {
  return this._namespaces;
},
 get$attributes: function() {
  return this._attributes;
},
 get$children: function() {
  return this._liblib3$_children;
},
 get$namespacesInScope: function() {
  var l, t1;
  l = [];
  t1 = this._namespaces;
  $.getInterceptor(t1).forEach$1(t1, new $.XmlElement_namespacesInScope_anon(l));
  t1 = this.parent;
  if (!(t1 == null) && typeof t1 === 'object' && t1 !== null && !!t1.is$XmlElement)
    $.getInterceptor(l).addAll$1(l, this.parent.get$namespacesInScope());
  return l;
},
 isNamespaceInScope$1: function(namespace) {
  var t1 = this.get$namespacesInScope();
  return $.getInterceptor(t1).some$1(t1, new $.XmlElement_isNamespaceInScope_anon(namespace));
},
 get$hasChildren: function() {
  var t1 = this._liblib3$_children;
  return $.getInterceptor(t1).get$isEmpty(t1) !== true;
},
 addChild$1: function(element) {
  if (typeof element === 'object' && element !== null && !!element.is$XmlAttribute) {
    $.indexSet(this.get$attributes(), element.name, element.value);
    return;
  }
  if (typeof element === 'object' && element !== null && !!element.is$XmlNamespace) {
    $.indexSet(this.get$namespaces(), element.name, element.uri);
    return;
  }
  element.set$parent(this);
  this._liblib3$_children._add$1(element);
},
 addChildren$1: function(elements) {
  if ($.getInterceptor(elements).get$isEmpty(elements) !== true)
    $.getInterceptor(elements).forEach$1(elements, new $.XmlElement_addChildren_anon(this));
},
 query$1: function(queryOn) {
  var list = $.XmlCollection$_internal();
  if (typeof queryOn === 'string')
    this._queryNameInternal$2(queryOn, list);
  else if (typeof queryOn === 'object' && queryOn !== null && !!queryOn.is$XmlNodeType)
    this._queryNodeTypeInternal$2(queryOn, list);
  else if (typeof queryOn === 'object' && queryOn !== null && queryOn.is$Map())
    this._queryAttributeInternal$2(queryOn, list);
  return list;
},
 _queryAttributeInternal$2: function(aMap, list) {
  var t1;
  if (new $.XmlElement__queryAttributeInternal_checkAttribs(this, aMap).call$0() === true) {
    list._add$1(this);
    return;
  } else if (this.get$hasChildren() === true) {
    t1 = this.get$children().allElements$0();
    $.getInterceptor(t1).forEach$1(t1, new $.XmlElement__queryAttributeInternal_anon(list, aMap));
  }
},
 _queryNodeTypeInternal$2: function(nodeType, list) {
  var t1;
  if ($.eqB(this.type, nodeType)) {
    list._add$1(this);
    return;
  } else if (this.get$hasChildren() === true) {
    t1 = this.get$children();
    $.getInterceptor(t1).forEach$1(t1, new $.XmlElement__queryNodeTypeInternal_anon(list, nodeType));
  }
},
 _queryNameInternal$2: function(tagName, list) {
  var t1;
  if ($.eqB(this.name, tagName)) {
    list._add$1(this);
    return;
  } else if (this.get$hasChildren() === true) {
    t1 = this.get$children().allElements$0();
    $.getInterceptor(t1).forEach$1(t1, new $.XmlElement__queryNameInternal_anon(list, tagName));
  }
},
 queryAll$1: function(queryOn) {
  var list = $.XmlCollection$_internal();
  this._queryAllNamesInternal$2(queryOn, list);
  return list;
},
 _queryAllNamesInternal$2: function(tagName, list) {
  var t1;
  if ($.eqB(this.name, tagName))
    list._add$1(this);
  if (this.get$hasChildren() === true) {
    t1 = this.get$children();
    t1 = $.getInterceptor(t1).filter$1(t1, new $.XmlElement__queryAllNamesInternal_anon());
    $.getInterceptor(t1).forEach$1(t1, new $.XmlElement__queryAllNamesInternal_anon0(list, tagName));
  }
},
 XmlElement$2$elements: function(name$, elements) {
  this.addChildren$1(elements);
},
 is$XmlElement: true
};

$$.XmlParser = {"": ["_xml>", "_scopes>", "_withQuirks", "_root"],
 "super": "Object",
 _parseElement$1: function(t) {
  var tok, t1;
  tok = t.next$0();
  for (t1 = this._scopes; !(tok == null);) {
    switch (tok.get$kind()) {
      case 12:
        this._parseComment$1(t);
        break;
      case 14:
        this._parseCDATA$1(t);
        break;
      case 16:
        this._parsePI$1(t);
        break;
      case 1:
        this._parseTag$1(t);
        break;
      case 4:
        if ($.getInterceptor(t1).get$isEmpty(t1) === true)
          throw $.$$throw($.CTC12);
        else {
          this._parseTextNode$2(t, tok.get$_liblib3$_str());
          this._parseTag$1(t);
        }
        break;
    }
    tok = t.next$0();
  }
  if ($.getInterceptor(t1).get$isEmpty(t1) !== true)
    throw $.$$throw($.CTC13);
},
 _parsePI$1: function(t) {
  var t1, next, data;
  t1 = this._scopes;
  if ($.getInterceptor(t1).get$isEmpty(t1) === true)
    throw $.$$throw($.CTC32);
  next = t.next$0();
  this._assertKind$2(next, 4);
  data = next.get$_liblib3$_str();
  this._assertKind$2(t.next$0(), 17);
  $.getInterceptor(t1).get$first(t1).addChild$1($.XmlProcessingInstruction$(data));
},
 _parseCDATA$1: function(t) {
  var t1, next, data;
  t1 = this._scopes;
  if ($.getInterceptor(t1).get$isEmpty(t1) === true)
    throw $.$$throw($.CTC33);
  next = t.next$0();
  this._assertKind$2(next, 4);
  data = next.get$_liblib3$_str();
  this._assertKind$2(t.next$0(), 15);
  $.getInterceptor(t1).get$first(t1).addChild$1($.XmlCDATA$(data));
},
 _parseComment$1: function(t) {
  this._assertKind$2(t.next$0(), 4);
  this._assertKind$2(t.next$0(), 13);
},
 _parseTag$1: function(t) {
  var next, name$, name0, next0, t1, newElement, t2, ns;
  next = t.next$0();
  if ($.eqB(next.get$kind(), 7)) {
    next = t.next$0();
    this._assertKind$2(next, 4);
    name$ = next.get$_liblib3$_str();
    next = t.next$0();
    if ($.eqB(next.get$kind(), 6)) {
      next = t.next$0();
      this._assertKind$3(next, 4, "Namespace prefix must pair with a tag name: (<myNamespace:tagName ...)");
      name0 = $.S(name$) + ":" + $.S(next.get$_liblib3$_str());
      next0 = t.next$0();
      next = next0;
      name$ = name0;
    }
    t1 = this._scopes;
    if (!$.eqB($.getInterceptor(t1).get$first(t1).get$name(), name$))
      throw $.$$throw($.XmlException$withDebug("Expected closing tag \"" + $.S($.getInterceptor(t1).get$first(t1).get$name()) + "\"" + " but found \"" + $.S(name$) + "\" instead.", this._xml, next.get$_location()));
    this._assertKind$2(next, 2);
    t1.removeFirst$0();
    return;
  }
  this._assertKind$2(next, 4);
  name$ = next.get$_liblib3$_str();
  next = t.next$0();
  if ($.eqB(next.get$kind(), 6)) {
    next = t.next$0();
    this._assertKind$3(next, 4, "Namespace prefix must pair with a tag name: (<myNamespace:tagName ...)");
    name0 = $.S(name$) + ":" + $.S(next.get$_liblib3$_str());
    name$ = name0;
  }
  newElement = $.XmlElement$(name$, $.CTC22);
  t1 = this._root == null;
  t2 = this._scopes;
  if (t1) {
    this._root = newElement;
    t2.addFirst$1(this._root);
  } else {
    $.getInterceptor(t2).get$first(t2).addChild$1(newElement);
    t2.addFirst$1(newElement);
  }
  t1 = this._scopes;
  t2 = $.getInterceptor(t1).get$first(t1).get$name();
  if ($.getInterceptor(t2).contains$1(t2, ":") === true) {
    t2 = $.getInterceptor(t1).get$first(t1).get$name();
    ns = $.index($.getInterceptor(t2).split$1(t2, ":"), 0);
    if ($.getInterceptor(t1).get$first(t1).isNamespaceInScope$1(ns) !== true)
      throw $.$$throw($.XmlException$withDebug("Namespace \"" + $.S(ns) + "\" is" + " not declared in scope.", this._xml, next.get$_location()));
    next = t.next$0();
  }
  for (; !(next == null);) {
    switch (next.get$kind()) {
      case 18:
        this._parseNamespace$1(t);
        break;
      case 4:
        this._parseAttribute$2(t, next.get$_liblib3$_str());
        break;
      case 2:
        this._parseElement$1(t);
        return;
      case 7:
        this._assertKind$2(t.next$0(), 2);
        t1.removeFirst$0();
        return;
      default:
        throw $.$$throw($.XmlException$withDebug("Invalid xml " + $.S(next) + " found at this location.", this._xml, next.get$_location()));
    }
    next = t.next$0();
    if (next == null)
      throw $.$$throw($.Exception_Exception("Unexpected end of file."));
  }
},
 _parseTextNode$2: function(t, text) {
  var t1, t2, t3, next;
  t1 = {};
  t1.s_1 = $.StringBuffer_StringBuffer("");
  t2 = new $.XmlParser__parseTextNode_writeStringNode(t1, this);
  t3 = t1.s_1;
  $.getInterceptor(t3).add$1(t3, text);
  next = t.next$0();
  for (; !$.eqB(next.get$kind(), 1);) {
    switch (next.get$kind()) {
      case 12:
        t2.call$0();
        this._parseComment$1(t);
        t1.s_1 = $.StringBuffer_StringBuffer("");
        break;
      case 14:
        t2.call$0();
        this._parseCDATA$1(t);
        t1.s_1 = $.StringBuffer_StringBuffer("");
        break;
      case 16:
        t2.call$0();
        this._parsePI$1(t);
        t1.s_1 = $.StringBuffer_StringBuffer("");
        break;
      default:
        t3 = t1.s_1;
        $.getInterceptor(t3).add$1(t3, next.toStringLiteral$0());
        break;
    }
    next = t.next$0();
    if (next == null)
      throw $.$$throw($.CTC14);
  }
  t2.call$0();
},
 _parseNamespace$1: function(t) {
  var t1, t2, t3, name$, t4, t5;
  t1 = {};
  t2 = this._scopes;
  t3 = new $.XmlParser__parseNamespace_setNamespace($.getInterceptor(t2).get$first(t2));
  t1.next_1 = t.next$0();
  this._assertKind$3(t1.next_1, 4, "Must declare namespace name.");
  name$ = t1.next_1.get$_liblib3$_str();
  t1.next_1 = t.next$0();
  this._assertKind$3(t1.next_1, 8, "Must have an = after a namespace name.");
  t1.next_1 = t.next$0();
  t4 = new $.XmlParser__parseNamespace_quotesRequired(this, name$, t, t1, t3);
  if (this._withQuirks === true) {
    t2 = t1.next_1;
    t5 = t2.get$kind();
    if (typeof t5 !== 'number')
      return this._parseNamespace$1$bailout(1, name$, t1, t4, t5, t3);
    if (t5 === 4)
      t3.call$2(name$, t2.get$_liblib3$_str());
    else if (t5 === 9)
      t4.call$0();
  } else
    t4.call$0();
},
 _parseNamespace$1$bailout: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      t3 = env4;
      t2 = env3;
      t4 = env2;
      t1 = env1;
      name$ = env0;
      break;
    case 2:
      t2 = env1;
      t4 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
      t2 = this._scopes;
      t3 = new $.XmlParser__parseNamespace_setNamespace($.getInterceptor(t2).get$first(t2));
      t1.next_1 = t.next$0();
      this._assertKind$3(t1.next_1, 4, "Must declare namespace name.");
      name$ = t1.next_1.get$_liblib3$_str();
      t1.next_1 = t.next$0();
      this._assertKind$3(t1.next_1, 8, "Must have an = after a namespace name.");
      t1.next_1 = t.next$0();
      t4 = new $.XmlParser__parseNamespace_quotesRequired(this, name$, t, t1, t3);
    default:
      var t1, t2, t3, name$, t4;
      if (state0 === 2 || state0 === 1 || state0 === 0 && this._withQuirks === true)
        switch (state0) {
          case 0:
            t2 = t1.next_1.get$kind();
          case 1:
            state0 = 0;
          case 2:
            if (state0 === 0 && $.eqB(t2, 4))
              t3.call$2(name$, t1.next_1.get$_liblib3$_str());
            else
              switch (state0) {
                case 0:
                  t2 = t1.next_1.get$kind();
                case 2:
                  state0 = 0;
                  if ($.eqB(t2, 9))
                    t4.call$0();
              }
        }
      else
        t4.call$0();
  }
},
 _parseAttribute$2: function(t, attributeName) {
  var t1, t2, el, t3, t4, result, t5;
  t1 = {};
  t1.attributeName_1 = attributeName;
  t2 = this._scopes;
  el = $.getInterceptor(t2).get$first(t2);
  t2 = new $.XmlParser__parseAttribute_setAttribute(el);
  t1.next_2 = t.next$0();
  t3 = t1.next_2.get$kind();
  if (typeof t3 !== 'number')
    return this._parseAttribute$2$bailout(1, t, el, t1, t2, t3);
  if (t3 === 6) {
    t1.next_2 = t.next$0();
    this._assertKind$3(t1.next_2, 4, "Namespace prefix must pair with an attribute name: (myNamespace:myattribute=\"...\")");
    t3 = [$.XmlToken_XmlToken(18), $.XmlToken_XmlToken$string(t1.attributeName_1)];
    t4 = [$.XmlToken_XmlToken(2)];
    result = t.lookAheadMatch$3$index$until(t3, t.get$lastTokenIndex(), t4);
    if (typeof result !== 'boolean')
      return this._parseAttribute$2$bailout(2, t, el, t1, t2, result);
    if (el.isNamespaceInScope$1(t1.attributeName_1) !== true && !result) {
      $.print($.S(result) + " " + $.S(t1.attributeName_1));
      throw $.$$throw($.XmlException$withDebug("xxNamespace \"" + $.S(t1.attributeName_1) + "\" is" + " not declared in scope.", this._xml, t1.next_2.get$_location()));
    }
    t1.attributeName_1 = $.S(t1.attributeName_1) + ":" + $.S(t1.next_2.get$_liblib3$_str());
    t1.next_2 = t.next$0();
  }
  this._assertKind$3(t1.next_2, 8, "Must have an = after an attribute name.");
  t1.next_2 = t.next$0();
  t3 = new $.XmlParser__parseAttribute_quotesRequired(t1, t, t2, this);
  if (this._withQuirks === true) {
    t4 = t1.next_2;
    t5 = t4.get$kind();
    if (typeof t5 !== 'number')
      return this._parseAttribute$2$bailout(3, t2, t1, t3, t5);
    if (t5 === 4)
      t2.call$2(t1.attributeName_1, t4.get$_liblib3$_str());
    else if (t5 === 9)
      t3.call$0();
  } else
    t3.call$0();
},
 _parseAttribute$2$bailout: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      t3 = env4;
      t2 = env3;
      t1 = env2;
      el = env1;
      t = env0;
      break;
    case 2:
      result = env4;
      t2 = env3;
      t1 = env2;
      el = env1;
      t = env0;
      break;
    case 3:
      t4 = env3;
      t3 = env2;
      t1 = env1;
      t2 = env0;
      break;
    case 4:
      t2 = env1;
      t3 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
      t1.attributeName_1 = attributeName;
      t2 = this._scopes;
      el = $.getInterceptor(t2).get$first(t2);
      t2 = new $.XmlParser__parseAttribute_setAttribute(el);
      t1.next_2 = t.next$0();
      t3 = t1.next_2.get$kind();
    case 1:
      state0 = 0;
    case 2:
      if (state0 === 2 || state0 === 0 && $.eqB(t3, 6))
        switch (state0) {
          case 0:
            t1.next_2 = t.next$0();
            this._assertKind$3(t1.next_2, 4, "Namespace prefix must pair with an attribute name: (myNamespace:myattribute=\"...\")");
            t3 = [$.XmlToken_XmlToken(18), $.XmlToken_XmlToken$string(t1.attributeName_1)];
            t4 = [$.XmlToken_XmlToken(2)];
            result = t.lookAheadMatch$3$index$until(t3, t.get$lastTokenIndex(), t4);
          case 2:
            state0 = 0;
            if (el.isNamespaceInScope$1(t1.attributeName_1) !== true && $.eqB(result, false)) {
              $.print($.S(result) + " " + $.S(t1.attributeName_1));
              throw $.$$throw($.XmlException$withDebug("xxNamespace \"" + $.S(t1.attributeName_1) + "\" is" + " not declared in scope.", this._xml, t1.next_2.get$_location()));
            }
            t1.attributeName_1 = $.S(t1.attributeName_1) + ":" + $.S(t1.next_2.get$_liblib3$_str());
            t1.next_2 = t.next$0();
        }
      this._assertKind$3(t1.next_2, 8, "Must have an = after an attribute name.");
      t1.next_2 = t.next$0();
      t3 = new $.XmlParser__parseAttribute_quotesRequired(t1, t, t2, this);
    default:
      var t1, t2, el, t3, t, t4, result;
      if (state0 === 4 || state0 === 3 || state0 === 0 && this._withQuirks === true)
        switch (state0) {
          case 0:
            t4 = t1.next_2.get$kind();
          case 3:
            state0 = 0;
          case 4:
            if (state0 === 0 && $.eqB(t4, 4))
              t2.call$2(t1.attributeName_1, t1.next_2.get$_liblib3$_str());
            else
              switch (state0) {
                case 0:
                  t2 = t1.next_2.get$kind();
                case 4:
                  state0 = 0;
                  if ($.eqB(t2, 9))
                    t3.call$0();
              }
        }
      else
        t3.call$0();
  }
},
 _assertKind$3: function(tok, matchID, info) {
  var match, t1, msg;
  match = $.XmlToken_XmlToken(matchID);
  t1 = "Expected " + $.S(match) + ", but found " + $.S(tok) + ". ";
  msg = t1 + (info == null ? "" : "\r" + $.S(info));
  if (!$.eqB(tok.get$kind(), match.get$kind()))
    throw $.$$throw($.XmlException$withDebug(msg, this._xml, tok.get$_location()));
},
 _assertKind$2: function(tok,matchID) {
  return this._assertKind$3(tok,matchID,null)
}
};

$$.XmlTokenizer = {"": ["_specialTags", "_liblib3$_buffer>", "_tokenized", "_xml>", "_liblib3$_length>", "_i>", "_liblib3$_index"],
 "super": "Object",
 get$lastTokenIndex: function() {
  return this._liblib3$_index;
},
 next$0: function() {
  var t1, t2;
  t1 = this._tokenized;
  if ($.getInterceptor(t1).get$isEmpty(t1) === true)
    return;
  t2 = this._liblib3$_index;
  if (typeof t2 !== 'number')
    return this.next$0$bailout0(1, t1, t2);
  this._liblib3$_index = t2 + 1;
  return $.getInterceptor(t1).removeAt$1(t1, 0);
},
 next$0$bailout0: function(state0, t1, t2) {
  this._liblib3$_index = $.add(t2, 1);
  return $.getInterceptor(t1).removeAt$1(t1, 0);
},
 indexOfToken$2$start: function(token, start) {
  var t1, t2, t3, i;
  t1 = this._tokenized;
  if ($.getInterceptor(t1).get$isEmpty(t1) === true)
    return -1;
  if ($.ltB(start, 0) || $.gtB(start, t1.length - 1))
    throw $.$$throw($.RangeError$(0));
  t2 = $.getInterceptor(t1);
  t3 = t1.length;
  if (typeof start !== 'number')
    throw $.iae(start);
  t1 = t2.getRange$2(t1, start, t3 - start);
  t1 = $.getInterceptor(t1).iterator$0(t1);
  i = start;
  for (; t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if ($.eqB(t2.get$kind(), token.get$kind()))
      if ($.eqB(t2.get$kind(), 4)) {
        if ($.eqB(t2.get$_liblib3$_str(), token.get$_liblib3$_str()))
          return i;
      } else if ($.eqB(t2.get$kind(), 9)) {
        if ($.eqB(t2.get$quoteKind(), token.get$quoteKind()))
          return i;
      } else
        return i;
    ++i;
  }
  return -1;
},
 lookAheadMatch$3$index$until: function(sequence, index, until) {
  var t1, t2, resultUntil, result;
  if ($.ltB(index, 0) || $.gtB(index, this._tokenized.length - 1))
    return false;
  t1 = $.add(index, $.getInterceptor(sequence).get$length(sequence));
  t2 = this._tokenized;
  if ($.gtB(t1, t2.length))
    return false;
  t1 = until == null;
  resultUntil = t2.length;
  resultUntil = t1 ? resultUntil : this._sequenceMatch$3(until, index, resultUntil);
  if ($.eqB(resultUntil, -1))
    resultUntil = t2.length;
  result = this._sequenceMatch$3(sequence, index, resultUntil);
  if ($.eqB(result, -1))
    return false;
  if ($.ltB(resultUntil, result))
    return false;
  return true;
},
 _sequenceMatch$3: function(sequence, index, until) {
  var result, t1, t2;
  if (typeof sequence !== 'string' && (typeof sequence !== 'object' || sequence === null || sequence.constructor !== Array && !sequence.is$JavaScriptIndexingBehavior()))
    return this._sequenceMatch$3$bailout(1, sequence, index, until);
  if (0 >= sequence.length)
    throw $.ioore(0);
  result = this.indexOfToken$2$start(sequence[0], index);
  if (typeof result !== 'number')
    return this._sequenceMatch$3$bailout(2, result, sequence, until);
  if (result === -1)
    return -1;
  t1 = sequence.length;
  if (t1 === 1)
    return result;
  t2 = $.getInterceptor(sequence);
  return this._sequenceMatch$3(t2.getRange$2(sequence, 1, t1 - 1), result, until);
},
 _sequenceMatch$3$bailout: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      until = env2;
      index = env1;
      sequence = env0;
      break;
    case 2:
      until = env2;
      sequence = env1;
      result = env0;
      break;
    case 3:
      t1 = env3;
      until = env2;
      sequence = env1;
      result = env0;
      break;
    case 4:
      t1 = env4;
      result = env3;
      until = env2;
      t2 = env1;
      sequence = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      result = this.indexOfToken$2$start($.index(sequence, 0), index);
    case 2:
      state0 = 0;
      if ($.eqB(result, -1))
        return -1;
      t1 = $.getInterceptor(sequence).get$length(sequence);
    case 3:
      state0 = 0;
      if ($.eqB(t1, 1))
        return result;
      t1 = $.getInterceptor(sequence);
      t2 = $.getInterceptor(sequence).get$length(sequence);
    case 4:
      var until, index, sequence, result, t1, t2;
      state0 = 0;
      return this._sequenceMatch$3(t1.getRange$2(sequence, 1, $.sub(t2, 1)), result, until);
  }
},
 _liblib3$_next$0: function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, found, endIndex, m, endComment, nestedTest, endCDATA, endPI, c, _ii, _ii0, s;
  t1 = new $.XmlTokenizer__next_addToQueue(this);
  t2 = new $.XmlTokenizer__next_getNextToken(this);
  t3 = new $.XmlTokenizer__next_peekUntil(this);
  t4 = new $.XmlTokenizer__next_matchWord(this);
  t5 = new $.XmlTokenizer__next_nextNonWhitespace(this);
  t6 = new $.XmlTokenizer__next_nextWhitespace(this);
  t7 = this._liblib3$_buffer;
  if ($.getInterceptor(t7).get$isEmpty(t7) !== true)
    return t2.call$0();
  t7 = this._xml;
  while (true) {
    if ($.ltB(this._i, this._liblib3$_length)) {
      t8 = $.getInterceptor(t7).charCodeAt$1(t7, this._i);
      t9 = $.geB($.getInterceptor($.CTC24).indexOf$1($.CTC24, t8), 0);
      t8 = t9;
    } else
      t8 = false;
    if (!t8)
      break;
    this._i = $.add(this._i, 1);
  }
  if ($.eqB(this._i, this._liblib3$_length))
    return;
  switch ($.getInterceptor(t7).charCodeAt$1(t7, this._i)) {
    case 33:
      this._i = $.add(this._i, 1);
      t1.call$1($.XmlToken_XmlToken(5));
      break;
    case 58:
      this._i = $.add(this._i, 1);
      t1.call$1($.XmlToken_XmlToken(6));
      break;
    case 47:
      this._i = $.add(this._i, 1);
      t1.call$1($.XmlToken_XmlToken(7));
      break;
    case 60:
      for (t8 = this._specialTags, t9 = $.getInterceptor(t8).iterator$0(t8); found = "", endIndex = -1, t9.get$hasNext() === true;) {
        found = t9.next$0();
        m = t4.call$1(found);
        if (!$.eqB(m, -1)) {
          endIndex = m;
          break;
        }
      }
      $1: {
        if (0 >= t8.length)
          throw $.ioore(0);
        if ($.eqB(t8[0], found)) {
          t1.call$1($.XmlToken_XmlToken(12));
          this._i = $.add(endIndex, 1);
          endComment = $.getInterceptor(t7).indexOf$2(t7, "-->", this._i);
          nestedTest = $.getInterceptor(t7).indexOf$2(t7, "<!--", this._i);
          if ($.eqB(endComment, -1))
            throw $.$$throw($.CTC25);
          if (!$.eqB(nestedTest, -1) && $.ltB(nestedTest, endComment))
            throw $.$$throw($.CTC26);
          t1.call$1($.XmlToken_XmlToken$string($.getInterceptor(t7).substring$2(t7, this._i, endComment)));
          t1.call$1($.XmlToken_XmlToken(13));
          this._i = $.add(endComment, 3);
          break $1;
        } else {
          if (1 >= t8.length)
            throw $.ioore(1);
          if ($.eqB(t8[1], found)) {
            t1.call$1($.XmlToken_XmlToken(14));
            this._i = $.add(endIndex, 1);
            endCDATA = $.getInterceptor(t7).indexOf$2(t7, "]]>", this._i);
            nestedTest = $.getInterceptor(t7).indexOf$2(t7, "<![CDATA[", this._i);
            if ($.eqB(endCDATA, -1))
              throw $.$$throw($.CTC27);
            if (!$.eqB(nestedTest, -1) && $.ltB(nestedTest, endCDATA))
              throw $.$$throw($.CTC28);
            t3 = $.getInterceptor(t7).substring$2(t7, this._i, endCDATA);
            t1.call$1($.XmlToken_XmlToken$string($.getInterceptor(t3).trim$0(t3)));
            t1.call$1($.XmlToken_XmlToken(15));
            this._i = $.add(endCDATA, 3);
            break $1;
          } else {
            if (2 >= t8.length)
              throw $.ioore(2);
            if ($.eqB(t8[2], found)) {
              t1.call$1($.XmlToken_XmlToken(16));
              this._i = $.add(endIndex, 1);
              endPI = $.getInterceptor(t7).indexOf$2(t7, "?>", this._i);
              nestedTest = $.getInterceptor(t7).indexOf$2(t7, "<?", this._i);
              if ($.eqB(endPI, -1))
                throw $.$$throw($.CTC29);
              if (!$.eqB(nestedTest, -1) && $.ltB(nestedTest, endPI))
                throw $.$$throw($.CTC30);
              t3 = $.getInterceptor(t7).substring$2(t7, this._i, endPI);
              t1.call$1($.XmlToken_XmlToken$string($.getInterceptor(t3).trim$0(t3)));
              t1.call$1($.XmlToken_XmlToken(17));
              this._i = $.add(endPI, 2);
              break $1;
            } else {
              if (3 >= t8.length)
                throw $.ioore(3);
              if ($.eqB(t8[3], found)) {
                t1.call$1($.XmlToken_XmlToken(1));
                t1.call$1($.XmlToken_XmlToken(7));
                this._i = $.add(endIndex, 1);
                break $1;
              } else {
                this._i = $.add(this._i, 1);
                t1.call$1($.XmlToken_XmlToken(1));
                this._i = t5.call$1(this._i);
                c = t3.call$1([32, 58, 62]);
                if ($.eqB(c, 32)) {
                  _ii = this._i;
                  this._i = t6.call$1(_ii);
                  t1.call$1($.XmlToken_XmlToken$string($.getInterceptor(t7).substring$2(t7, _ii, this._i)));
                  this._i = t5.call$1(this._i);
                } else if ($.eqB(c, 58)) {
                  _ii = this._i;
                  this._i = $.add($.getInterceptor(t7).indexOf$2(t7, ":", _ii), 1);
                  t1.call$1($.XmlToken_XmlToken$string($.getInterceptor(t7).substring$2(t7, _ii, $.sub(this._i, 1))));
                  t1.call$1($.XmlToken_XmlToken(6));
                  _ii0 = t6.call$1(this._i);
                  t1.call$1($.XmlToken_XmlToken$string($.getInterceptor(t7).substring$2(t7, this._i, _ii0)));
                  this._i = t5.call$1(_ii0);
                } else if ($.eqB(c, -1))
                  throw $.$$throw($.XmlException$("Tokenzier unexpectedly reached end of document."));
                break $1;
              }
            }
          }
        }
      }
      break;
    case 62:
      this._i = $.add(this._i, 1);
      t1.call$1($.XmlToken_XmlToken(2));
      break;
    case 61:
      this._i = $.add(this._i, 1);
      t1.call$1($.XmlToken_XmlToken(8));
      break;
    case 34:
      this._i = $.add(this._i, 1);
      t1.call$1($.XmlToken_XmlToken$quote(34));
      break;
    case 39:
      this._i = $.add(this._i, 1);
      t1.call$1($.XmlToken_XmlToken$quote(39));
      break;
    default:
      m = t4.call$1("xmlns:");
      if (!$.eqB(m, -1)) {
        this._i = $.add(m, 1);
        t1.call$1($.XmlToken_XmlToken(18));
      } else {
        s = $.StringBuffer_StringBuffer("");
        while (true) {
          if ($.ltB(this._i, this._liblib3$_length)) {
            t3 = $.getInterceptor(t7).charCodeAt$1(t7, this._i);
            t4 = !$.gtB($.getInterceptor($.CTC31).indexOf$1($.CTC31, t3), -1);
            t3 = t4;
          } else
            t3 = false;
          if (!t3)
            break;
          t3 = $.getInterceptor(s);
          t4 = $.getInterceptor(t7);
          t5 = this._i;
          t3.add$1(s, t4.substring$2(t7, t5, $.add(t5, 1)));
          this._i = $.add(this._i, 1);
        }
        t3 = $.getInterceptor(s).toString$0(s);
        t1.call$1($.XmlToken_XmlToken$string($.getInterceptor(t3).trim$0(t3)));
      }
      break;
  }
  return t2.call$0();
},
 get$_liblib3$_next: function() { return new $.BoundClosure1(this, '_liblib3$_next$0'); },
 toString$0: function() {
  var t1 = this._tokenized;
  return $.S(t1) + " ::: Length: " + $.S(t1.length);
},
 XmlTokenizer$1: function(_xml) {
  var t1, t;
  t1 = this._xml;
  this._liblib3$_length = $.getInterceptor(t1).get$length(t1);
  t = this._liblib3$_next$0();
  for (t1 = this._tokenized; !(t == null);) {
    $.getInterceptor(t1).add$1(t1, t);
    t = this._liblib3$_next$0();
  }
}
};

$$.XmlToken = {"": ["kind>", "quoteKind>", "_liblib3$_str>", "_location="],
 "super": "Object",
 toString$0: function() {
  switch (this.kind) {
    case 16:
      return "(<?)";
    case 17:
      return "(?>)";
    case 11:
      return "(-)";
    case 1:
      return "(<)";
    case 2:
      return "(>)";
    case 3:
      return "(?)";
    case 4:
      return "STRING(" + $.S(this._liblib3$_str) + ")";
    case 5:
      return "(!)";
    case 6:
      return "(:)";
    case 7:
      return "(/)";
    case 8:
      return "(=)";
    case 9:
      return "(\")";
    case 12:
      return "(<!--)";
    case 13:
      return "(-->)";
    case 14:
      return "(<![CDATA[)";
    case 15:
      return "(]]>)";
    case 18:
      return "xmlns";
    case 10:
      return "INVALID()";
  }
},
 toStringLiteral$0: function() {
  switch (this.kind) {
    case 18:
      return "xmlns";
    case 2:
      return ">";
    case 1:
      return "<";
    case 3:
      return "?";
    case 4:
      return this._liblib3$_str;
    case 5:
      return "!";
    case 6:
      return ":";
    case 7:
      return "/";
    case 8:
      return "=";
    case 9:
      return this.quoteKind === 34 ? "\"" : "'";
    case 10:
      return "INVALID()";
    default:
      throw $.$$throw($.XmlException$("String literal unavailable for " + $.S(this)));
  }
}
};

$$.XmlNode = {"": ["type>", "parent<"],
 "super": "Object",
 remove$0: function() {
  var t1, i;
  t1 = this.parent;
  if (t1 == null)
    return;
  t1 = t1.get$_liblib3$_children();
  i = $.getInterceptor(t1).indexOf$1(t1, this);
  if ($.eqB(i, -1))
    throw $.$$throw($.CTC21);
  this.parent.get$_liblib3$_children()._removeRange$2(i, 1);
},
 toString$0: function() {
  var s = $.StringBuffer_StringBuffer("");
  $.XmlNode__stringifyInternal(s, this, 0, true);
  return $.getInterceptor(s).toString$0(s);
}
};

$$.XmlNodeType = {"": ["_liblib3$_type"],
 "super": "Object",
 toString$0: function() {
  return this._liblib3$_type;
},
 is$XmlNodeType: true
};

$$.XmlText = {"": ["text>", "type", "parent"],
 "super": "XmlNode",
 toString$0: function() {
  return this.text;
},
 is$XmlText: true
};

$$.XmlAttribute = {"": ["name>", "value>", "type", "parent"],
 "super": "XmlNode",
 toString$0: function() {
  var t1, t2, t3;
  t1 = this.value;
  t2 = $.getInterceptor(t1).contains$1(t1, "\"") === true;
  t3 = this.name;
  return t2 ? " " + $.S(t3) + "='" + $.S(t1) + "'" : " " + $.S(t3) + "=\"" + $.S(t1) + "\"";
},
 is$XmlAttribute: true
};

$$.XmlException = {"": ["msg", "debugXml", "errorLocation"],
 "super": "Object",
 toString$0: function() {
  var t1, s, t2, bLoc, t3, aLoc;
  t1 = this.debugXml;
  if (typeof t1 !== 'string')
    return this.toString$0$bailout0(1, t1);
  if (t1 === "")
    return "Xml Exception: " + $.S(this.msg);
  s = $.StringBuffer_StringBuffer("");
  $.getInterceptor(s).add$1(s, "Xml Exception: " + $.S(this.msg));
  $.getInterceptor(s).add$1(s, "\r");
  t2 = this.errorLocation;
  if (typeof t2 !== 'number')
    return this.toString$0$bailout0(2, s, t1, t2);
  bLoc = t2 < 41 ? 0 : t2 - 40;
  t3 = t1.length;
  if (t2 > t3 - 41)
    aLoc = t3 - 1;
  else
    aLoc = t2 + 40;
  $.getInterceptor(s).add$1(s, $.getInterceptor(t1).substring$2(t1, bLoc, aLoc));
  return $.getInterceptor(s).toString$0(s);
},
 toString$0$bailout0: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t2 = env2;
      t1 = env1;
      s = env0;
      break;
    case 3:
      bLoc = env4;
      t3 = env3;
      t2 = env2;
      t1 = env1;
      s = env0;
      break;
    case 4:
      bLoc = env3;
      t2 = env2;
      t1 = env1;
      s = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.debugXml;
    case 1:
      state0 = 0;
      if ($.eqB(t1, ""))
        return "Xml Exception: " + $.S(this.msg);
      s = $.StringBuffer_StringBuffer("");
      $.getInterceptor(s).add$1(s, "Xml Exception: " + $.S(this.msg));
      $.getInterceptor(s).add$1(s, "\r");
      t2 = this.errorLocation;
    case 2:
      state0 = 0;
      bLoc = $.ltB(t2, 41) ? 0 : $.sub(t2, 40);
      t3 = $.getInterceptor(t1).get$length(t1);
    case 3:
      state0 = 0;
    case 4:
      var t1, s, t2, bLoc, t3, aLoc;
      if (state0 === 4 || state0 === 0 && $.gtB(t2, $.sub(t3, 41)))
        switch (state0) {
          case 0:
            t2 = $.getInterceptor(t1).get$length(t1);
          case 4:
            state0 = 0;
            aLoc = $.sub(t2, 1);
        }
      else
        aLoc = $.add(t2, 40);
      $.getInterceptor(s).add$1(s, $.getInterceptor(t1).substring$2(t1, bLoc, aLoc));
      return $.getInterceptor(s).toString$0(s);
  }
},
 is$Exception: true
};

$$.XmlCDATA = {"": ["text>", "type", "parent"],
 "super": "XmlNode",
 toString$0: function() {
  return "<![CDATA[\r" + $.S(this.text) + "\r]]>";
}
};

$$.XmlProcessingInstruction = {"": ["text>", "type", "parent"],
 "super": "XmlNode",
 toString$0: function() {
  return "<?\r" + $.S(this.text) + "\r?>";
}
};

$$.XmlCollection = {"": ["_collection"],
 "super": "Object",
 contains$1: function(element) {
  var t1 = this._collection;
  return $.getInterceptor(t1).contains$1(t1, element);
},
 get$last: function() {
  var t1 = this._collection;
  return $.getInterceptor(t1).get$last(t1);
},
 indexOf$1: function(element) {
  var t1 = this._collection;
  return $.getInterceptor(t1).indexOf$1(t1, element);
},
 operator$index$1: function(index) {
  return $.index(this._collection, index);
},
 _add$1: function(element) {
  var t1 = this._collection;
  return $.getInterceptor(t1).add$1(t1, element);
},
 _removeRange$2: function(start, length$) {
  var t1 = this._collection;
  return $.getInterceptor(t1).removeRange$2(t1, start, length$);
},
 forEach$1: function(f) {
  var t1 = this._collection;
  return $.getInterceptor(t1).forEach$1(t1, f);
},
 filter$1: function(f) {
  var t1 = this._collection;
  return $.XmlCollection$_from($.getInterceptor(t1).filter$1(t1, f));
},
 allElements$0: function() {
  var t1 = this._collection;
  return $.XmlCollection$_from($.getInterceptor(t1).filter$1(t1, new $.XmlCollection_allElements_anon()));
},
 some$1: function(f) {
  var t1 = this._collection;
  return $.getInterceptor(t1).some$1(t1, f);
},
 get$isEmpty: function() {
  var t1 = this._collection;
  return $.getInterceptor(t1).get$isEmpty(t1);
},
 get$length: function() {
  var t1 = this._collection;
  return $.getInterceptor(t1).get$length(t1);
},
 iterator$0: function() {
  var t1 = this._collection;
  return $.getInterceptor(t1).iterator$0(t1);
},
 query$1: function(queryOn) {
  var list, t1;
  list = $.XmlCollection$_internal();
  if (typeof queryOn === 'string')
    for (t1 = this.allElements$0(), t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;) {
      this._queryNameInternal$3(queryOn, list, t1.next$0());
      if ($.getInterceptor(list).get$isEmpty(list) !== true)
        break;
    }
  else if (typeof queryOn === 'object' && queryOn !== null && !!queryOn.is$XmlNodeType)
    for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;) {
      this._queryNodeTypeInternal$3(queryOn, list, t1.next$0());
      if ($.getInterceptor(list).get$isEmpty(list) !== true)
        break;
    }
  else if (typeof queryOn === 'object' && queryOn !== null && queryOn.is$Map())
    for (t1 = this.allElements$0(), t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;) {
      this._queryAttributeInternal$3(queryOn, list, t1.next$0());
      if ($.getInterceptor(list).get$isEmpty(list) !== true)
        break;
    }
  return list;
},
 _queryAttributeInternal$3: function(aMap, list, n) {
  var t1;
  if (new $.XmlCollection__queryAttributeInternal_checkAttribs(aMap, n).call$0() === true) {
    list._add$1(n);
    return;
  } else if (n.get$hasChildren() === true) {
    t1 = n.get$children().allElements$0();
    $.getInterceptor(t1).forEach$1(t1, new $.XmlCollection__queryAttributeInternal_anon(aMap, list));
  }
},
 _queryNodeTypeInternal$3: function(nodeType, list, node) {
  var t1;
  if ($.eqB(node.get$type(), nodeType)) {
    list._add$1(node);
    return;
  } else if ($.propertyTypeCast(node, 'is$XmlElement').get$hasChildren() === true) {
    t1 = node.get$children();
    $.getInterceptor(t1).forEach$1(t1, new $.XmlCollection__queryNodeTypeInternal_anon(list, nodeType));
  }
},
 _queryNameInternal$3: function(tagName, list, element) {
  var t1 = element.get$name();
  if (typeof t1 !== 'string')
    return this._queryNameInternal$3$bailout(1, tagName, list, element, t1);
  if (t1 === tagName) {
    list._add$1(element);
    return;
  } else if (element.get$hasChildren() === true) {
    t1 = element.get$children().allElements$0();
    $.getInterceptor(t1).forEach$1(t1, new $.XmlCollection__queryNameInternal_anon(list, tagName));
  }
},
 _queryNameInternal$3$bailout: function(state0, tagName, list, element, t1) {
  if ($.eqB(t1, tagName)) {
    list._add$1(element);
    return;
  } else if (element.get$hasChildren() === true) {
    t1 = element.get$children().allElements$0();
    $.getInterceptor(t1).forEach$1(t1, new $.XmlCollection__queryNameInternal_anon(list, tagName));
  }
},
 queryAll$1: function(queryOn) {
  var list, t1;
  list = $.XmlCollection$_internal();
  for (t1 = this.allElements$0(), t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;)
    this._queryAllNamesInternal$3(queryOn, list, t1.next$0());
  return list;
},
 _queryAllNamesInternal$3: function(tagName, list, element) {
  var t1 = element.get$name();
  if (typeof t1 !== 'string')
    return this._queryAllNamesInternal$3$bailout(1, tagName, list, element, t1);
  if (t1 === tagName)
    list._add$1(element);
  if (element.get$hasChildren() === true) {
    t1 = element.get$children();
    t1 = $.getInterceptor(t1).filter$1(t1, new $.XmlCollection__queryAllNamesInternal_anon());
    $.getInterceptor(t1).forEach$1(t1, new $.XmlCollection__queryAllNamesInternal_anon0(list, tagName));
  }
},
 _queryAllNamesInternal$3$bailout: function(state0, tagName, list, element, t1) {
  if ($.eqB(t1, tagName))
    list._add$1(element);
  if (element.get$hasChildren() === true) {
    t1 = element.get$children();
    t1 = $.getInterceptor(t1).filter$1(t1, new $.XmlCollection__queryAllNamesInternal_anon());
    $.getInterceptor(t1).forEach$1(t1, new $.XmlCollection__queryAllNamesInternal_anon0(list, tagName));
  }
},
 toString$0: function() {
  var t1 = this._collection;
  return $.getInterceptor(t1).toString$0(t1);
},
 XmlCollection$_from$1: function(list) {
  var t1 = this._collection;
  $.getInterceptor(t1).addAll$1(t1, list);
},
 is$Collection: function() { return true; }
};

$$.XmlNamespace = {"": ["name>", "uri", "type", "parent"],
 "super": "XmlNode",
 toString$0: function() {
  var t1, t2;
  t1 = this.name;
  if ($.getInterceptor(t1).get$isEmpty(t1) === true) {
    t2 = this.uri;
    return $.getInterceptor(t2).contains$1(t2, "\"") === true ? " xmlns" + $.S(t1) + "='" + $.S(t2) + "'" : " xmlns" + $.S(t1) + "=\"" + $.S(t2) + "\"";
  }
  t2 = this.uri;
  return $.getInterceptor(t2).contains$1(t2, "\"") === true ? " xmlns:" + $.S(t1) + "='" + $.S(t2) + "'" : " xmlns:" + $.S(t1) + "=\"" + $.S(t2) + "\"";
},
 is$XmlNamespace: true
};

$$.Vec3 = {"": ["x=", "y=", "z="],
 "super": "Object",
 copy$1: function(other) {
  this.x = other.get$x();
  this.y = other.get$y();
  this.z = other.get$z();
},
 get$length: function() {
  var t1, sum;
  t1 = this.x;
  t1 = $.mul(t1, t1);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  sum = 0 + t1;
  t1 = this.y;
  t1 = $.mul(t1, t1);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  sum += t1;
  t1 = this.z;
  t1 = $.mul(t1, t1);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  return $.sqrt(sum + t1);
}
};

$$.ThreeDimensionalObj = {"": ["scale>", "position=", "rotation>"],
 "super": "Object",
 copy$1: function(other) {
  this.scale = other.get$scale();
  this.position.copy$1(other.get$position());
  this.rotation.copy$1(other.get$rotation());
},
 get$transformString: function() {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12;
  t1 = "scale(" + $.S(this.scale) + ") translateX(";
  t2 = this.position.get$x();
  t3 = t1 + $.S($.getInterceptor(t2).toInt$0(t2)) + "px) translateY(";
  t4 = this.position.get$y();
  t5 = t3 + $.S($.getInterceptor(t4).toInt$0(t4)) + "px) translateZ(";
  t6 = this.position.get$z();
  t7 = t5 + $.S($.getInterceptor(t6).toInt$0(t6)) + "px) rotateX(";
  t8 = this.rotation.x;
  t9 = t7 + $.S($.getInterceptor(t8).toInt$0(t8)) + "deg) rotateY(";
  t10 = this.rotation.y;
  t11 = t9 + $.S($.getInterceptor(t10).toInt$0(t10)) + "deg) rotateZ(";
  t12 = this.rotation.z;
  return t11 + $.S($.getInterceptor(t12).toInt$0(t12)) + "deg)";
},
 ThreeDimensionalObj$7: function(scale, x, y, z, heading, pitch, roll) {
  this.position = $.Vec3$(x, y, z);
  this.rotation = $.Vec3$(pitch, heading, roll);
}
};

$$.Slide = {"": ["element>", "inFocus<", "scale", "position", "rotation"],
 "super": "ThreeDimensionalObj",
 move$7: function(time, x, y, z, xr, yr, zr) {
  var t1 = this.position;
  t1.set$x(x);
  t1.set$y(y);
  t1.set$z(z);
  t1 = this.rotation;
  t1.x = xr;
  t1.y = yr;
  t1.z = zr;
  t1 = $.S(time) + "s";
  this.element.get$style().set$transition(t1);
  this.setTransform$0();
},
 moveToCamera$2: function(time, cam) {
  var t1, t2, x, y, t3;
  t1 = cam.get$position().get$x();
  t2 = this.element;
  x = $.sub(t1, $.div(t2.get$clientWidth(), 2));
  y = $.sub(cam.get$position().get$y(), $.div(t2.get$clientHeight(), 2));
  t1 = cam.get$position().get$z();
  t3 = cam.get$rotation();
  this.move$7(time, x, y, t1, t3.get$x(), t3.get$y(), t3.get$z());
},
 setTransform$0: function() {
  var t1 = this.get$transformString();
  this.element.get$style().set$transform(t1);
},
 onGainFocus$2: function(transitionDuration, slideShow) {
  var t1, t2;
  if (this.inFocus === true)
    return 0;
  t1 = $.S(transitionDuration) + "s ease-in-out";
  t2 = this.element;
  t2.get$style().set$transition(t1);
  t1 = t2.get$classes();
  $.getInterceptor(t1).add$1(t1, "focused");
  t2.get$classes().remove$1("unfocused");
  this.inFocus = true;
},
 onLoseFocus$2: function(transitionDuration, slideShow) {
  var t1, t2;
  if (this.inFocus !== true)
    return 0;
  t1 = $.S(transitionDuration) + "s ease-in-out";
  t2 = this.element;
  t2.get$style().set$transition(t1);
  t1 = t2.get$classes();
  $.getInterceptor(t1).add$1(t1, "unfocused");
  t2.get$classes().remove$1("focused");
  this.inFocus = false;
},
 onLoseFocus$1: function(transitionDuration) {
  return this.onLoseFocus$2(transitionDuration,null)
},
 Slide$8: function(element, scale, x, y, z, heading, pitch, roll) {
  var t1, t2;
  t1 = this.element;
  t2 = t1.get$classes();
  $.getInterceptor(t2).add$1(t2, "slide");
  t1 = t1.get$style();
  t1.set$position("absolute");
  t1.set$transformStyle("preserve-3d");
  this.setTransform$0();
}
};

$$.Camera = {"": ["viewBox", "scene>", "scale", "position", "rotation"],
 "super": "ThreeDimensionalObj",
 centerFocalPoint$0: function() {
  var t1, t2;
  t1 = $.S($.tdiv(this.viewBox.get$clientHeight(), 2)) + "px";
  t2 = this.scene.get$style();
  t2.set$marginLeft("auto");
  t2.set$marginRight("auto");
  t2.set$marginTop(t1);
},
 move$7: function(time, x, y, z, xr, yr, zr) {
  var t1, xOffset, yOffset, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14;
  t1 = this.position;
  t1.set$x(x);
  t1.set$y(y);
  t1.set$z(z);
  t1 = this.rotation;
  t1.x = xr;
  t1.y = yr;
  t1.z = zr;
  t1 = this.scene;
  xOffset = $.tdiv(t1.get$clientWidth(), 2);
  yOffset = $.tdiv(t1.get$clientHeight(), 2);
  t2 = $.add($.neg(x), xOffset);
  t3 = "scale(1) translateX(" + $.S($.getInterceptor(t2).toInt$0(t2)) + "px) translateY(";
  t4 = $.add($.neg(y), yOffset);
  t5 = t3 + $.S($.getInterceptor(t4).toInt$0(t4)) + "px) translateZ(";
  t6 = $.neg(z);
  t7 = t5 + $.S($.getInterceptor(t6).toInt$0(t6)) + "px) rotateZ(" + $.S($.neg($.getInterceptor(zr).toInt$0(zr))) + "deg) rotateY(" + $.S($.neg($.getInterceptor(yr).toInt$0(yr))) + "deg) rotateX(" + $.S($.neg($.getInterceptor(xr).toInt$0(xr))) + "deg)";
  t8 = $.mul(z, 1);
  t9 = $.S($.getInterceptor(t8).toInt$0(t8)) + "px";
  t10 = $.mul(y, 1);
  t11 = $.S($.getInterceptor(t10).toInt$0(t10)) + "px";
  t12 = $.mul(x, 1);
  t13 = $.S($.getInterceptor(t12).toInt$0(t12)) + "px";
  t14 = $.S(time) + "s";
  t1 = t1.get$style();
  t1.set$transition(t14);
  t1.set$transformOriginX(t13);
  t1.set$transformOriginY(t11);
  t1.set$transformOriginZ(t9);
  t1.set$transform(t7);
},
 lookAtSlide$2: function(slide, time) {
  var xOffset, yOffset, t1, t2, t3, t4;
  xOffset = $.tdiv(slide.get$element().get$clientWidth(), 2);
  yOffset = $.tdiv(slide.get$element().get$clientHeight(), 2);
  t1 = $.add(slide.get$position().get$x(), xOffset);
  t2 = $.add(slide.get$position().get$y(), yOffset);
  t3 = slide.get$position().get$z();
  t4 = slide.get$rotation();
  this.move$7(time, t1, t2, t3, t4.get$x(), t4.get$y(), t4.get$z());
},
 Camera$1: function(viewBox) {
  var t1, t2, t3;
  t1 = this.viewBox;
  t2 = this.scene;
  t1.insertAdjacentElement$2("beforeEnd", t2);
  this.centerFocalPoint$0();
  t3 = $.S(t1.get$clientHeight());
  t2 = t2.get$style();
  t2.set$height(t3);
  t2.set$width("100%");
  t2.set$position("relative");
  t2.set$transformStyle("preserve-3d");
  this.move$7(0, 0, 0, 0, 0, 0, 0);
}
};

$$.SlideShow = {"": ["cam>", "useDynamic<"],
 "super": "Object",
 makeSlideFromElement$8: function(slideElement, scale, x, y, z, h, p, r) {
  if (this.useDynamic === true)
    return $.DynamicSlide$(slideElement, scale, x, y, z, h, p, r);
  else
    return $.StaticSlide$(slideElement, scale, x, y, z, h, p, r);
},
 addElementSlide$8: function(slideElement, scale, x, y, z, h, p, r) {
  var slide = this.makeSlideFromElement$8(slideElement, scale, x, y, z, h, p, r);
  this.addSlide$1(slide);
  return slide;
},
 addSlide$1: function(slide) {
  var t1;
  slide.set$inFocus(true);
  slide.onLoseFocus$1(0);
  this.cam.get$scene().insertAdjacentElement$2("beforeEnd", slide.get$element());
  t1 = this.slides;
  $.getInterceptor(t1).add$1(t1, slide);
  return slide;
},
 addBackgroundSlide$1: function(slide) {
  var t1, t2;
  t1 = slide.element;
  t1.get$classes().remove$1("slide");
  t2 = t1.get$classes();
  $.getInterceptor(t2).add$1(t2, "backgroundSlide");
  this.cam.get$scene().insertAdjacentElement$2("beforeEnd", t1);
  t1 = this.background;
  $.getInterceptor(t1).add$1(t1, slide);
  return slide;
},
 onFocus$2: function(slide, transitionDuration) {
  var t1, t2;
  for (t1 = this.slides, t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (!$.eqB(slide, t2))
      t2.onLoseFocus$2(transitionDuration, this);
  }
  slide.onGainFocus$2(transitionDuration, this);
},
 SlideShow$1: function(viewBox) {
  this.cam = $.Camera$(viewBox);
  $._lastCreatedSlideShow = this;
}
};

$$.DynamicSlide = {"": ["unfocusedPosition", "element", "inFocus", "scale", "position", "rotation"],
 "super": "Slide",
 onGainFocus$2: function(transitionDuration, slideShow) {
  if (this.inFocus === true)
    return 0;
  $.Slide.prototype.onGainFocus$2.call(this, transitionDuration, slideShow);
  this.unfocusedPosition.copy$1(this);
  this.moveToCamera$2(transitionDuration, slideShow.get$cam());
},
 onLoseFocus$2: function(transitionDuration, slideShow) {
  var t1, t2, t3, t4;
  if (this.inFocus !== true)
    return 0;
  $.Slide.prototype.onLoseFocus$2.call(this, transitionDuration, slideShow);
  t1 = this.unfocusedPosition.get$position().get$x();
  t2 = this.unfocusedPosition.get$position().get$y();
  t3 = this.unfocusedPosition.get$position().get$z();
  t4 = this.unfocusedPosition.get$rotation();
  this.move$7(transitionDuration, t1, t2, t3, t4.get$x(), t4.get$y(), t4.get$z());
},
 onLoseFocus$1: function(transitionDuration) {
  return this.onLoseFocus$2(transitionDuration,null)
},
 DynamicSlide$8: function(element, scale, x, y, z, heading, pitch, roll) {
  this.unfocusedPosition = $.ThreeDimensionalObj$(1, 0, 0, 0, 0, 0, 0);
  this.unfocusedPosition.copy$1(this);
}
};

$$.StaticSlide = {"": ["element", "inFocus", "scale", "position", "rotation"],
 "super": "Slide",
 onGainFocus$2: function(transitionDuration, slideShow) {
  $.Slide.prototype.onGainFocus$2.call(this, transitionDuration, slideShow);
  slideShow.get$cam().lookAtSlide$2(this, transitionDuration);
},
 onLoseFocus$2: function(transitionDuration, slideShow) {
  $.Slide.prototype.onLoseFocus$2.call(this, transitionDuration, slideShow);
},
 onLoseFocus$1: function(transitionDuration) {
  return this.onLoseFocus$2(transitionDuration,null)
}
};

$$.BasicSlideShow = {"": ["currentSlideIndex", "slides", "background", "cam", "useDynamic"],
 "super": "SlideShow",
 get$currentSlide: function() {
  var t1, t2;
  t1 = this.slides;
  t2 = this.currentSlideIndex;
  if (t2 < 0 || t2 >= t1.length)
    throw $.ioore(t2);
  return t1[t2];
},
 focusCurrentSlide$1: function(transitionDuration) {
  this.onFocus$2(this.get$currentSlide(), transitionDuration);
},
 next$0: function() {
  var t1 = this.slides;
  if (t1.length < 1)
    return;
  this.currentSlideIndex = this.currentSlideIndex + 1;
  if (this.currentSlideIndex >= t1.length)
    this.currentSlideIndex = 0;
  this.focusCurrentSlide$1(0.7);
},
 start$0: function() {
  if (this.slides.length < 1)
    return;
  this.currentSlideIndex = 0;
  this.focusCurrentSlide$1(0);
}
};

$$.onSuccess_anon = {"": ["viewBox_0"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.viewBox_0;
  t1.get$style().set$backgroundImage("none");
  t1.set$innerHTML("");
  $.addBackground();
  $.addSplash();
}
};

$$.invokeClosure_anon = {"": ["closure_0"],
 "super": "Closure",
 call$0: function() {
  return this.closure_0.call$0();
}
};

$$.invokeClosure_anon0 = {"": ["closure_2", "arg1_1"],
 "super": "Closure",
 call$0: function() {
  return this.closure_2.call$1(this.arg1_1);
}
};

$$.invokeClosure_anon1 = {"": ["arg2_5", "closure_4", "arg1_3"],
 "super": "Closure",
 call$0: function() {
  return this.closure_4.call$2(this.arg1_3, this.arg2_5);
}
};

$$.Maps__emitMap_anon = {"": ["result_3", "box_0", "visiting_2"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1, t2;
  t1 = this.box_0;
  if (t1.first_1 !== true) {
    t2 = this.result_3;
    $.getInterceptor(t2).add$1(t2, ", ");
  }
  t1.first_1 = false;
  t1 = this.result_3;
  t2 = this.visiting_2;
  $.Collections__emitObject(k, t1, t2);
  $.getInterceptor(t1).add$1(t1, ": ");
  $.Collections__emitObject(v, t1, t2);
}
};

$$.FilteredElementList__filtered_anon = {
 "super": "Closure",
 call$1: function(n) {
  return typeof n === 'object' && n !== null && n.is$Element();
}
};

$$._ChildrenElementList_filter_anon = {"": ["output_1", "f_0"],
 "super": "Closure",
 call$1: function(element) {
  var t1;
  if (this.f_0.call$1(element) === true) {
    t1 = this.output_1;
    $.getInterceptor(t1).add$1(t1, element);
  }
}
};

$$.FilteredElementList_removeRange_anon = {
 "super": "Closure",
 call$1: function(el) {
  return el.remove$0();
}
};

$$.DoubleLinkedQueue_length_anon = {"": ["box_0"],
 "super": "Closure",
 call$1: function(element) {
  var t1 = this.box_0;
  t1.counter_1 = $.add(t1.counter_1, 1);
}
};

$$._LinkedHashMapImpl_forEach_anon = {"": ["f_0"],
 "super": "Closure",
 call$1: function(entry) {
  this.f_0.call$2(entry.get$key(), entry.get$value());
}
};

$$.NoSuchMethodError_toString_anon = {"": ["box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1, t2;
  t1 = this.box_0;
  if ($.gtB(t1.i_2, 0)) {
    t2 = t1.sb_1;
    $.getInterceptor(t2).add$1(t2, ", ");
  }
  t2 = t1.sb_1;
  $.getInterceptor(t2).add$1(t2, key);
  t2 = t1.sb_1;
  $.getInterceptor(t2).add$1(t2, ": ");
  t2 = t1.sb_1;
  $.getInterceptor(t2).add$1(t2, $.Error_safeToString(value));
  t1.i_2 = $.add(t1.i_2, 1);
}
};

$$.CssClassSet_clear_anon = {
 "super": "Closure",
 call$1: function(s) {
  return $.getInterceptor(s).clear$0(s);
}
};

$$._HashSetImpl_filter_anon = {"": ["f_1", "result_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1;
  if (this.f_1.call$1(key) === true) {
    t1 = this.result_0;
    $.getInterceptor(t1).add$1(t1, key);
  }
}
};

$$._HashSetImpl_forEach_anon = {"": ["f_0"],
 "super": "Closure",
 call$2: function(key, value) {
  this.f_0.call$1(key);
}
};

$$._HashSetImpl_addAll_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(value) {
  $.indexSet(this.this_0.get$_backingMap(), value, value);
}
};

$$.CssClassSet_addAll_anon = {"": ["collection_0"],
 "super": "Closure",
 call$1: function(s) {
  return $.getInterceptor(s).addAll$1(s, this.collection_0);
}
};

$$.CssClassSet_add_anon = {"": ["value_0"],
 "super": "Closure",
 call$1: function(s) {
  return $.getInterceptor(s).add$1(s, this.value_0);
}
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"": ["copies_3", "values_2"],
 "super": "Closure",
 call$1: function(value) {
  var t1, length$, i, t2;
  t1 = this.values_2;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.call$1$bailout0(1, value, t1);
  length$ = t1.length;
  for (i = 0; i < length$; ++i) {
    t2 = t1[i];
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  $.getInterceptor(t1).add$1(t1, value);
  t1 = this.copies_3;
  $.getInterceptor(t1).add$1(t1, null);
  return length$;
},
 call$1$bailout0: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      t1 = env1;
      value = env0;
      break;
    case 2:
      length$ = env2;
      t1 = env1;
      value = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.values_2;
    case 1:
      state0 = 0;
      length$ = $.getInterceptor(t1).get$length(t1);
    case 2:
      var t1, value, length$, i, t2;
      state0 = 0;
      for (i = 0; $.ltB(i, length$); ++i) {
        t2 = $.index(t1, i);
        if (t2 == null ? value == null : t2 === value)
          return i;
      }
      $.getInterceptor(t1).add$1(t1, value);
      t1 = this.copies_3;
      $.getInterceptor(t1).add$1(t1, null);
      return length$;
  }
}
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"": ["copies_4"],
 "super": "Closure",
 call$1: function(i) {
  return $.index(this.copies_4, i);
}
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"": ["copies_5"],
 "super": "Closure",
 call$2: function(i, x) {
  $.indexSet(this.copies_5, i, x);
}
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {
 "super": "Closure",
 call$0: function() {
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"": ["writeSlot_8", "readSlot_7", "findSlot_6"],
 "super": "Closure",
 call$1: function(e) {
  var t1, slot, t2, length$, copy, t3, i, element, elementCopy, copy0, j, t4;
  t1 = {};
  if (e == null)
    return e;
  if (typeof e === 'boolean')
    return e;
  if (typeof e === 'number')
    return e;
  if (typeof e === 'string')
    return e;
  if (typeof e === 'object' && e !== null && !!e.is$Date)
    throw $.$$throw($.UnimplementedError$("structured clone of Date"));
  if (typeof e === 'object' && e !== null && !!e.is$RegExp)
    throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
  if (typeof e === 'object' && e !== null && e.is$File())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Blob())
    return e;
  if (typeof e === 'object' && e !== null && e.is$_FileList())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ImageData())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Map()) {
    slot = this.findSlot_6.call$1(e);
    t1.copy_1 = this.readSlot_7.call$1(slot);
    t2 = t1.copy_1;
    if (!(t2 == null))
      return t2;
    t1.copy_1 = {};
    this.writeSlot_8.call$2(slot, t1.copy_1);
    $.getInterceptor(e).forEach$1(e, new $._convertDartToNative_PrepareForStructuredClone_walk_anon(this, t1));
    return t1.copy_1;
  }
  if (typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List())) {
    if (typeof e !== 'object' || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(1, e);
    length$ = e.length;
    slot = this.findSlot_6.call$1(e);
    t2 = this.readSlot_7;
    copy = t2.call$1(slot);
    if (!(copy == null)) {
      if (true === copy) {
        copy = new Array(length$);
        this.writeSlot_8.call$2(slot, copy);
      }
      return copy;
    }
    t1 = e instanceof Array && !!!(e.immutable$list);
    t3 = this.writeSlot_8;
    if (t1) {
      t3.call$2(slot, true);
      for (i = 0; i < length$; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        element = e[i];
        elementCopy = this.call$1(element);
        if (!(elementCopy == null ? element == null : elementCopy === element)) {
          copy0 = t2.call$1(slot);
          if (true === copy0) {
            copy0 = new Array(length$);
            t3.call$2(slot, copy0);
          }
          if (typeof copy0 !== 'object' || copy0 === null || (copy0.constructor !== Array || !!copy0.immutable$list) && !copy0.is$JavaScriptIndexingBehavior())
            return this.call$1$bailout(3, e, t3, elementCopy, length$, copy0, slot, i, copy, t2);
          for (t1 = e.length, t2 = copy0.length, j = 0; j < i; ++j) {
            if (j >= t1)
              throw $.ioore(j);
            t4 = e[j];
            if (j >= t2)
              throw $.ioore(j);
            copy0[j] = t4;
          }
          if (i >= t2)
            throw $.ioore(i);
          copy0[i] = elementCopy;
          ++i;
          copy = copy0;
          break;
        }
      }
      if (copy == null) {
        t3.call$2(slot, e);
        copy = e;
      }
    } else {
      copy = new Array(length$);
      t3.call$2(slot, copy);
      i = 0;
    }
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(4, e, length$, copy, i);
    for (; i < length$; ++i) {
      if (i >= e.length)
        throw $.ioore(i);
      t1 = this.call$1(e[i]);
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t1;
    }
    return copy;
  }
  throw $.$$throw($.UnimplementedError$("structured clone of other type"));
},
 call$1$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7, env8) {
  switch (state0) {
    case 1:
      e = env0;
      break;
    case 2:
      length$ = env1;
      e = env0;
      break;
    case 3:
      t3 = env8;
      copy = env7;
      i = env6;
      slot = env5;
      copy0 = env4;
      length$ = env3;
      elementCopy = env2;
      t2 = env1;
      e = env0;
      break;
    case 4:
      i = env3;
      copy = env2;
      length$ = env1;
      e = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
      if (e == null)
        return e;
      if (typeof e === 'boolean')
        return e;
      if (typeof e === 'number')
        return e;
      if (typeof e === 'string')
        return e;
      if (typeof e === 'object' && e !== null && !!e.is$Date)
        throw $.$$throw($.UnimplementedError$("structured clone of Date"));
      if (typeof e === 'object' && e !== null && !!e.is$RegExp)
        throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
      if (typeof e === 'object' && e !== null && e.is$File())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Blob())
        return e;
      if (typeof e === 'object' && e !== null && e.is$_FileList())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ImageData())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Map()) {
        slot = this.findSlot_6.call$1(e);
        t1.copy_1 = this.readSlot_7.call$1(slot);
        t2 = t1.copy_1;
        if (!(t2 == null))
          return t2;
        t1.copy_1 = {};
        this.writeSlot_8.call$2(slot, t1.copy_1);
        $.getInterceptor(e).forEach$1(e, new $._convertDartToNative_PrepareForStructuredClone_walk_anon(this, t1));
        return t1.copy_1;
      }
    default:
      var t1, slot, t2, e, length$, t3, copy, i, element, elementCopy, copy0, j;
      if (state0 === 4 || state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List()))
        switch (state0) {
          case 0:
          case 1:
            state0 = 0;
            length$ = $.getInterceptor(e).get$length(e);
          case 2:
            state0 = 0;
            slot = this.findSlot_6.call$1(e);
            t3 = this.readSlot_7;
            copy = t3.call$1(slot);
            if (!(copy == null)) {
              if (true === copy) {
                copy = new Array(length$);
                this.writeSlot_8.call$2(slot, copy);
              }
              return copy;
            }
            t1 = e instanceof Array && !!!(e.immutable$list);
            t2 = this.writeSlot_8;
          case 3:
            if (state0 === 3 || state0 === 0 && t1)
              switch (state0) {
                case 0:
                  t2.call$2(slot, true);
                  i = 0;
                case 3:
                  L0:
                    while (true)
                      switch (state0) {
                        case 0:
                          if (!$.ltB(i, length$))
                            break L0;
                          element = $.index(e, i);
                          elementCopy = this.call$1(element);
                        case 3:
                          if (state0 === 3 || state0 === 0 && !(elementCopy == null ? element == null : elementCopy === element))
                            switch (state0) {
                              case 0:
                                copy0 = t3.call$1(slot);
                                if (true === copy0) {
                                  copy0 = new Array(length$);
                                  t2.call$2(slot, copy0);
                                }
                              case 3:
                                state0 = 0;
                                for (j = 0; j < i; ++j)
                                  $.indexSet(copy0, j, $.index(e, j));
                                $.indexSet(copy0, i, elementCopy);
                                ++i;
                                copy = copy0;
                                break L0;
                            }
                          ++i;
                      }
                  if (copy == null) {
                    t2.call$2(slot, e);
                    copy = e;
                  }
              }
            else {
              copy = new Array(length$);
              t2.call$2(slot, copy);
              i = 0;
            }
          case 4:
            state0 = 0;
            for (; $.ltB(i, length$); ++i)
              $.indexSet(copy, i, this.call$1($.index(e, i)));
            return copy;
        }
      throw $.$$throw($.UnimplementedError$("structured clone of other type"));
  }
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {"": ["walk_9", "box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  this.box_0.copy_1[key] = this.walk_9.call$1(value);
}
};

$$.SingleSelect__makeButton_anon = {"": ["this_1", "number_0"],
 "super": "Closure",
 call$1: function(event$) {
  return this.this_1.setAnswer$1(this.number_0);
}
};

$$.ConstantMap_forEach_anon = {"": ["this_1", "f_0"],
 "super": "Closure",
 call$1: function(key) {
  return this.f_0.call$2(key, $.index(this.this_1, key));
}
};

$$.ConstantMap_containsValue_anon = {"": ["needle_0"],
 "super": "Closure",
 call$1: function(value) {
  return $.eq(value, this.needle_0);
}
};

$$._HashMapImpl_keys_anon = {"": ["box_0", "list_2"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.i_1;
  t2.i_1 = $.add(t3, 1);
  $.indexSet(t1, t3, key);
}
};

$$.ConstantMap_values_anon = {"": ["this_1", "result_0"],
 "super": "Closure",
 call$1: function(key) {
  var t1 = this.result_0;
  return $.getInterceptor(t1).add$1(t1, $.index(this.this_1, key));
}
};

$$.MultipleSelect__makeButton_anon = {"": ["number_1", "this_0"],
 "super": "Closure",
 call$1: function(event$) {
  return this.this_0.toggleAnswer$1(this.number_1);
}
};

$$.Storage_containsValue_anon = {"": ["value_0"],
 "super": "Closure",
 call$1: function(e) {
  return $.eq(e, this.value_0);
}
};

$$.Storage_values_anon = {"": ["values_0"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1 = this.values_0;
  return $.getInterceptor(t1).add$1(t1, v);
}
};

$$._LinkedHashMapImpl_containsValue_anon = {"": ["value_0"],
 "super": "Closure",
 call$1: function(entry) {
  return $.eq(entry.get$value(), this.value_0);
}
};

$$.XmlParser__parseTextNode_writeStringNode = {"": ["box_0", "this_2"],
 "super": "Closure",
 call$0: function() {
  var t1, t2, string;
  t1 = this.box_0;
  t2 = t1.s_1;
  string = $.getInterceptor(t2).toString$0(t2);
  if ($.getInterceptor(string).get$isEmpty(string) !== true) {
    t2 = this.this_2.get$_scopes();
    t2 = $.getInterceptor(t2).get$first(t2);
    t1 = t1.s_1;
    t2.addChild$1($.XmlText$($.getInterceptor(t1).toString$0(t1)));
  }
}
};

$$.XmlNode__stringifyInternal_anon = {"": ["b_0"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1, t2, t3;
  t1 = this.b_0;
  t2 = $.getInterceptor(t1);
  t3 = $.XmlNamespace$(k, v);
  return t2.add$1(t1, $.getInterceptor(t3).toString$0(t3));
}
};

$$.XmlNode__stringifyInternal_anon0 = {"": ["b_1"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1, t2, t3;
  t1 = this.b_1;
  t2 = $.getInterceptor(t1);
  t3 = $.XmlAttribute$(k, v);
  return t2.add$1(t1, $.getInterceptor(t3).toString$0(t3));
}
};

$$.XmlCollection__queryAllNamesInternal_anon = {
 "super": "Closure",
 call$1: function(el) {
  return typeof el === 'object' && el !== null && !!el.is$XmlElement;
}
};

$$.XmlCollection__queryAllNamesInternal_anon0 = {"": ["list_1", "tagName_0"],
 "super": "Closure",
 call$1: function(el) {
  el._queryAllNamesInternal$2(this.tagName_0, this.list_1);
}
};

$$.XmlElement__queryAllNamesInternal_anon = {
 "super": "Closure",
 call$1: function(el) {
  return typeof el === 'object' && el !== null && !!el.is$XmlElement;
}
};

$$.XmlElement__queryAllNamesInternal_anon0 = {"": ["list_1", "tagName_0"],
 "super": "Closure",
 call$1: function(el) {
  el._queryAllNamesInternal$2(this.tagName_0, this.list_1);
}
};

$$.XmlCollection_allElements_anon = {
 "super": "Closure",
 call$1: function(n) {
  return typeof n === 'object' && n !== null && !!n.is$XmlElement;
}
};

$$.XmlCollection__queryAttributeInternal_checkAttribs = {"": ["aMap_3", "n_2"],
 "super": "Closure",
 call$0: function() {
  var t1, t2;
  t1 = {};
  t1.succeed_10 = true;
  t2 = this.aMap_3;
  $.getInterceptor(t2).forEach$1(t2, new $.XmlCollection__queryAttributeInternal_checkAttribs_anon(t1, this.n_2));
  return t1.succeed_10;
}
};

$$.XmlCollection__queryAttributeInternal_checkAttribs_anon = {"": ["box_0", "n_4"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1 = this.box_0;
  if (t1.succeed_10 === true && this.n_4.get$attributes().containsKey$1(k) === true) {
    if (!$.eqB($.index(this.n_4.get$attributes(), k), v))
      t1.succeed_10 = false;
  } else
    t1.succeed_10 = false;
}
};

$$.XmlCollection__queryAttributeInternal_anon = {"": ["aMap_6", "list_5"],
 "super": "Closure",
 call$1: function(el) {
  var t1 = this.list_5;
  if ($.getInterceptor(t1).get$isEmpty(t1) !== true)
    return;
  $.propertyTypeCast(el, 'is$XmlElement')._queryAttributeInternal$2(this.aMap_6, t1);
}
};

$$.XmlElement__queryAttributeInternal_checkAttribs = {"": ["this_3", "aMap_2"],
 "super": "Closure",
 call$0: function() {
  var t1, t2;
  t1 = {};
  t1.succeed_1 = true;
  t2 = this.aMap_2;
  $.getInterceptor(t2).forEach$1(t2, new $.XmlElement__queryAttributeInternal_checkAttribs_anon(this.this_3, t1));
  return t1.succeed_1;
}
};

$$.XmlElement__queryAttributeInternal_checkAttribs_anon = {"": ["this_4", "box_0"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1 = this.box_0;
  if (t1.succeed_1 === true && this.this_4.get$attributes().containsKey$1(k) === true) {
    if (!$.eqB($.index(this.this_4.get$attributes(), k), v))
      t1.succeed_1 = false;
  } else
    t1.succeed_1 = false;
}
};

$$.XmlElement__queryAttributeInternal_anon = {"": ["list_6", "aMap_5"],
 "super": "Closure",
 call$1: function(el) {
  var t1 = this.list_6;
  if ($.getInterceptor(t1).get$isEmpty(t1) !== true)
    return;
  el._queryAttributeInternal$2(this.aMap_5, t1);
}
};

$$.XmlCollection__queryNodeTypeInternal_anon = {"": ["list_1", "nodeType_0"],
 "super": "Closure",
 call$1: function(el) {
  var t1 = this.list_1;
  if ($.getInterceptor(t1).get$isEmpty(t1) !== true)
    return;
  if (typeof el === 'object' && el !== null && !!el.is$XmlElement)
    el._queryNodeTypeInternal$2(this.nodeType_0, t1);
  else if ($.eqB(el.get$type(), this.nodeType_0)) {
    t1._add$1(el);
    return;
  }
}
};

$$.XmlElement__queryNodeTypeInternal_anon = {"": ["list_1", "nodeType_0"],
 "super": "Closure",
 call$1: function(el) {
  var t1 = this.list_1;
  if ($.getInterceptor(t1).get$isEmpty(t1) !== true)
    return;
  if (typeof el === 'object' && el !== null && !!el.is$XmlElement)
    el._queryNodeTypeInternal$2(this.nodeType_0, t1);
  else if ($.eqB(el.get$type(), this.nodeType_0)) {
    t1._add$1(el);
    return;
  }
}
};

$$.XmlCollection__queryNameInternal_anon = {"": ["list_1", "tagName_0"],
 "super": "Closure",
 call$1: function(el) {
  var t1 = this.list_1;
  if ($.getInterceptor(t1).get$isEmpty(t1) !== true)
    return;
  el._queryNameInternal$2(this.tagName_0, t1);
}
};

$$.XmlElement__queryNameInternal_anon = {"": ["list_1", "tagName_0"],
 "super": "Closure",
 call$1: function(el) {
  var t1 = this.list_1;
  if ($.getInterceptor(t1).get$isEmpty(t1) !== true)
    return;
  el._queryNameInternal$2(this.tagName_0, t1);
}
};

$$.XmlElement_addChildren_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0.addChild$1(e);
}
};

$$.XmlTokenizer__next_addToQueue = {"": ["this_0"],
 "super": "Closure",
 call$1: function(token) {
  var t1 = this.this_0;
  token.set$_location(t1.get$_i());
  t1 = t1.get$_liblib3$_buffer();
  $.getInterceptor(t1).addLast$1(t1, token);
}
};

$$.XmlTokenizer__next_getNextToken = {"": ["this_1"],
 "super": "Closure",
 call$0: function() {
  var t1, t2;
  t1 = this.this_1;
  t2 = t1.get$_liblib3$_buffer();
  return $.getInterceptor(t2).get$isEmpty(t2) === true ? null : t1.get$_liblib3$_buffer().removeFirst$0();
}
};

$$.XmlTokenizer__next_peekUntil = {"": ["this_2"],
 "super": "Closure",
 call$1: function(chars) {
  var t1, z, t2, t3;
  t1 = this.this_2;
  z = t1.get$_i();
  if (typeof z !== 'number')
    return this.call$1$bailout4(1, chars, t1, z);
  for (; t2 = $.getInterceptor(chars), t3 = t1.get$_xml(), $.eqB(t2.indexOf$1(chars, $.getInterceptor(t3).charCodeAt$1(t3, z)), -1);) {
    ++z;
    if ($.geB(z, t1.get$_liblib3$_length()))
      break;
  }
  if ($.geB(z, t1.get$_liblib3$_length()))
    return -1;
  t1 = t1.get$_xml();
  return $.getInterceptor(t1).charCodeAt$1(t1, z);
},
 call$1$bailout4: function(state0, chars, t1, z) {
  var t2, t3;
  for (; t2 = $.getInterceptor(chars), t3 = t1.get$_xml(), $.eqB(t2.indexOf$1(chars, $.getInterceptor(t3).charCodeAt$1(t3, z)), -1);) {
    z = $.add(z, 1);
    if ($.geB(z, t1.get$_liblib3$_length()))
      break;
  }
  if ($.geB(z, t1.get$_liblib3$_length()))
    return -1;
  t1 = t1.get$_xml();
  return $.getInterceptor(t1).charCodeAt$1(t1, z);
}
};

$$.XmlTokenizer__next_matchWord = {"": ["this_3"],
 "super": "Closure",
 call$1: function(word) {
  var t1, z, ii, t2;
  t1 = this.this_3;
  z = t1.get$_i();
  if (typeof z !== 'number')
    return this.call$1$bailout3(1, word, t1, z);
  for (ii = 0; $.ltB(ii, $.getInterceptor(word).get$length(word)); ++ii) {
    t2 = t1.get$_xml();
    if (!$.eqB($.getInterceptor(t2).charCodeAt$1(t2, z), $.getInterceptor(word).charCodeAt$1(word, ii)))
      return -1;
    ++z;
  }
  return z - 1;
},
 call$1$bailout3: function(state0, word, t1, z) {
  var ii, t2;
  for (ii = 0; $.ltB(ii, $.getInterceptor(word).get$length(word)); ++ii) {
    t2 = t1.get$_xml();
    if (!$.eqB($.getInterceptor(t2).charCodeAt$1(t2, z), $.getInterceptor(word).charCodeAt$1(word, ii)))
      return -1;
    z = $.add(z, 1);
  }
  return $.sub(z, 1);
}
};

$$.XmlTokenizer__next_nextNonWhitespace = {"": ["this_4"],
 "super": "Closure",
 call$1: function(from) {
  var t1;
  if (typeof from !== 'number')
    return this.call$1$bailout2(1, from);
  for (; t1 = this.this_4.get$_xml(), t1 = $.getInterceptor(t1).charCodeAt$1(t1, from), $.geB($.getInterceptor($.CTC24).indexOf$1($.CTC24, t1), 0);)
    ++from;
  return from;
},
 call$1$bailout2: function(state0, from) {
  var t1;
  for (; t1 = this.this_4.get$_xml(), t1 = $.getInterceptor(t1).charCodeAt$1(t1, from), $.geB($.getInterceptor($.CTC24).indexOf$1($.CTC24, t1), 0);)
    from = $.add(from, 1);
  return from;
}
};

$$.XmlTokenizer__next_nextWhitespace = {"": ["this_5"],
 "super": "Closure",
 call$1: function(from) {
  var t1;
  if (typeof from !== 'number')
    return this.call$1$bailout1(1, from);
  for (; t1 = this.this_5.get$_xml(), t1 = $.getInterceptor(t1).charCodeAt$1(t1, from), !$.geB($.getInterceptor($.CTC24).indexOf$1($.CTC24, t1), 0);)
    ++from;
  return from;
},
 call$1$bailout1: function(state0, from) {
  var t1;
  for (; t1 = this.this_5.get$_xml(), t1 = $.getInterceptor(t1).charCodeAt$1(t1, from), !$.geB($.getInterceptor($.CTC24).indexOf$1($.CTC24, t1), 0);)
    from = $.add(from, 1);
  return from;
}
};

$$.XmlParser__parseAttribute_setAttribute = {"": ["el_3"],
 "super": "Closure",
 call$2: function(name$, value) {
  var t1, t2;
  t1 = $.eqB(name$, "xmlns");
  t2 = this.el_3;
  if (t1)
    $.indexSet(t2.get$namespaces(), "", value);
  else
    $.indexSet(t2.get$attributes(), name$, value);
}
};

$$.XmlParser__parseAttribute_quotesRequired = {"": ["box_0", "t_6", "setAttribute_5", "this_4"],
 "super": "Closure",
 call$0: function() {
  var t1, t2, s, qkind;
  t1 = this.this_4;
  t2 = this.box_0;
  t1._assertKind$3(t2.next_2, 9, "Quotes are required around attribute values.");
  s = $.StringBuffer_StringBuffer("");
  qkind = t2.next_2.get$quoteKind();
  if (typeof qkind !== 'number')
    return this.call$0$bailout(1, s, t2, qkind);
  do {
    t2.next_2 = this.t_6.next$0();
    t1 = t2.next_2;
    if (t1 == null)
      throw $.$$throw($.CTC14);
    if (!$.eqB(t1.get$kind(), 9))
      $.getInterceptor(s).add$1(s, t2.next_2.toStringLiteral$0());
    else if (!$.eqB(t2.next_2.get$quoteKind(), qkind))
      $.getInterceptor(s).add$1(s, t2.next_2.toStringLiteral$0());
    else
      qkind = -1;
  } while (!(qkind === -1));
  this.setAttribute_5.call$2(t2.attributeName_1, $.getInterceptor(s).toString$0(s));
},
 call$0$bailout: function(state0, s, t2, qkind) {
  var t1;
  do {
    t2.next_2 = this.t_6.next$0();
    t1 = t2.next_2;
    if (t1 == null)
      throw $.$$throw($.CTC14);
    if (!$.eqB(t1.get$kind(), 9))
      $.getInterceptor(s).add$1(s, t2.next_2.toStringLiteral$0());
    else if (!$.eqB(t2.next_2.get$quoteKind(), qkind))
      $.getInterceptor(s).add$1(s, t2.next_2.toStringLiteral$0());
    else
      qkind = -1;
  } while (!$.eqB(qkind, -1));
  this.setAttribute_5.call$2(t2.attributeName_1, $.getInterceptor(s).toString$0(s));
}
};

$$.XmlParser__parseNamespace_setNamespace = {"": ["el_2"],
 "super": "Closure",
 call$2: function(name$, uri) {
  $.indexSet(this.el_2.get$namespaces(), name$, uri);
}
};

$$.XmlParser__parseNamespace_quotesRequired = {"": ["this_6", "name_5", "t_4", "box_0", "setNamespace_3"],
 "super": "Closure",
 call$0: function() {
  var t1, t2, s, qkind;
  t1 = this.this_6;
  t2 = this.box_0;
  t1._assertKind$3(t2.next_1, 9, "Quotes are required around attribute values.");
  s = $.StringBuffer_StringBuffer("");
  qkind = t2.next_1.get$quoteKind();
  if (typeof qkind !== 'number')
    return this.call$0$bailout0(1, s, t2, qkind);
  do {
    t2.next_1 = this.t_4.next$0();
    t1 = t2.next_1;
    if (t1 == null)
      throw $.$$throw($.CTC14);
    if (!$.eqB(t1.get$kind(), 9))
      $.getInterceptor(s).add$1(s, t2.next_1.toStringLiteral$0());
    else if (!$.eqB(t2.next_1.get$quoteKind(), qkind))
      $.getInterceptor(s).add$1(s, t2.next_1.toStringLiteral$0());
    else
      qkind = -1;
  } while (!(qkind === -1));
  this.setNamespace_3.call$2(this.name_5, $.getInterceptor(s).toString$0(s));
},
 call$0$bailout0: function(state0, s, t2, qkind) {
  var t1;
  do {
    t2.next_1 = this.t_4.next$0();
    t1 = t2.next_1;
    if (t1 == null)
      throw $.$$throw($.CTC14);
    if (!$.eqB(t1.get$kind(), 9))
      $.getInterceptor(s).add$1(s, t2.next_1.toStringLiteral$0());
    else if (!$.eqB(t2.next_1.get$quoteKind(), qkind))
      $.getInterceptor(s).add$1(s, t2.next_1.toStringLiteral$0());
    else
      qkind = -1;
  } while (!$.eqB(qkind, -1));
  this.setNamespace_3.call$2(this.name_5, $.getInterceptor(s).toString$0(s));
}
};

$$.XmlElement_isNamespaceInScope_anon = {"": ["namespace_0"],
 "super": "Closure",
 call$1: function(ns) {
  return $.eq(ns.get$name(), this.namespace_0);
}
};

$$.XmlElement_namespacesInScope_anon = {"": ["l_0"],
 "super": "Closure",
 call$2: function(nname, uri) {
  var t1 = this.l_0;
  $.getInterceptor(t1).add$1(t1, $.XmlNamespace$(nname, uri));
}
};

$$.XmlElement_text_anon = {
 "super": "Closure",
 call$1: function(el) {
  return typeof el === 'object' && el !== null && !!el.is$XmlText;
}
};

$$.XmlElement_text_anon0 = {"": ["s_0"],
 "super": "Closure",
 call$1: function(n) {
  var t1 = this.s_0;
  return $.getInterceptor(t1).add$1(t1, n.get$text());
}
};

$$.addSplash_anon = {
 "super": "Closure",
 call$1: function(event$) {
  return $.startTest();
}
};

$$.startTest_anon = {
 "super": "Closure",
 call$0: function() {
  $.nextQuestion();
  $.scriptButton();
}
};

$$.scriptButton_anon = {
 "super": "Closure",
 call$1: function(event$) {
  if ($.get$test().get$currentSection().get$atSummary() === true)
    $.query("#summary" + $.S($.get$test().get$currentSection().get$star())).get$style().set$visibility("visible");
  $.get$slideshow().get$cam().move$7($.camTransDuration, $.camX, $.camY, $.camZ, $.camXr, $.camYr, $.camZr);
  $.nextQuestion();
}
};

$$.scriptButton_anon0 = {
 "super": "Closure",
 call$1: function(event$) {
  $.hideButtons();
  $.displaySectionExplanation();
}
};

$$.scriptButton_anon1 = {
 "super": "Closure",
 call$1: function(event$) {
  var summaryId, summaryDiv;
  $.hideButtons();
  $.enableSummaryButtons();
  summaryId = "#summary" + $.S($.get$test().get$currentSection().get$star());
  $.query("#explainSection");
  summaryDiv = $.query(summaryId);
  summaryDiv.get$style().set$visibility("visible");
  $.addSlideToMap(summaryDiv);
  $.get$slideshow().get$cam().move$7($.camTransDuration, $.camX, $.camY, $.camZ, $.camXr, $.camYr, $.camZr);
  $.get$slideshow().next$0();
}
};

$$.scriptButton_anon2 = {
 "super": "Closure",
 call$1: function(event$) {
  var finalSection, buttonLink, buttonContent, button, buttonUrl, slide;
  $.hideButtons();
  finalSection = $.query("#finalSection");
  buttonLink = $.query("#buttonLink");
  buttonContent = $.query(".buttonContent");
  button = $.ImageElement_ImageElement(null, null, null);
  button.set$id("button");
  button.set$src("images/badge.png");
  buttonContent.insertAdjacentHTML$2("afterBegin", "<a href='report.html'><img src='images/badge.png' alt='Agile Fluency Assessment Report'/></a>");
  $.SpanElement_SpanElement();
  buttonUrl = $.query(".buttonUrl");
  buttonUrl.insertAdjacentText$2("afterBegin", "<a href='report.html'><img src='http://labs.catalystsolves.com/Projects/AgileFluency/images/badge.png' alt='Agile Fluency Assessment Report'/></a>");
  buttonLink.insertAdjacentElement$2("afterBegin", buttonUrl);
  slide = $.get$slideshow().addElementSlide$8(finalSection, 1, 0, 0, 0, 0, 0, 0);
  $.get$slideshow().get$cam().lookAtSlide$2(slide, 1);
  $.get$slideshow().next$0();
}
};

$$.getStamp_anon = {"": ["stamp_1", "number_0"],
 "super": "Closure",
 call$0: function() {
  var t1, t2;
  t1 = "stamp" + $.S(this.number_0) + "Placed";
  t2 = this.stamp_1;
  t2.set$id(t1);
  t1 = $.get$stampsEarned();
  $.getInterceptor(t1).add$1(t1, t2);
}
};

$$._DateImpl_toString_fourDigits = {
 "super": "Closure",
 call$1: function(n) {
  var absN, sign;
  absN = $.getInterceptor(n).abs$0(n);
  sign = $.ltB(n, 0) ? "-" : "";
  if ($.geB(absN, 1000))
    return $.S(n);
  if ($.geB(absN, 100))
    return sign + "0" + $.S(absN);
  if ($.geB(absN, 10))
    return sign + "00" + $.S(absN);
  return sign + "000" + $.S(absN);
}
};

$$._DateImpl_toString_threeDigits = {
 "super": "Closure",
 call$1: function(n) {
  if ($.geB(n, 100))
    return $.S(n);
  if ($.geB(n, 10))
    return "0" + $.S(n);
  return "00" + $.S(n);
}
};

$$._DateImpl_toString_twoDigits = {
 "super": "Closure",
 call$1: function(n) {
  if ($.geB(n, 10))
    return $.S(n);
  return "0" + $.S(n);
}
};

$$.Answer_explain_anon = {"": ["output_1", "this_0"],
 "super": "Closure",
 call$1: function(event$) {
  var t1 = "<b>" + $.S(this.this_0.get$explanation()) + "</b>";
  this.output_1.set$innerHTML(t1);
  return t1;
}
};

$$.Answer_explain_anon0 = {"": ["output_3", "answerText_2"],
 "super": "Closure",
 call$1: function(event$) {
  var t1 = this.answerText_2;
  this.output_3.set$innerHTML(t1);
  return t1;
}
};

$$.Answer_explain_anon1 = {"": ["output_5", "this_4"],
 "super": "Closure",
 call$1: function(event$) {
  return this.output_5.insertAdjacentHTML$2("beforeEnd", "<b>" + $.S(this.this_4.get$explanation()) + "</b>");
}
};

$$.Answer_explain_anon2 = {"": ["output_7", "answerText_6"],
 "super": "Closure",
 call$1: function(event$) {
  var t1 = this.answerText_6;
  this.output_7.set$innerHTML(t1);
  return t1;
}
};

$$.Answer_toggleListener_anon = {"": ["button_2", "this_1", "modal_0"],
 "super": "Closure",
 call$1: function(event$) {
  return this.this_1.showModal$2(this.button_2, this.modal_0);
}
};

$$.Answer_toggleListener_anon0 = {"": ["button_5", "this_4", "modal_3"],
 "super": "Closure",
 call$1: function(event$) {
  return this.this_4.hideModal$2(this.button_5, this.modal_3);
}
};

$$.Answer_toggleListener_anon1 = {"": ["button_8", "this_7", "modal_6"],
 "super": "Closure",
 call$1: function(event$) {
  return this.this_7.toggleListener$3(3, this.button_8, this.modal_6);
}
};

$$._HttpRequestUtils_get_anon = {"": ["onSuccess_1", "request_0"],
 "super": "Closure",
 call$1: function(e) {
  var t1, t2;
  t1 = this.request_0;
  if ($.eqB(t1.get$readyState(), 4))
    t2 = $.eqB(t1.get$status(), 200) || $.eqB(t1.get$status(), 0);
  else
    t2 = false;
  if (t2)
    this.onSuccess_1.call$1(t1);
}
};

$$.startRootIsolate_anon = {
 "super": "Closure",
 call$0: function() {
  $._TimerFactory__factory = $._timerFactory;
  return;
}
};

$$._BaseSendPort_call_anon = {"": ["completer_1", "port_0"],
 "super": "Closure",
 call$2: function(value, ignoreReplyTo) {
  var t1, t2;
  this.port_0.close$0();
  t1 = typeof value === 'object' && value !== null && !!value.is$Exception;
  t2 = this.completer_1;
  if (t1)
    t2.completeException$1(value);
  else
    t2.complete$1(value);
}
};

$$._WorkerSendPort_send_anon = {"": ["replyTo_2", "message_1", "this_0"],
 "super": "Closure",
 call$0: function() {
  var t1, t2, workerMessage, t3;
  t1 = this.this_0;
  t2 = this.replyTo_2;
  t1._checkReplyTo$1(t2);
  workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
  t2 = $._globalState().get$isWorker() === true;
  t3 = $._globalState;
  if (t2)
    t3().get$mainManager().postMessage$1(workerMessage);
  else
    $.index(t3().get$managers(), t1.get$_workerId()).postMessage$1(workerMessage);
}
};

$$._waitForPendingPorts_anon = {"": ["callback_0"],
 "super": "Closure",
 call$1: function(_) {
  return this.callback_0.call$0();
}
};

$$.Futures_wait_anon = {"": ["pos_5", "box_0", "completer_4", "values_3", "result_2"],
 "super": "Closure",
 call$1: function(value) {
  var t1, t2, remaining;
  t1 = this.values_3;
  $.indexSet(t1, this.pos_5, value);
  t2 = this.box_0;
  remaining = $.sub(t2.remaining_1, 1);
  t2.remaining_1 = remaining;
  if ($.eqB(remaining, 0) && this.result_2.get$isComplete() !== true)
    this.completer_4.complete$1(t1);
}
};

$$.Futures_wait_anon0 = {"": ["result_8", "completer_7", "future_6"],
 "super": "Closure",
 call$1: function(exception) {
  if (this.result_8.get$isComplete() !== true)
    this.completer_7.completeException$2(exception, this.future_6.get$stackTrace());
  return true;
}
};

$$._PendingSendPortFinder_visitMap_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0._dispatch$1(e);
}
};

$$._LinkedHashMapImpl_values_anon = {"": ["box_0", "list_2"],
 "super": "Closure",
 call$1: function(entry) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.index_1;
  t2.index_1 = $.add(t3, 1);
  $.indexSet(t1, t3, entry.get$value());
}
};

$$._HashMapImpl_values_anon = {"": ["box_0", "list_2"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.i_10;
  t2.i_10 = $.add(t3, 1);
  $.indexSet(t1, t3, value);
}
};

$$._PendingSendPortFinder_visitList_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0._dispatch$1(e);
}
};

$$._NativeJsSendPort_send_anon = {"": ["this_5", "replyTo_4", "message_3"],
 "super": "Closure",
 call$0: function() {
  var t1, t2, t3, isolate, shouldSerialize, msg;
  t1 = {};
  t2 = this.this_5;
  t3 = this.replyTo_4;
  t2._checkReplyTo$1(t3);
  isolate = $.index($._globalState().get$isolates(), t2.get$_isolateId());
  if (isolate == null)
    return;
  if (t2.get$_receivePort().get$_callback() == null)
    return;
  shouldSerialize = !($._globalState().get$currentContext() == null) && !$.eqB($._globalState().get$currentContext().get$id(), t2.get$_isolateId());
  msg = this.message_3;
  t1.msg_1 = msg;
  t1.reply_2 = t3;
  if (shouldSerialize) {
    t1.msg_1 = $._serializeMessage(t1.msg_1);
    t1.reply_2 = $._serializeMessage(t1.reply_2);
  }
  $._globalState().get$topEventLoop().enqueue$3(isolate, new $._NativeJsSendPort_send__anon(t2, t1, shouldSerialize), "receive " + $.S(msg));
}
};

$$._NativeJsSendPort_send__anon = {"": ["this_7", "box_0", "shouldSerialize_6"],
 "super": "Closure",
 call$0: function() {
  var t1, t2;
  t1 = this.this_7;
  if (!(t1.get$_receivePort().get$_callback() == null)) {
    if (this.shouldSerialize_6 === true) {
      t2 = this.box_0;
      t2.msg_1 = $._deserializeMessage(t2.msg_1);
      t2.reply_2 = $._deserializeMessage(t2.reply_2);
    }
    t1 = t1.get$_receivePort();
    t2 = this.box_0;
    t1._callback$2(t2.msg_1, t2.reply_2);
  }
}
};

$$.Storage_keys_anon = {"": ["keys_0"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1 = this.keys_0;
  return $.getInterceptor(t1).add$1(t1, k);
}
};

$$._LinkedHashMapImpl_keys_anon = {"": ["list_2", "box_0"],
 "super": "Closure",
 call$1: function(entry) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.index_10;
  t2.index_10 = $.add(t3, 1);
  $.indexSet(t1, t3, entry.get$key());
}
};

$$._Copier_visitMap_anon = {"": ["this_2", "box_0"],
 "super": "Closure",
 call$2: function(key, val) {
  var t1, t2;
  t1 = this.box_0.copy_10;
  t2 = this.this_2;
  $.indexSet(t1, t2._dispatch$1(key), t2._dispatch$1(val));
}
};

$$._EventLoop__runHelper_next = {"": ["this_0"],
 "super": "Closure",
 call$0: function() {
  if (this.this_0.runIteration$0() !== true)
    return;
  $._window().setTimeout$2(this, 0);
}
};

$$.anon = {"": ["this_1", "callback_0"],
 "super": "Closure",
 call$0: function() {
  return this.callback_0.call$1(this.this_1);
}
};

$$.anon0 = {"": ["this_1", "callback_0"],
 "super": "Closure",
 call$0: function() {
  return this.callback_0.call$1(this.this_1);
}
};

$$.BoundClosure = {'':
['self', 'target'],
'super': 'Closure',
call$3: function(p0, p1, p2) { return this.self[this.target](p0, p1, p2); }
};
$$.BoundClosure0 = {'':
['self', 'target'],
'super': 'Closure',
call$2: function(p0, p1) { return this.self[this.target](p0, p1); }
};
$$.BoundClosure1 = {'':
['self', 'target'],
'super': 'Closure',
call$0: function() { return this.self[this.target](); }
};
$$.BoundClosure2 = {'':
['self', 'target'],
'super': 'Closure',
call$1: function(p0) { return this.self[this.target](p0); }
};
$.add = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a + b : $.add$slow(a, b);
};

$.sub = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a - b : $.sub$slow(a, b);
};

$.div = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a / b : $.div$slow(a, b);
};

$.mul = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a * b : $.mul$slow(a, b);
};

$.gt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b);
};

$.ge = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a >= b : $.ge$slow(a, b);
};

$.lt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b);
};

$.gtB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b) === true;
};

$.geB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a >= b : $.ge$slow(a, b) === true;
};

$.ltB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b) === true;
};

$.index = function(a, index) {
  var key;
  if (typeof a == "string" || a.constructor === Array) {
    key = index >>> 0;
    if (key === index && key < a.length)
      return a[key];
  }
  return $.index$slow(a, index);
};

$.indexSet = function(a, index, value) {
  var key;
  if (a.constructor === Array && !a.immutable$list) {
    key = index >>> 0;
    if (key === index && key < a.length) {
      a[key] = value;
      return;
    }
  }
  $.indexSet$slow(a, index, value);
};

$.checkNumbers = function(a, b) {
  if (typeof a === 'number')
    if (typeof b === 'number')
      return true;
    else
      throw $.$$throw($.ArgumentError$(b));
  return false;
};

$.isJsArray = function(value) {
  return !(value == null) && value.constructor === Array;
};

$.add$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a + b;
  return a.operator$add$1(b);
};

$.mul$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a * b;
  return a.operator$mul$1(b);
};

$.sub$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a - b;
  return a.operator$sub$1(b);
};

$.div$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a / b;
  return a.operator$div$1(b);
};

$.eq = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return $.getInterceptor(a).operator$eq$1(a, b);
  return a === b;
};

$.eqB = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return $.getInterceptor(a).operator$eq$1(a, b) === true;
  return a === b;
};

$.tdiv = function(a, b) {
  var t1;
  if ($.checkNumbers(a, b)) {
    t1 = a / b;
    return $.getInterceptor(t1).truncate$0(t1);
  }
  return a.operator$tdiv$1(b);
};

$.gt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a > b;
  return a.operator$gt$1(b);
};

$.ge$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a >= b;
  return a.operator$ge$1(b);
};

$.lt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a < b;
  return a.operator$lt$1(b);
};

$.shl = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.ArgumentError$(b));
    if (b > 31)
      return 0;
    return (a << b) >>> 0;
  }
  return a.operator$shl$1(b);
};

$.Vec3$ = function(x, y, z) {
  return new $.Vec3(x, y, z);
};

$.and = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a & b) >>> 0;
  return a.operator$and$1(b);
};

$.xor = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a ^ b) >>> 0;
  return a.operator$xor$1(b);
};

$.neg = function(a) {
  if (typeof a === "number")
    return -a;
  return a.operator$negate$0();
};

$.index$slow = function(a, index) {
  var t1;
  if (!(typeof a === 'string'))
    t1 = !(a == null) && a.constructor === Array;
  else
    t1 = true;
  if (t1) {
    if (!(typeof index === 'number' && Math.floor(index) === index)) {
      if (!(typeof index === 'number'))
        throw $.$$throw($.ArgumentError$(index));
      if (!($.getInterceptor(index).truncate$0(index) === index))
        throw $.$$throw($.ArgumentError$(index));
    }
    if ($.ltB(index, 0) || $.geB(index, $.getInterceptor(a).get$length(a)))
      throw $.$$throw($.RangeError$value(index));
    return a[index];
  }
  return a.operator$index$1(index);
};

$.indexSet$slow = function(a, index, value) {
  if (!(a == null) && a.constructor === Array) {
    if (!(typeof index === 'number' && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index < 0 || $.geB(index, $.getInterceptor(a).get$length(a)))
      throw $.$$throw($.RangeError$value(index));
    $.checkMutable(a, "indexed set");
    a[index] = value;
    return;
  }
  a.oprator$indexSet$2(index, value);
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res = $.getInterceptor(value).toString$0(value);
  if (!(typeof res === 'string'))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.IDBOpenDBRequestEvents$ = function(_ptr) {
  return new $.IDBOpenDBRequestEvents(_ptr);
};

$.StaticSlide$ = function(element, scale, x, y, z, heading, pitch, roll) {
  var t1 = new $.StaticSlide(element, false, scale, null, null);
  t1.ThreeDimensionalObj$7(scale, x, y, z, heading, pitch, roll);
  t1.Slide$8(element, scale, x, y, z, heading, pitch, roll);
  return t1;
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.IDBRequestEvents$ = function(_ptr) {
  return new $.IDBRequestEvents(_ptr);
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.ArgumentError$(null));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === 'number'))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.checkString = function(value) {
  if (!(typeof value === 'string'))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.$$throw = function(ex) {
  var jsError;
  if (ex == null)
    ex = $.CTC;
  jsError = new Error();
  jsError.name = ex;
  jsError.description = ex;
  jsError.dartException = ex;
  jsError.toString = $.toStringWrapper.call$0;
  throw jsError;
};

$.toStringWrapper = function() {
  var t1 = this.dartException;
  return $.getInterceptor(t1).toString$0(t1);
};

$.unwrapException = function(ex) {
  var message, type, name$, ieErrorCode, ieFacilityNumber, t1;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    name$ = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") !== -1 || $.eqB(type, "property_not_function") || $.eqB(type, "called_non_callable") || $.eqB(type, "non_object_property_call") || $.eqB(type, "non_object_property_load"))
      return $.NoSuchMethodError$(null, name$, [], $.makeLiteralMap([]), null);
    else if ($.eqB(type, "undefined_method"))
      return $.NoSuchMethodError$("", name$, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    if (typeof message === 'string')
      if ($.getInterceptor(message).endsWith$1(message, "is null") === true || $.getInterceptor(message).endsWith$1(message, "is undefined") === true || $.getInterceptor(message).endsWith$1(message, "is null or undefined") === true)
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" is not a function") === -1)
          t1 = ieErrorCode === 438 && ieFacilityNumber === 10;
        else
          t1 = true;
        if (t1)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    return $.Exception_Exception(typeof message === 'string' ? message : "");
  }
  if (ex instanceof RangeError) {
    if (typeof message === 'string' && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if (typeof message === 'string' && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result;
  iterator = $.getInterceptor(keyValuePairs).iterator$0(keyValuePairs);
  result = $.LinkedHashMap_LinkedHashMap();
  for (; iterator.get$hasNext() === true;)
    $.indexSet(result, iterator.next$0(), iterator.next$0());
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  if ($.eqB(numberOfArguments, 0))
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if ($.eqB(numberOfArguments, 1))
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if ($.eqB(numberOfArguments, 2))
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(arg2, closure, arg1));
  else
    throw $.$$throw($.Exception_Exception("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var function$;
  if (closure == null)
    return;
  function$ = closure.$identity;
  if (!!function$)
    return function$;
  function$ = function() {
    return $.invokeClosure.call$5(closure, $._currentIsolate(), arity, arguments[0], arguments[1]);
  };
  closure.$identity = function$;
  return function$;
};

$._Device_isOpera = function() {
  var t1 = $._Device_userAgent();
  return $.getInterceptor(t1).contains$2(t1, "Opera", 0);
};

$.IDBTransactionEvents$ = function(_ptr) {
  return new $.IDBTransactionEvents(_ptr);
};

$._Device_isIE = function() {
  var t1, t2;
  if ($._Device_isOpera() !== true) {
    t1 = $._Device_userAgent();
    t2 = $.getInterceptor(t1).contains$2(t1, "MSIE", 0) === true;
    t1 = t2;
  } else
    t1 = false;
  return t1;
};

$._Device_isFirefox = function() {
  var t1 = $._Device_userAgent();
  return $.getInterceptor(t1).contains$2(t1, "Firefox", 0);
};

$._Device_userAgent = function() {
  return $.window().get$navigator().get$userAgent();
};

$.propertyTypeCastError = function(value, property) {
  throw $.$$throw($.CastErrorImplementation$($.Primitives_objectTypeName(value), $.getInterceptor(property).substring$2(property, 3, $.getInterceptor(property).get$length(property))));
};

$.IDBVersionChangeRequestEvents$ = function(_ptr) {
  return new $.IDBVersionChangeRequestEvents(_ptr);
};

$.propertyTypeCast = function(value, property) {
  if (value == null || !!value[property])
    return value;
  $.propertyTypeCastError(value, property);
};

$.StringMatch$ = function(start, str, pattern) {
  return new $.StringMatch(start, str, pattern);
};

$.InputElementEvents$ = function(_ptr) {
  return new $.InputElementEvents(_ptr);
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.typeNameInChrome = function(obj) {
  var name$ = obj.constructor.name;
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name$ === "WebKitMutationObserver")
    return "MutationObserver";
  if (name$ === "AudioChannelMerger")
    return "ChannelMergerNode";
  if (name$ === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if (name$ === "AudioGainNode")
    return "GainNode";
  if (name$ === "AudioPannerNode")
    return "PannerNode";
  if (name$ === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if (name$ === "Oscillator")
    return "OscillatorNode";
  if (name$ === "RealtimeAnalyserNode")
    return "AnalyserNode";
  return name$;
};

$.constructorNameFallback = function(object) {
  var constructor$, name$, t1, string;
  if (object == null)
    return "Null";
  constructor$ = object.constructor;
  if (typeof(constructor$) === "function") {
    name$ = constructor$.name;
    if (typeof name$ === 'string')
      t1 = !(name$ === "") && !(name$ === "Object") && !(name$ === "Function.prototype");
    else
      t1 = false;
    if (t1)
      return name$;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.Set_Set = function() {
  return $._HashSetImpl$();
};

$._AllMatchesIterable$ = function(_re, _str) {
  return new $._AllMatchesIterable(_re, _str);
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === "object"))
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.typeNameInIE = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if (name$ === "ApplicationCache")
    return "DOMApplicationCache";
  if (name$ === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name$ === "DataTransfer")
    return "Clipboard";
  if (name$ === "DragEvent")
    return "MouseEvent";
  if (name$ === "HTMLDDElement")
    return "HTMLElement";
  if (name$ === "HTMLDTElement")
    return "HTMLElement";
  if (name$ === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if (name$ === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if (name$ === "HTMLPhraseElement")
    return "HTMLElement";
  if (name$ === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if (name$ === "MouseWheelEvent")
    return "WheelEvent";
  if (name$ === "Position")
    return "Geoposition";
  return name$;
};

$.toStringForNativeObject = function(obj) {
  return "Instance of " + $.getTypeNameOf(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property,
      {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicBind = function(obj, name$, methods, arguments$) {
  var tag, hasOwnProperty, method, i, entry, proto;
  tag = $.getTypeNameOf(obj);
  hasOwnProperty = Object.prototype.hasOwnProperty;
  method = $.lookupDynamicClass(hasOwnProperty, methods, tag);
  if (method == null && !($._dynamicMetadata0() == null))
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if (hasOwnProperty.call(entry.get$_set(), tag)) {
        method = $.lookupDynamicClass(hasOwnProperty, methods, entry.get$_tag());
        if (!(method == null))
          break;
      }
    }
  if (method == null)
    method = $.lookupDynamicClass(hasOwnProperty, methods, $.getTypeNameOf($.CTC34));
  proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError(name$ + " is not a function");} else {return Object.prototype[name$].apply(this, arguments);}};
  if (!hasOwnProperty.call(proto, name$))
    $.defineProperty(proto, name$, method);
  return method.apply(obj, arguments$);
};

$.dynamicFunction = function(name$) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[name$];
  if (!(f == null) && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.CTC34)[name$];
  if (!(dartMethod == null))
    methods["Object"] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, name$, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, name$, bind);
  return methods;
};

$.typeNameInSafari = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if (name$ === "WebKitMutationObserver")
    return "MutationObserver";
  if (name$ === "AudioChannelMerger")
    return "ChannelMergerNode";
  if (name$ === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if (name$ === "AudioGainNode")
    return "GainNode";
  if (name$ === "AudioPannerNode")
    return "PannerNode";
  if (name$ === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if (name$ === "Oscillator")
    return "OscillatorNode";
  if (name$ === "RealtimeAnalyserNode")
    return "AnalyserNode";
  return name$;
};

$.typeNameInOpera = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  return name$;
};

$.typeNameInFirefox = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === "Window")
    return "DOMWindow";
  if (name$ === "CSS2Properties")
    return "CSSStyleDeclaration";
  if (name$ === "DataTransfer")
    return "Clipboard";
  if (name$ === "DragEvent")
    return "MouseEvent";
  if (name$ === "GeoGeolocation")
    return "Geolocation";
  if (name$ === "MouseScrollEvent")
    return "WheelEvent";
  if (name$ === "OfflineResourceList")
    return "DOMApplicationCache";
  if (name$ === "WorkerMessageEvent")
    return "MessageEvent";
  if (name$ === "XMLDocument")
    return "Document";
  return name$;
};

$._AllMatchesIterator$ = function(re, _str) {
  return new $._AllMatchesIterator($.JSSyntaxRegExp__globalVersionOf(re), _str, null, false);
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.regExpExec = function(regExp, str) {
  var result = $.regExpGetNative(regExp).exec(str);
  if (result == null)
    return;
  return result;
};

$.regExpTest = function(regExp, str) {
  return $.regExpGetNative(regExp).test(str);
};

$.regExpGetNative = function(regExp) {
  var r = regExp._re;
  return r == null ? regExp._re = $.regExpMakeNative(regExp, false) : r;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = $.getInterceptor(tags).split$1(tags, "|");
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    $.getInterceptor(result).add$1(result, $.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.regExpMakeNative = function(regExp, global, exception) {
  var pattern, multiLine, ignoreCase, sb, t1, t2, e;
  pattern = regExp.get$pattern();
  multiLine = regExp.get$multiLine();
  ignoreCase = regExp.get$ignoreCase();
  $.checkString(pattern);
  sb = $.StringBuffer_StringBuffer("");
  if (multiLine === true) {
    t1 = sb;
    $.getInterceptor(t1).add$1(t1, "m");
  }
  if (ignoreCase === true) {
    t1 = sb;
    $.getInterceptor(t1).add$1(t1, "i");
  }
  if (global === true) {
    t1 = sb;
    $.getInterceptor(t1).add$1(t1, "g");
  }
  try {
    t1 = pattern;
    t2 = sb;
    t1 = new RegExp(t1, $.getInterceptor(t2).toString$0(t2));
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.Future_Future$immediate = function(value) {
  return $._FutureImpl__FutureImpl$immediate(value);
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === "undefined") {
    var t1 = [];
    $._dynamicMetadata(t1);
  }
  return $dynamicMetadata;
};

$.allMatchesInStringUnchecked = function(needle, haystack) {
  var result, length$, patternLength, startIndex, position, endIndex;
  result = $.List_List(null);
  length$ = $.getInterceptor(haystack).get$length(haystack);
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = $.getInterceptor(haystack).indexOf$2(haystack, needle, startIndex);
    if ($.eqB(position, -1))
      break;
    $.getInterceptor(result).add$1(result, $.StringMatch$(position, haystack, needle));
    endIndex = $.add(position, patternLength);
    if ($.eqB(endIndex, length$))
      break;
    else
      startIndex = $.eqB(position, endIndex) ? $.add(startIndex, 1) : endIndex;
  }
  return result;
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  var substr, t1;
  if (typeof other === 'string')
    return !$.eqB($.getInterceptor(receiver).indexOf$2(receiver, other, startIndex), -1);
  else if (typeof other === 'object' && other !== null && !!other.is$JSSyntaxRegExp)
    return other.hasMatch$1($.getInterceptor(receiver).substring$1(receiver, startIndex));
  else {
    substr = $.getInterceptor(receiver).substring$1(receiver, startIndex);
    t1 = $.getInterceptor(other).allMatches$1(other, substr);
    return $.getInterceptor(t1).iterator$0(t1).get$hasNext();
  }
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace('$', '$$$$'));
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, length$, i, t1;
  if (typeof from === 'string')
    if (from === "")
      if (receiver === "")
        return to;
      else {
        result = $.StringBuffer_StringBuffer("");
        length$ = receiver.length;
        $.getInterceptor(result).add$1(result, to);
        for (i = 0; i < length$; ++i) {
          t1 = $.getInterceptor(result);
          if (i >= receiver.length)
            throw $.ioore(i);
          t1.add$1(result, receiver[i]);
          $.getInterceptor(result).add$1(result, to);
        }
        return $.getInterceptor(result).toString$0(result);
      }
    else
      return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.get$quoteRegExp(), true), "\\$&"), false, false), true), to);
  else if (typeof from === 'object' && from !== null && !!from.is$JSSyntaxRegExp)
    return $.stringReplaceJS(receiver, $.regExpMakeNative(from, true), to);
  else {
    $.checkNull(from);
    throw $.$$throw("String.replaceAll(Pattern) UNIMPLEMENTED");
  }
};

$.stringSplitUnchecked = function(receiver, pattern) {
  if (typeof pattern === 'string')
    return receiver.split(pattern);
  else if (typeof pattern === 'object' && pattern !== null && !!pattern.is$JSSyntaxRegExp)
    return receiver.split($.regExpGetNative(pattern));
  else
    throw $.$$throw("String.split(Pattern) UNIMPLEMENTED");
};

$.stringJoinUnchecked = function(array, separator) {
  return array.join(separator);
};

$._MatchImplementation$ = function(pattern, str, start, end, _groups) {
  return new $._MatchImplementation(pattern, str, start, end, _groups);
};

$.lookupDynamicClass = function(hasOwnProperty, methods, className) {
  return hasOwnProperty.call(methods, className) ? methods[className] : null;
};

$.ElementEvents$ = function(_ptr) {
  return new $.ElementEvents(_ptr);
};

$._Lists_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof startIndex !== 'number')
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof endIndex !== 'number')
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$._Lists_getRange = function(a, start, length$, accumulator) {
  var end, i, t1;
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $._Lists_getRange$bailout(1, a, start, length$, accumulator);
  if (typeof start !== 'number')
    return $._Lists_getRange$bailout(1, a, start, length$, accumulator);
  if ($.ltB(length$, 0))
    throw $.$$throw($.ArgumentError$("length"));
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  if (typeof length$ !== 'number')
    throw $.iae(length$);
  end = start + length$;
  if (end > a.length)
    throw $.$$throw($.RangeError$value(end));
  for (i = start; i < end; ++i) {
    t1 = $.getInterceptor(accumulator);
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    t1.add$1(accumulator, a[i]);
  }
  return accumulator;
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof dst !== 'object' || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !dst.is$JavaScriptIndexingBehavior())
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = src.length, t2 = dst.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$._ElementCssClassSet$ = function(_element) {
  return new $._ElementCssClassSet(_element);
};

$.print = function(object) {
  $.Primitives_printString(object);
};

$.Events$ = function(_ptr) {
  return new $.Events(_ptr);
};

$._AttributeClassSet$ = function(_element) {
  return new $._AttributeClassSet(_element);
};

$.getInterceptor = function(object) {
  if (typeof object === 'string')
    return $.CTC0;
  if ($.isJsArray(object))
    return $.CTC1;
  if (typeof object === 'number' && Math.floor(object) === object)
    return $.CTC2;
  if (typeof object === 'number')
    return $.CTC3;
  if (typeof object === 'boolean')
    return $.CTC4;
  if (object == null)
    return $.CTC5;
  if (typeof object === "function")
    return $.CTC6;
  return $.CTC7;
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$._HashSetImpl$ = function() {
  var t1 = new $._HashSetImpl(null);
  t1._HashSetImpl$0();
  return t1;
};

$.AbstractWorkerEvents$ = function(_ptr) {
  return new $.AbstractWorkerEvents(_ptr);
};

$.MediaStreamEvents$ = function(_ptr) {
  return new $.MediaStreamEvents(_ptr);
};

$._HashSetIterator$ = function(set_) {
  var t1 = new $._HashSetIterator(set_._backingMap._keys, -1);
  t1._HashSetIterator$1(set_);
  return t1;
};

$.getStamp = function(number, placed) {
  var stampContainer, dateTxt, stamp, today, t1, t2;
  stampContainer = $.DivElement_DivElement();
  dateTxt = $.ParagraphElement_ParagraphElement();
  stamp = $.ImageElement_ImageElement(null, null, null);
  today = $.Date_Date$now();
  t1 = dateTxt.get$style();
  t1.set$textAlign("center");
  t1.set$fontFamily("Courier New");
  t1.set$fontSize("1.2em");
  t1.set$position("relative");
  t1.set$top("0.5em");
  t1.set$transform("rotate(20deg)");
  t1 = today.toLocal$0();
  dateTxt.set$innerHTML($.getInterceptor(t1).toString$0(t1));
  dateTxt.get$style().set$zIndex("1");
  t2 = stamp.get$classes();
  $.getInterceptor(t2).add$1(t2, "stamp");
  stamp.set$src("images/stamp_" + $.S(number) + ".png");
  if (!placed) {
    stamp.set$id("stamp" + $.S(number) + "Unplaced");
    $.window().setTimeout$2(new $.getStamp_anon(stamp, number), 100);
  } else
    stamp.set$id("stamp" + $.S(number) + "Placed");
  stampContainer.get$style().set$width("250px");
  stampContainer.insertAdjacentElement$2("beforeEnd", dateTxt);
  stampContainer.insertAdjacentElement$2("beforeEnd", stamp);
  return stampContainer;
};

$.addBackground = function() {
  var element, slide;
  element = $.ImageElement_ImageElement(null, null, null);
  element.set$src("images/world_8bit.png");
  slide = $.Slide$(element, 50, 0, 0, 0, 0, 0, 0);
  $.get$slideshow().addBackgroundSlide$1(slide);
};

$.addSlideToMap = function(slideContents) {
  var x, y;
  x = $.mul($.currentSlidePosition, 2000);
  y = $.sin($.add($.div($.currentSlidePosition, 2), -3)) * 10000;
  return $.get$slideshow().addElementSlide$8(slideContents, 1, x, y, 0, 0, 0, 0);
};

$.hideButtons = function() {
  $.get$nextButton().get$style().set$visibility("hidden");
  $.get$continueButton().get$style().set$visibility("hidden");
  $.get$backButton().get$style().set$visibility("hidden");
  $.get$explainButton().get$style().set$visibility("hidden");
  $.get$finishButton().get$style().set$visibility("hidden");
};

$.enableSummaryButtons = function() {
  var t1, t2;
  $.get$finishButton().get$style().set$visibility("visible");
  t1 = $.get$test().get$currentSection();
  t2 = $.get$test().get$sections();
  if (!$.eqB(t1, $.getInterceptor(t2).get$last(t2)))
    $.get$continueButton().get$style().set$visibility("visible");
  $.get$explainButton().get$style().set$visibility("visible");
};

$.nextQuestion = function() {
  var slideElement, t1, stamp;
  slideElement = $.get$test().next$0();
  $.hideButtons();
  t1 = slideElement.get$id();
  if ($.getInterceptor(t1).startsWith$1(t1, "summary") === true) {
    $.enableSummaryButtons();
    for (t1 = $.get$stampsEarned(), t1 = $.getInterceptor(t1).iterator$0(t1); t1.get$hasNext() === true;)
      slideElement.insertAdjacentElement$2("beforeEnd", t1.next$0());
    if ($.checkSectionFluency()) {
      slideElement.insertAdjacentElement$2("beforeEnd", $.getStamp($.get$test().get$currentSection().get$star(), false));
      stamp = $.getStamp($.get$test().get$currentSection().get$star(), true);
      t1 = $.get$stampsEarned();
      $.getInterceptor(t1).add$1(t1, stamp);
    }
  }
  $.get$slideshow().set$useDynamic(true);
  $.currentSlidePosition = $.add($.currentSlidePosition, 1);
  $.addSlideToMap(slideElement);
  $.get$slideshow().next$0();
};

$.checkSectionFluency = function() {
  var t1 = $.div($.get$test().get$currentSection().getUserAnswerPoints$0(), $.get$test().get$currentSection().getMaxPoints$0());
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  return 100 * t1 > 70 && true;
};

$.displaySectionExplanation = function() {
  var summaryId, explainDiv, slide;
  $.get$backButton().get$style().set$visibility("visible");
  $.get$nextButton().get$style().set$visibility("visible");
  summaryId = "#summary" + $.S($.get$test().get$currentSection().get$star());
  explainDiv = $.query("#explainSection");
  $.query(summaryId).get$style().set$visibility("hidden");
  $.query("#explainContent").set$elements($.get$test().get$currentSection().explain$0().get$elements());
  slide = $.addSlideToMap(explainDiv);
  $.get$slideshow().get$cam().lookAtSlide$2(slide, 1);
  $.get$slideshow().next$0();
};

$.scriptButton = function() {
  var t1 = $.query("#nextButton").get$on().get$click();
  $.getInterceptor(t1).add$1(t1, new $.scriptButton_anon());
  t1 = $.get$explainButton().get$on().get$click();
  $.getInterceptor(t1).add$1(t1, new $.scriptButton_anon0());
  t1 = $.get$backButton().get$on().get$click();
  $.getInterceptor(t1).add$1(t1, new $.scriptButton_anon1());
  t1 = $.get$finishButton().get$on().get$click();
  $.getInterceptor(t1).add$1(t1, new $.scriptButton_anon2());
};

$.startTest = function() {
  $.get$slideshow().get$cam().move$7($.camTransDuration, $.camX, $.camY, $.camZ, $.camXr, $.camYr, $.camZr);
  $.window().setTimeout$2(new $.startTest_anon(), 1500);
};

$.addSplash = function() {
  var slideElement, startButton, slide, t1;
  slideElement = $.query("#splash");
  startButton = $.query("#startButton");
  slide = $.get$slideshow().addElementSlide$8(slideElement, 1, 0, 0, -2000, 0, 0, 0);
  $.get$slideshow().get$cam().lookAtSlide$2(slide, 0);
  t1 = startButton.get$on().get$click();
  $.getInterceptor(t1).add$1(t1, new $.addSplash_anon());
  $.get$slideshow().start$0();
};

$.onSuccess = function(request) {
  var i, t1, viewBox;
  for (i = 1; i < 5; ++i) {
    t1 = $.get$test().get$sections();
    $.getInterceptor(t1).add$1(t1, $.TestSection$(i, request.get$responseText()));
  }
  viewBox = $.query("#viewBox");
  viewBox.get$style().set$transition("0.5");
  $.window().setTimeout$2(new $.onSuccess_anon(viewBox), 500);
};

$.main = function() {
  $.HttpRequest_HttpRequest$get("questions.xml", $.onSuccess);
};

$.window = function() {
  return window;
};

$.AudioContextEvents$ = function(_ptr) {
  return new $.AudioContextEvents(_ptr);
};

$.document = function() {
  return document;
};

$.query = function(selector) {
  return $.document().query$1(selector);
};

$._FrozenCssClassSet$ = function() {
  return new $._FrozenCssClassSet();
};

$._ElementAttributeMap$ = function(_element) {
  return new $._ElementAttributeMap(_element);
};

$.MediaElementEvents$ = function(_ptr) {
  return new $.MediaElementEvents(_ptr);
};

$.LocalWindowEvents$ = function(_ptr) {
  return new $.LocalWindowEvents(_ptr);
};

$._browserPrefix = function() {
  if ($._cachedBrowserPrefix == null)
    if ($._Device_isFirefox() === true)
      $._cachedBrowserPrefix = "-moz-";
    else if ($._Device_isIE() === true)
      $._cachedBrowserPrefix = "-ms-";
    else if ($._Device_isOpera() === true)
      $._cachedBrowserPrefix = "-o-";
    else
      $._cachedBrowserPrefix = "-webkit-";
  return $._cachedBrowserPrefix;
};

$.ElementInstanceEvents$ = function(_ptr) {
  return new $.ElementInstanceEvents(_ptr);
};

$.BatteryManagerEvents$ = function(_ptr) {
  return new $.BatteryManagerEvents(_ptr);
};

$.BodyElementEvents$ = function(_ptr) {
  return new $.BodyElementEvents(_ptr);
};

$._DocumentFragmentFactoryProvider_createDocumentFragment_html = function(html) {
  var fragment = $.DocumentFragment_DocumentFragment();
  fragment.set$innerHTML(html);
  return fragment;
};

$.LIElement_LIElement = function() {
  return $.document().$$dom_createElement$1("li");
};

$.Test$ = function() {
  return new $.Test($.List_List(null), null);
};

$._ElementFactoryProvider_createElement_html = function(html) {
  var match, t1, tag, parentTag, temp, element, t2;
  match = $.get$_START_TAG_REGEXP().firstMatch$1(html);
  if (!(match == null)) {
    t1 = match.group$1(1);
    tag = $.getInterceptor(t1).toLowerCase$0(t1);
    parentTag = $.CTC9.containsKey$1(tag) === true ? $.CTC9.operator$index$1(tag) : "div";
  } else {
    tag = null;
    parentTag = "div";
  }
  temp = $.Element_Element$tag(parentTag);
  temp.set$innerHTML(html);
  t1 = temp.get$children();
  if ($.eqB($.getInterceptor(t1).get$length(t1), 1))
    element = $.index(temp.get$children(), 0);
  else {
    if ($.eqB(parentTag, "html")) {
      t1 = temp.get$children();
      t2 = $.eqB($.getInterceptor(t1).get$length(t1), 2);
      t1 = t2;
    } else
      t1 = false;
    if (t1) {
      t1 = temp.get$children();
      element = $.index(t1, $.eqB(tag, "head") ? 0 : 1);
    } else {
      t1 = temp.get$children();
      throw $.$$throw($.ArgumentError$("HTML had " + $.S($.getInterceptor(t1).get$length(t1)) + " " + "top level elements but 1 expected"));
    }
  }
  element.remove$0();
  return element;
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, element.get$$$dom_children());
};

$.MediaStreamTrackEvents$ = function(_ptr) {
  return new $.MediaStreamTrackEvents(_ptr);
};

$.InputElement_InputElement = function(type) {
  var e = $.document().$$dom_createElement$1("input");
  if (!(type == null))
    e.set$type(type);
  return e;
};

$.FilteredElementList$ = function(node) {
  return new $.FilteredElementList(node, node.get$nodes());
};

$.MessagePortEvents$ = function(_ptr) {
  return new $.MessagePortEvents(_ptr);
};

$.MediaStreamTrackListEvents$ = function(_ptr) {
  return new $.MediaStreamTrackListEvents(_ptr);
};

$.ImageElement_ImageElement = function(height, src, width) {
  var e = $.document().$$dom_createElement$1("img");
  if (!(src == null))
    e.set$src(src);
  if (!(width == null))
    e.set$width(width);
  if (!(height == null))
    e.set$height(height);
  return e;
};

$._FrozenElementList$_wrap = function(_nodeList) {
  return new $._FrozenElementList(_nodeList);
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var values, copies, t1, t2, t3, t4, copy;
  values = [];
  copies = [];
  t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot(copies, values);
  t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t3, t2, t1).call$1(value);
  t4.call$0();
  return copy;
};

$._convertDartToNative_EventTarget = function(e) {
  if (typeof e === 'object' && e !== null && !!e.is$_DOMWindowCrossFrame)
    return e._window;
  else
    return e;
};

$._callInIsolate = function(isolate, function$) {
  isolate.eval$1(function$);
  $._globalState().get$topEventLoop().run$0();
};

$._currentIsolate = function() {
  return $._globalState().get$currentContext();
};

$._globalState = function() {
  return $globalState;
};

$._globalState0 = function(val) {
  $globalState = val;
};

$._serializeMessage = function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $.Futures_wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$._FrozenElementListIterator$ = function(_list) {
  return new $._FrozenElementListIterator(_list, 0);
};

$._window = function() {
  return typeof window != "undefined" ? window : null;
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($._globalState().get$isWorker() === true)
    return;
  rootContext = $._IsolateContext$();
  $._globalState().set$rootContext(rootContext);
  $globals = rootContext.isolateStatics;
  $static_init();
  $._globalState().set$currentContext(rootContext);
  if (!($._window() == null))
    rootContext.eval$1(new $.startRootIsolate_anon());
  rootContext.eval$1(entry);
  $._globalState().get$topEventLoop().run$0();
};

$._timerFactory = function(millis, callback, repeating) {
  return repeating === true ? $._Timer$repeating(millis, callback) : $._Timer$(millis, callback);
};

$._deserializeMessage = function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$.parseInt = function(string) {
  return $.int_parse(string);
};

$.min = function(a, b) {
  if (typeof a === 'number') {
    if (typeof b === 'number') {
      if (a > b)
        return b;
      if (a < b)
        return a;
      if (typeof b === 'number') {
        if (typeof a === 'number')
          if (a === 0)
            return (a + b) * a * b;
        if (a === 0 && $.getInterceptor(b).get$isNegative(b) === true || $.getInterceptor(b).get$isNaN(b) === true)
          return b;
        return a;
      }
      return a;
    }
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$.sin = function(x) {
  return Math.sin($.checkNum(x));
};

$.sqrt = function(x) {
  return Math.sqrt($.checkNum(x));
};

$.NotificationEvents$ = function(_ptr) {
  return new $.NotificationEvents(_ptr);
};

$.MouseEvent_MouseEvent = function(type, view, detail, screenX, screenY, clientX, clientY, button, canBubble, cancelable, ctrlKey, altKey, shiftKey, metaKey, relatedTarget) {
  return $._MouseEventFactoryProvider_createMouseEvent(type, view, detail, screenX, screenY, clientX, clientY, button, canBubble, cancelable, ctrlKey, altKey, shiftKey, metaKey, relatedTarget);
};

$.PeerConnection00Events$ = function(_ptr) {
  return new $.PeerConnection00Events(_ptr);
};

$.HttpRequest_HttpRequest$get = function(url, onComplete) {
  return $._HttpRequestFactoryProvider_createHttpRequest_get(url, onComplete);
};

$.HttpRequest_HttpRequest = function() {
  return new XMLHttpRequest();
};

$._DateImpl$fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch, isUtc) {
  var t1 = new $._DateImpl(millisecondsSinceEpoch, isUtc);
  t1._DateImpl$fromMillisecondsSinceEpoch$2(millisecondsSinceEpoch, isUtc);
  return t1;
};

$.RTCDataChannelEvents$ = function(_ptr) {
  return new $.RTCDataChannelEvents(_ptr);
};

$._DateImpl$now = function() {
  var t1 = new $._DateImpl($.Primitives_dateNow(), false);
  t1._DateImpl$now$0();
  return t1;
};

$.RTCPeerConnectionEvents$ = function(_ptr) {
  return new $.RTCPeerConnectionEvents(_ptr);
};

$.XML_parse = function(xml, withQuirks) {
  return $.XmlParser__parse($.getInterceptor(xml).trim$0(xml), withQuirks);
};

$.XmlCollection$_internal = function() {
  return new $.XmlCollection($.List_List(null));
};

$.XmlCollection$_from = function(list) {
  var t1 = new $.XmlCollection($.List_List(null));
  t1.XmlCollection$_from$1(list);
  return t1;
};

$.Answer$ = function(points, text, explanation) {
  return new $.Answer(points, text, explanation, null, null, null);
};

$.List_List = function(length$) {
  return $.Primitives_newList(length$);
};

$.List_List$from = function(other) {
  var list, t1, t2;
  list = $.List_List(null);
  for (t1 = $.getInterceptor(other).iterator$0(other); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    $.getInterceptor(list).add$1(list, t2);
  }
  return list;
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.Error_safeToString = function(object) {
  var t1;
  if (typeof object === 'number' && Math.floor(object) === object || typeof object === 'number' || typeof object === 'boolean' || null == object)
    return $.getInterceptor(object).toString$0(object);
  if (typeof object === 'string') {
    t1 = $.getInterceptor(object).replaceAll$2(object, "\\", "\\\\");
    t1 = $.getInterceptor(t1).replaceAll$2(t1, "\n", "\\n");
    t1 = $.getInterceptor(t1).replaceAll$2(t1, "\r", "\\r");
    return "\"" + $.S($.getInterceptor(t1).replaceAll$2(t1, "\"", "\\\"")) + "\"";
  }
  return $.Primitives_objectToString(object);
};

$.SingleSelect$ = function(text) {
  var t1 = new $.SingleSelect(null, $.List_List(null), null, null);
  t1.MultipleChoice$1(text);
  return t1;
};

$.MultipleSelect$ = function(text) {
  var t1 = new $.MultipleSelect($.List_List(null), $.List_List(null), null, null);
  t1.MultipleChoice$1(text);
  return t1;
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.ScriptProcessorNodeEvents$ = function(_ptr) {
  return new $.ScriptProcessorNodeEvents(_ptr);
};

$._HttpRequestUtils_get = function(url, onSuccess, withCredentials) {
  var request, t1;
  request = $.HttpRequest_HttpRequest();
  request.open$3("GET", url, true);
  request.set$withCredentials(withCredentials);
  t1 = request.get$on().get$readyStateChange();
  $.getInterceptor(t1).add$1(t1, new $._HttpRequestUtils_get_anon(onSuccess, request));
  request.send$0();
  return request;
};

$.Map_Map = function() {
  return $._HashMapImpl$();
};

$._HttpRequestFactoryProvider_createHttpRequest_get = function(url, onComplete) {
  return $._HttpRequestUtils_get(url, onComplete, false);
};

$.SharedWorkerContextEvents$ = function(_ptr) {
  return new $.SharedWorkerContextEvents(_ptr);
};

$.int_parse = function(source) {
  return $.Primitives_parseInt(source);
};

$.ListIterator$ = function(list) {
  return new $.ListIterator(0, list);
};

$._MouseEventFactoryProvider_createMouseEvent = function(type, view, detail, screenX, screenY, clientX, clientY, button, canBubble, cancelable, ctrlKey, altKey, shiftKey, metaKey, relatedTarget) {
  var e = $.document().$$dom_createEvent$1("MouseEvent");
  e.$$dom_initMouseEvent$15(type, canBubble, cancelable, view, detail, screenX, screenY, clientX, clientY, ctrlKey, altKey, shiftKey, metaKey, button, relatedTarget);
  return e;
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$.RegExp_RegExp = function(pattern, ignoreCase, multiLine) {
  return $.JSSyntaxRegExp$(pattern, ignoreCase, multiLine);
};

$._Collections_contains = function(iterable, element) {
  var t1;
  for (t1 = $.getInterceptor(iterable).iterator$0(iterable); t1.get$hasNext() === true;)
    if ($.eqB(t1.next$0(), element))
      return true;
  return false;
};

$._Collections_some = function(iterable, f) {
  var t1;
  for (t1 = $.getInterceptor(iterable).iterator$0(iterable); t1.get$hasNext() === true;)
    if (f.call$1(t1.next$0()) === true)
      return true;
  return false;
};

$._Collections_filter = function(source, destination, f) {
  var t1, t2;
  for (t1 = $.getInterceptor(source).iterator$0(source); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (f.call$1(t2) === true)
      $.getInterceptor(destination).add$1(destination, t2);
  }
  return destination;
};

$.FixedSizeListIterator$ = function(array) {
  return new $.FixedSizeListIterator($.getInterceptor(array).get$length(array), array, 0);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.DivElement_DivElement = function() {
  return $.document().$$dom_createElement$1("div");
};

$.SpeechRecognitionEvents$ = function(_ptr) {
  return new $.SpeechRecognitionEvents(_ptr);
};

$.Collections_forEach = function(iterable, f) {
  var t1;
  for (t1 = $.getInterceptor(iterable).iterator$0(iterable); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
};

$.Collections_some = function(iterable, f) {
  var t1;
  for (t1 = $.getInterceptor(iterable).iterator$0(iterable); t1.get$hasNext() === true;)
    if (f.call$1(t1.next$0()) === true)
      return true;
  return false;
};

$.Collections_filter = function(source, destination, f) {
  var t1, t2;
  for (t1 = $.getInterceptor(source).iterator$0(source); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (f.call$1(t2) === true)
      $.getInterceptor(destination).add$1(destination, t2);
  }
  return destination;
};

$.Collections_collectionToString = function(c) {
  var result = $.StringBuffer_StringBuffer("");
  $.Collections__emitCollection(c, result, $.List_List(null));
  return $.getInterceptor(result).toString$0(result);
};

$.Collections__emitCollection = function(c, result, visiting) {
  var isList, t1, first, t2;
  $.getInterceptor(visiting).add$1(visiting, c);
  isList = typeof c === 'object' && c !== null && (c.constructor === Array || c.is$List());
  t1 = $.getInterceptor(result);
  t1.add$1(result, isList ? "[" : "{");
  for (t1 = $.getInterceptor(c).iterator$0(c), first = true; t1.get$hasNext() === true; first = false) {
    t2 = t1.next$0();
    if (!first)
      $.getInterceptor(result).add$1(result, ", ");
    $.Collections__emitObject(t2, result, visiting);
  }
  t1 = $.getInterceptor(result);
  t1.add$1(result, isList ? "]" : "}");
  $.getInterceptor(visiting).removeLast$0(visiting);
};

$.Collections__emitObject = function(o, result, visiting) {
  var t1;
  if (typeof o === 'object' && o !== null && (o.constructor === Array || o.is$Collection()))
    if ($.Collections__containsRef(visiting, o)) {
      t1 = $.getInterceptor(result);
      t1.add$1(result, typeof o === 'object' && o !== null && (o.constructor === Array || o.is$List()) ? "[...]" : "{...}");
    } else
      $.Collections__emitCollection(o, result, visiting);
  else if (typeof o === 'object' && o !== null && o.is$Map())
    if ($.Collections__containsRef(visiting, o))
      $.getInterceptor(result).add$1(result, "{...}");
    else
      $.Maps__emitMap(o, result, visiting);
  else
    $.getInterceptor(result).add$1(result, o);
};

$.Collections__containsRef = function(c, ref) {
  var t1, t2;
  for (t1 = $.getInterceptor(c).iterator$0(c); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.XmlParser__parse = function(xml, withQuirks) {
  var p;
  if ($.getInterceptor(xml).get$isEmpty(xml) === true)
    throw $.$$throw($.CTC11);
  p = $.XmlParser$_internal(xml, withQuirks);
  p._parseElement$1($.XmlTokenizer$(p._xml));
  return p._root;
};

$.XmlParser$_internal = function(_xml, _withQuirks) {
  return new $.XmlParser(_xml, $.Queue_Queue(), _withQuirks, null);
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.EventListenerList$ = function(_ptr, _type) {
  return new $.EventListenerList(_ptr, _type);
};

$.XmlException$ = function(msg) {
  return new $.XmlException(msg, "", 0);
};

$.XmlException$withDebug = function(msg, debugXml, errorLocation) {
  return new $.XmlException(msg, debugXml, errorLocation);
};

$.XmlTokenizer$ = function(_xml) {
  var t1 = new $.XmlTokenizer($.CTC23, $.Queue_Queue(), $.List_List(null), _xml, null, 0, -1);
  t1.XmlTokenizer$1(_xml);
  return t1;
};

$.TextTrackEvents$ = function(_ptr) {
  return new $.TextTrackEvents(_ptr);
};

$.TextTrackCueEvents$ = function(_ptr) {
  return new $.TextTrackCueEvents(_ptr);
};

$._DOMWindowCrossFrame$ = function(_window) {
  return new $._DOMWindowCrossFrame(_window);
};

$._DOMWindowCrossFrame__createSafe = function(w) {
  var t1 = $.window();
  if (w == null ? t1 == null : w === t1)
    return w;
  else
    return $._DOMWindowCrossFrame$(w);
};

$.Element_Element$tag = function(tag) {
  return document.createElement(tag);
};

$.Element_Element$html = function(html) {
  return $._ElementFactoryProvider_createElement_html(html);
};

$.XmlToken$_internal = function(kind, _str, quoteKind) {
  return new $.XmlToken(kind, quoteKind, _str, null);
};

$.TestSection$ = function(level, xml) {
  var t1 = new $.TestSection(null, null, null, null, null, null, null, false, false, false, false);
  t1.TestSection$2(level, xml);
  return t1;
};

$.XmlText$ = function(text) {
  return new $.XmlText(text, $.CTC15, null);
};

$.XmlToken_XmlToken$string = function(s) {
  return $.XmlToken$_internal(4, s, -1);
};

$.XmlToken_XmlToken$quote = function(quoteKind) {
  return $.XmlToken$_internal(9, "", quoteKind);
};

$.TextTrackListEvents$ = function(_ptr) {
  return new $.TextTrackListEvents(_ptr);
};

$.XmlElement$ = function(name$, elements) {
  var t1 = new $.XmlElement(name$, $.XmlCollection$_internal(), $.makeLiteralMap([]), $.makeLiteralMap([]), $.CTC16, null);
  t1.XmlElement$2$elements(name$, elements);
  return t1;
};

$.XmlToken_XmlToken = function(kind) {
  return $.XmlToken$_internal(kind, "", -1);
};

$.XmlNode__stringifyInternal = function(b, n, indent, leadingWhiteSpace) {
  var t1, i, whitespace, t2;
  t1 = n.get$type();
  switch (t1) {
    case $.CTC16:
      $.propertyTypeCast(n, 'is$XmlElement');
      if (leadingWhiteSpace === true)
        $.getInterceptor(b).add$1(b, "\r" + $.S($.XmlNode__space(indent)));
      $.getInterceptor(b).add$1(b, "<" + $.S(n.get$name()));
      t1 = n.get$namespaces();
      if ($.gtB($.getInterceptor(t1).get$length(t1), 0)) {
        t1 = n.get$namespaces();
        $.getInterceptor(t1).forEach$1(t1, new $.XmlNode__stringifyInternal_anon(b));
      }
      t1 = n.get$attributes();
      if ($.gtB($.getInterceptor(t1).get$length(t1), 0)) {
        t1 = n.get$attributes();
        $.getInterceptor(t1).forEach$1(t1, new $.XmlNode__stringifyInternal_anon0(b));
      }
      $.getInterceptor(b).add$1(b, ">");
      if (n.get$hasChildren() === true)
        for (i = 0; t1 = n.get$children(), $.ltB(i, $.getInterceptor(t1).get$length(t1)); ++i) {
          whitespace = !(i > 0 && $.eqB($.index(n.get$children(), i - 1).get$type(), $.CTC15));
          $.XmlNode__stringifyInternal(b, $.index(n.get$children(), i), $.add(indent, 3), whitespace);
        }
      t1 = n.get$children();
      if ($.gtB($.getInterceptor(t1).get$length(t1), 0)) {
        t1 = n.get$children();
        t2 = !$.eqB($.getInterceptor(t1).get$last(t1).get$type(), $.CTC15);
        t1 = t2;
      } else
        t1 = false;
      if (t1)
        $.getInterceptor(b).add$1(b, "\r" + $.S($.XmlNode__space(indent)) + "</" + $.S(n.get$name()) + ">");
      else
        $.getInterceptor(b).add$1(b, "</" + $.S(n.get$name()) + ">");
      break;
    case $.CTC17:
    case $.CTC18:
      $.getInterceptor(b).add$1(b, $.getInterceptor(n).toString$0(n));
      break;
    case $.CTC15:
      $.getInterceptor(b).add$1(b, $.S(n));
      break;
    case $.CTC19:
    case $.CTC20:
      $.getInterceptor(b).add$1(b, "\r" + $.S(n));
      break;
    default:
      throw $.$$throw($.XmlException$("Node Type " + $.S(t1) + " is not supported."));
  }
};

$.XmlNode__space = function(amount) {
  var s, i;
  if (typeof amount !== 'number')
    return $.XmlNode__space$bailout(1, amount);
  s = $.StringBuffer_StringBuffer("");
  for (i = 0; i < amount; ++i)
    $.getInterceptor(s).add$1(s, " ");
  return $.getInterceptor(s).toString$0(s);
};

$.XmlNamespace$ = function(name$, uri) {
  return new $.XmlNamespace(name$, uri, $.CTC17, null);
};

$.XmlAttribute$ = function(name$, value) {
  return new $.XmlAttribute(name$, value, $.CTC18, null);
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$.DOMApplicationCacheEvents$ = function(_ptr) {
  return new $.DOMApplicationCacheEvents(_ptr);
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue());
};

$._Timer$ = function(milliSeconds, callback) {
  var t1 = new $._Timer(true, null);
  t1._Timer$2(milliSeconds, callback);
  return t1;
};

$._Timer$repeating = function(milliSeconds, callback) {
  var t1 = new $._Timer(false, null);
  t1._Timer$repeating$2(milliSeconds, callback);
  return t1;
};

$._HashMapImpl$ = function() {
  var t1 = new $._HashMapImpl(null, null, null, null, null);
  t1._HashMapImpl$0();
  return t1;
};

$._HashMapImpl__computeLoadLimit = function(capacity) {
  return $.tdiv(capacity * 3, 4);
};

$._HashMapImpl__nextProbe = function(currentProbe, numberOfProbes, length$) {
  return (currentProbe + numberOfProbes & length$ - 1) >>> 0;
};

$.HashMap_HashMap = function() {
  return $._HashMapImpl$();
};

$.UListElement_UListElement = function() {
  return $.document().$$dom_createElement$1("ul");
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.add($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if ("\nThis program is using an experimental feature called \"mirrors\".  As\ncurrently implemented, mirrors do not work with minification, and will\ncause spurious errors depending on how code was optimized.\n\nThe authors of this program are aware of these problems and have\ndecided the thrill of using an experimental feature is outweighing the\nrisks.  Furthermore, the authors of this program understand that\nlong-term, to fix the problems mentioned above, mirrors may have\nnegative impact on size and performance of Dart programs compiled to\nJavaScript.\n" === string)
    $.Primitives_mirrorsEnabled = true;
  else if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw 'Unable to print message: ' + String(string);
};

$.Primitives_parseInt = function(string) {
  var match, base, result;
  $.checkString(string);
  match = /^\s*[+-]?(?:0(x)[a-f0-9]+|\d+)\s*$/i.exec(string);
  if (match == null)
    throw $.$$throw($.FormatException$(string));
  base = !($.index(match, 1) == null) ? 16 : 10;
  result = parseInt(string, base);
  if ($.getInterceptor(result).get$isNaN(result) === true)
    throw $.$$throw($.FormatException$(string));
  return result;
};

$.Primitives_objectTypeName = function(object) {
  var name$, decompiled;
  name$ = $.constructorNameFallback(object);
  if ($.eqB(name$, "Object")) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === 'string')
      name$ = decompiled;
  }
  return $.getInterceptor(name$).charCodeAt$1(name$, 0) === 36 ? $.getInterceptor(name$).substring$1(name$, 1) : name$;
};

$.Primitives_objectToString = function(object) {
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.Primitives_newList = function(length$) {
  var result;
  if (length$ == null)
    return new Array();
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$) || length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  result = new Array(length$);
  result.fixed$length = true;
  return result;
};

$.Primitives_dateNow = function() {
  return Date.now();
};

$.Primitives_lazyAsJsDate = function(receiver) {
  if (receiver.date === (void 0))
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
};

$.Primitives_getYear = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0) : ($.Primitives_lazyAsJsDate(receiver).getFullYear() + 0);
};

$.Primitives_getMonth = function(receiver) {
  return receiver.isUtc === true ? $.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : $.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
};

$.Primitives_getDay = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0) : ($.Primitives_lazyAsJsDate(receiver).getDate() + 0);
};

$.Primitives_getHours = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0) : ($.Primitives_lazyAsJsDate(receiver).getHours() + 0);
};

$.Primitives_getMinutes = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0) : ($.Primitives_lazyAsJsDate(receiver).getMinutes() + 0);
};

$.Primitives_getSeconds = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0) : ($.Primitives_lazyAsJsDate(receiver).getSeconds() + 0);
};

$.Primitives_getMilliseconds = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0) : ($.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0);
};

$.RangeError$ = function(message) {
  return new $.RangeError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.XmlProcessingInstruction$ = function(text) {
  return new $.XmlProcessingInstruction(text, $.CTC19, null);
};

$.XmlCDATA$ = function(text) {
  return new $.XmlCDATA(text, $.CTC20, null);
};

$.Maps_mapToString = function(m) {
  var result = $.StringBuffer_StringBuffer("");
  $.Maps__emitMap(m, result, $.List_List(null));
  return $.getInterceptor(result).toString$0(result);
};

$.Maps__emitMap = function(m, result, visiting) {
  var t1 = {};
  $.getInterceptor(visiting).add$1(visiting, m);
  $.getInterceptor(result).add$1(result, "{");
  t1.first_1 = true;
  $.getInterceptor(m).forEach$1(m, new $.Maps__emitMap_anon(result, t1, visiting));
  $.getInterceptor(result).add$1(result, "}");
  $.getInterceptor(visiting).removeLast$0(visiting);
};

$.StringBuffer_StringBuffer = function(content$) {
  return $._StringBufferImpl$(content$);
};

$.DedicatedWorkerContextEvents$ = function(_ptr) {
  return new $.DedicatedWorkerContextEvents(_ptr);
};

$.WorkerContextEvents$ = function(_ptr) {
  return new $.WorkerContextEvents(_ptr);
};

$._StringBufferImpl$ = function(content$) {
  var t1 = new $._StringBufferImpl(null, null);
  t1._StringBufferImpl$1(content$);
  return t1;
};

$.Strings_join = function(strings, separator) {
  $.checkNull(strings);
  return $.stringJoinUnchecked($.Strings__toJsStringArray(strings), separator);
};

$.Strings__toJsStringArray = function(strings) {
  var length$, i, string, array;
  if (typeof strings !== 'string' && (typeof strings !== 'object' || strings === null || strings.constructor !== Array && !strings.is$JavaScriptIndexingBehavior()))
    return $.Strings__toJsStringArray$bailout(1, strings);
  $.checkNull(strings);
  length$ = strings.length;
  if ($.isJsArray(strings)) {
    for (i = 0; i < length$; ++i) {
      if (i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
    }
    array = strings;
  } else {
    array = $.List_List(length$);
    for (i = 0; i < length$; ++i) {
      if (i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
      array[i] = string;
    }
  }
  return array;
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$.Text_Text = function(data) {
  return document.createTextNode(data);
};

$.JSSyntaxRegExp$ = function(pattern, ignoreCase, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, ignoreCase);
};

$.JSSyntaxRegExp__globalVersionOf = function(other) {
  var t1, t2, re;
  t1 = other.get$pattern();
  t2 = other.get$multiLine();
  re = $.JSSyntaxRegExp$(t1, other.get$ignoreCase(), t2);
  re._re = $.regExpMakeNative(re, true);
  return re;
};

$.CastErrorImplementation$ = function(actualType, expectedType) {
  return new $.CastErrorImplementation(actualType, expectedType);
};

$.DocumentEvents$ = function(_ptr) {
  return new $.DocumentEvents(_ptr);
};

$.IllegalJSRegExpException$ = function(_pattern, _errmsg) {
  return new $.IllegalJSRegExpException(_pattern, _errmsg);
};

$.Exception_Exception = function(message) {
  return $._ExceptionImplementation$(message);
};

$.Queue_Queue = function() {
  return $.DoubleLinkedQueue$();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.LinkedHashMap_LinkedHashMap = function() {
  return $._LinkedHashMapImpl$();
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$.SpanElement_SpanElement = function() {
  return $.document().$$dom_createElement$1("span");
};

$._LinkedHashMapImpl$ = function() {
  var t1 = new $._LinkedHashMapImpl(null, null);
  t1._LinkedHashMapImpl$0();
  return t1;
};

$._KeyValuePair$ = function(key, value) {
  return new $._KeyValuePair(key, value);
};

$.Completer_Completer = function() {
  return $._CompleterImpl$();
};

$.EventSourceEvents$ = function(_ptr) {
  return new $.EventSourceEvents(_ptr);
};

$._ReceivePortImpl$ = function() {
  var t1 = $._ReceivePortImpl__nextFreeId;
  $._ReceivePortImpl__nextFreeId = $.add(t1, 1);
  t1 = new $._ReceivePortImpl(t1, null);
  t1._ReceivePortImpl$0();
  return t1;
};

$.DocumentFragment_DocumentFragment = function() {
  return $.document().createDocumentFragment$0();
};

$.DocumentFragment_DocumentFragment$html = function(html) {
  return $._DocumentFragmentFactoryProvider_createDocumentFragment_html(html);
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$._PendingSendPortFinder$ = function() {
  var t1 = $._MessageTraverserVisitedMap$();
  t1 = new $._PendingSendPortFinder([], t1);
  t1._PendingSendPortFinder$0();
  return t1;
};

$.Futures_wait = function(futures) {
  var t1, completer, result, values, i, future;
  t1 = {};
  if (typeof futures !== 'string' && (typeof futures !== 'object' || futures === null || futures.constructor !== Array && !futures.is$JavaScriptIndexingBehavior()))
    return $.Futures_wait$bailout(1, futures, t1);
  if ($.getInterceptor(futures).get$isEmpty(futures) === true)
    return $.Future_Future$immediate($.CTC22);
  completer = $.Completer_Completer();
  result = completer.get$future();
  t1.remaining_1 = futures.length;
  values = $.List_List(futures.length);
  for (i = 0; i < futures.length; ++i) {
    future = futures[i];
    future.then$1(new $.Futures_wait_anon(i, t1, completer, values, result));
    future.handleException$1(new $.Futures_wait_anon0(result, completer, future));
  }
  return result;
};

$.Date_Date$now = function() {
  return $._DateImpl$now();
};

$.Date_Date$fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch, isUtc) {
  return $._DateImpl$fromMillisecondsSinceEpoch(millisecondsSinceEpoch, isUtc);
};

$.FileReaderEvents$ = function(_ptr) {
  return new $.FileReaderEvents(_ptr);
};

$._CompleterImpl$ = function() {
  return new $._CompleterImpl($._FutureImpl$());
};

$._FutureImpl$ = function() {
  return new $._FutureImpl(false, null, null, null, false, false, [], [], []);
};

$._FutureImpl__FutureImpl$immediate = function(value) {
  var res = $._FutureImpl$();
  res._setValue$1(value);
  return res;
};

$.FileWriterEvents$ = function(_ptr) {
  return new $.FileWriterEvents(_ptr);
};

$.FutureAlreadyCompleteException$ = function() {
  return new $.FutureAlreadyCompleteException();
};

$.FutureUnhandledException$ = function(source, stackTrace) {
  return new $.FutureUnhandledException(source, stackTrace);
};

$.FutureNotCompleteException$ = function() {
  return new $.FutureNotCompleteException();
};

$.WebSocketEvents$ = function(_ptr) {
  return new $.WebSocketEvents(_ptr);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.WorkerEvents$ = function(_ptr) {
  return new $.WorkerEvents(_ptr);
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$.FrameSetElementEvents$ = function(_ptr) {
  return new $.FrameSetElementEvents(_ptr);
};

$.DoubleLinkedQueue$ = function() {
  var t1 = new $.DoubleLinkedQueue(null);
  t1.DoubleLinkedQueue$0();
  return t1;
};

$._DoubleLinkedQueueIterator$ = function(_sentinel) {
  var t1 = new $._DoubleLinkedQueueIterator(_sentinel, null);
  t1._DoubleLinkedQueueIterator$1(_sentinel);
  return t1;
};

$._DoubleLinkedQueueEntrySentinel$ = function() {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$.DoubleLinkedQueueEntry$ = function(e) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$.HttpRequestEvents$ = function(_ptr) {
  return new $.HttpRequestEvents(_ptr);
};

$.Slide$ = function(element, scale, x, y, z, heading, pitch, roll) {
  var t1 = new $.Slide(element, false, scale, null, null);
  t1.ThreeDimensionalObj$7(scale, x, y, z, heading, pitch, roll);
  t1.Slide$8(element, scale, x, y, z, heading, pitch, roll);
  return t1;
};

$.HttpRequestUploadEvents$ = function(_ptr) {
  return new $.HttpRequestUploadEvents(_ptr);
};

$.ThreeDimensionalObj$ = function(scale, x, y, z, heading, pitch, roll) {
  var t1 = new $.ThreeDimensionalObj(scale, null, null);
  t1.ThreeDimensionalObj$7(scale, x, y, z, heading, pitch, roll);
  return t1;
};

$.BasicSlideShow$ = function(viewBox) {
  var t1 = new $.BasicSlideShow(0, $.List_List(null), $.List_List(null), null, false);
  t1.SlideShow$1(viewBox);
  return t1;
};

$.ParagraphElement_ParagraphElement = function() {
  return $.document().$$dom_createElement$1("p");
};

$.Camera$ = function(viewBox) {
  var t1 = new $.Camera(viewBox, $.DivElement_DivElement(), 1, null, null);
  t1.ThreeDimensionalObj$7(1, 0, 0, 0, 0, 0, 0);
  t1.Camera$1(viewBox);
  return t1;
};

$.IDBDatabaseEvents$ = function(_ptr) {
  return new $.IDBDatabaseEvents(_ptr);
};

$.DynamicSlide$ = function(element, scale, x, y, z, heading, pitch, roll) {
  var t1 = new $.DynamicSlide(null, element, false, scale, null, null);
  t1.ThreeDimensionalObj$7(scale, x, y, z, heading, pitch, roll);
  t1.Slide$8(element, scale, x, y, z, heading, pitch, roll);
  t1.DynamicSlide$8(element, scale, x, y, z, heading, pitch, roll);
  return t1;
};

$.XmlNode__space$bailout = function(state0, amount) {
  var s, i;
  s = $.StringBuffer_StringBuffer("");
  for (i = 0; $.ltB(i, amount); ++i)
    $.getInterceptor(s).add$1(s, " ");
  return $.getInterceptor(s).toString$0(s);
};

$._Lists_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var i;
  if ($.geB(startIndex, $.getInterceptor(a).get$length(a)))
    return -1;
  if ($.ltB(startIndex, 0))
    startIndex = 0;
  for (i = startIndex; $.ltB(i, endIndex); i = $.add(i, 1))
    if ($.eqB($.index(a, i), element))
      return i;
  return -1;
};

$._Lists_getRange$bailout = function(state0, a, start, length$, accumulator) {
  var end, i;
  if ($.ltB(length$, 0))
    throw $.$$throw($.ArgumentError$("length"));
  if ($.ltB(start, 0))
    throw $.$$throw($.RangeError$value(start));
  end = $.add(start, length$);
  if ($.gtB(end, $.getInterceptor(a).get$length(a)))
    throw $.$$throw($.RangeError$value(end));
  for (i = start; $.ltB(i, end); i = $.add(i, 1))
    $.getInterceptor(accumulator).add$1(accumulator, $.index(a, i));
  return accumulator;
};

$.Futures_wait$bailout = function(state0, futures, t1) {
  var completer, result, values, i, future;
  if ($.getInterceptor(futures).get$isEmpty(futures) === true)
    return $.Future_Future$immediate($.CTC22);
  completer = $.Completer_Completer();
  result = completer.get$future();
  t1.remaining_1 = $.getInterceptor(futures).get$length(futures);
  values = $.List_List($.getInterceptor(futures).get$length(futures));
  for (i = 0; $.ltB(i, $.getInterceptor(futures).get$length(futures)); ++i) {
    future = $.index(futures, i);
    future.then$1(new $.Futures_wait_anon(i, t1, completer, values, result));
    future.handleException$1(new $.Futures_wait_anon0(result, completer, future));
  }
  return result;
};

$.Strings__toJsStringArray$bailout = function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      strings = env0;
      break;
    case 2:
      length$ = env1;
      strings = env0;
      break;
    case 3:
      length$ = env2;
      array = env1;
      strings = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      $.checkNull(strings);
      length$ = $.getInterceptor(strings).get$length(strings);
    case 2:
      state0 = 0;
    case 3:
      var strings, length$, i, string, array;
      if (state0 === 0 && $.isJsArray(strings)) {
        for (i = 0; $.ltB(i, length$); ++i) {
          string = $.index(strings, i);
          if (!(typeof string === 'string'))
            throw $.$$throw($.ArgumentError$(string));
        }
        array = strings;
      } else
        switch (state0) {
          case 0:
            array = $.List_List(length$);
          case 3:
            state0 = 0;
            for (i = 0; $.ltB(i, length$); ++i) {
              string = $.index(strings, i);
              if (!(typeof string === 'string'))
                throw $.$$throw($.ArgumentError$(string));
              $.indexSet(array, i, string);
            }
        }
      return array;
  }
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var i, j;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j) {
      if (i < 0 || i >= src.length)
        throw $.ioore(i);
      $.indexSet(dst, j, src[i]);
    }
  else
    for (j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= src.length)
        throw $.ioore(i);
      $.indexSet(dst, j, src[i]);
    }
};

$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$._timerFactory.call$3 = $._timerFactory;
$._timerFactory.$name = "_timerFactory";
$.onSuccess.call$1 = $.onSuccess;
$.onSuccess.$name = "onSuccess";
$.toStringWrapper.call$0 = $.toStringWrapper;
$.toStringWrapper.$name = "toStringWrapper";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
Isolate.$finishClasses($$);
$$ = {};
$.CTC3 = new Isolate.$isolateProperties.JSDouble();
$.CTC0 = new Isolate.$isolateProperties.JSString();
$.CTC35 = new Isolate.$isolateProperties.Returns("num|String|bool|=List|=Object|Blob|File|ArrayBuffer|ArrayBufferView");
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CTC22 = Isolate.makeConstantList([]);
$.CTC2 = new Isolate.$isolateProperties.JSInt();
$.CTC10 = new Isolate.$isolateProperties.ConstantMap(0, {}, Isolate.$isolateProperties.CTC22);
$.CTC36 = new Isolate.$isolateProperties.Returns("_NodeList");
$.CTC37 = new Isolate.$isolateProperties.Creates("=List");
$.CTC38 = new Isolate.$isolateProperties.Creates("_NodeList");
$.CTC26 = new Isolate.$isolateProperties.XmlException("Nested comments not allowed.", "", 0);
$.CTC30 = new Isolate.$isolateProperties.XmlException("Nested PI not allowed.", "", 0);
$.CTC39 = new Isolate.$isolateProperties.Creates("num|String|bool|=List|=Object|Blob|File|ArrayBuffer|ArrayBufferView");
$.CTC31 = Isolate.makeConstantList([60, 62, 33, 58, 47, 34, 39, 61]);
$.CTC19 = new Isolate.$isolateProperties.XmlNodeType("PI");
$.CTC13 = new Isolate.$isolateProperties.XmlException("Unexpected end of file.  Not all tags were closed.", "", 0);
$.CTC40 = new Isolate.$isolateProperties.Creates("_EntryArray");
$.CTC41 = new Isolate.$isolateProperties.Returns("_EntryArray");
$.CTC23 = Isolate.makeConstantList(["<!--", "<![CDATA[", "<?", "</"]);
$.CTC = new Isolate.$isolateProperties.NullThrownError();
$.CTC12 = new Isolate.$isolateProperties.XmlException("Text not allowed in root level. Use comments instead.", "", 0);
$.CTC15 = new Isolate.$isolateProperties.XmlNodeType("Text");
$.CTC11 = new Isolate.$isolateProperties.XmlException("Nothing to parse.", "", 0);
$.CTC24 = Isolate.makeConstantList([32, 9, 10, 13]);
$.CTC42 = new Isolate.$isolateProperties.Creates("IDBRequest");
$.CTC43 = new Isolate.$isolateProperties.Returns("IDBRequest");
$.CTC27 = new Isolate.$isolateProperties.XmlException("End CDATA tag not found.", "", 0);
$.CTC44 = new Isolate.$isolateProperties.Returns("=List|=Object|num|String");
$.CTC45 = new Isolate.$isolateProperties.Creates("=List|=Object|num|String");
$.CTC8 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CTC46 = Isolate.makeConstantList(["body", "head", "caption", "td", "colgroup", "col", "tr", "tbody", "tfoot", "thead", "track"]);
$.CTC9 = new Isolate.$isolateProperties.ConstantMap(11, {"body": "html", "head": "html", "caption": "table", "td": "tr", "colgroup": "table", "col": "colgroup", "tr": "tbody", "tbody": "table", "tfoot": "table", "thead": "table", "track": "audio"}, Isolate.$isolateProperties.CTC46);
$.CTC34 = new Isolate.$isolateProperties.Object();
$.CTC28 = new Isolate.$isolateProperties.XmlException("Nested CDATA not allowed.", "", 0);
$.CTC33 = new Isolate.$isolateProperties.XmlException("CDATA nodes are not supported in the top level.", "", 0);
$.CTC16 = new Isolate.$isolateProperties.XmlNodeType("Element");
$.CTC21 = new Isolate.$isolateProperties.XmlException("Element not found.", "", 0);
$.CTC20 = new Isolate.$isolateProperties.XmlNodeType("CDATA");
$.CTC17 = new Isolate.$isolateProperties.XmlNodeType("Namespace");
$.CTC18 = new Isolate.$isolateProperties.XmlNodeType("Attribute");
$.CTC29 = new Isolate.$isolateProperties.XmlException("End PI tag not found.", "", 0);
$.CTC32 = new Isolate.$isolateProperties.XmlException("PI nodes are not supported in the top level.", "", 0);
$.CTC47 = new Isolate.$isolateProperties.Creates("ArrayBuffer|Blob|Document|=Object|=List|String|num");
$.CTC48 = new Isolate.$isolateProperties.Returns("_FileList");
$.CTC49 = new Isolate.$isolateProperties.Creates("_FileList");
$.CTC14 = new Isolate.$isolateProperties.XmlException("Unexpected end of file.", "", 0);
$.CTC7 = new Isolate.$isolateProperties.ObjectInterceptor();
$.CTC6 = new Isolate.$isolateProperties.JSFunction();
$.CTC4 = new Isolate.$isolateProperties.JSBool();
$.CTC5 = new Isolate.$isolateProperties.JSNull();
$.CTC50 = new Isolate.$isolateProperties.Creates("Null");
$.CTC1 = new Isolate.$isolateProperties.JSArray();
$.CTC25 = new Isolate.$isolateProperties.XmlException("End comment tag not found.", "", 0);
$.XmlTokenizer_B = 33;
$.XmlTokenizer__reserved = Isolate.$isolateProperties.CTC31;
$.XmlTokenizer__whiteSpace = Isolate.$isolateProperties.CTC24;
$._cachedBrowserPrefix = null;
$._serializedScriptValue = "num|String|bool|=List|=Object|Blob|File|ArrayBuffer|ArrayBufferView";
$._annotation_Creates_SerializedScriptValue = Isolate.$isolateProperties.CTC39;
$._annotation_Returns_SerializedScriptValue = Isolate.$isolateProperties.CTC35;
$._idbKey = "=List|=Object|num|String";
$._annotation_Creates_IDBKey = Isolate.$isolateProperties.CTC45;
$.XmlToken_LT = 1;
$._annotation_Returns_IDBKey = Isolate.$isolateProperties.CTC44;
$.XmlToken_QUESTION = 3;
$.XmlToken_STRING = 4;
$.XmlToken_BANG = 5;
$.XmlToken_COLON = 6;
$._lastCreatedSlideShow = null;
$.XmlToken_SLASH = 7;
$.XmlToken_EQ = 8;
$.XmlToken_QUOTE = 9;
$.XmlToken_GT = 2;
$.XmlToken_IGNORE = 10;
$.XmlToken_DASH = 11;
$.XmlToken_START_COMMENT = 12;
$.XmlToken_END_COMMENT = 13;
$.XmlToken_START_CDATA = 14;
$.XmlToken_END_CDATA = 15;
$.XmlToken_START_PI = 16;
$.XmlToken_END_PI = 17;
$.XmlToken_NAMESPACE = 18;
$._ReceivePortImpl__nextFreeId = 1;
$._getTypeNameOf = null;
$.XmlNodeType_Element = Isolate.$isolateProperties.CTC16;
$.XmlNodeType_Attribute = Isolate.$isolateProperties.CTC18;
$.XmlNodeType_Text = Isolate.$isolateProperties.CTC15;
$.XmlNodeType_Namespace = Isolate.$isolateProperties.CTC17;
$.XmlNodeType_CDATA = Isolate.$isolateProperties.CTC20;
$.XmlNodeType_PI = Isolate.$isolateProperties.CTC19;
$.MIRROR_OPT_IN_MESSAGE = "\nThis program is using an experimental feature called \"mirrors\".  As\ncurrently implemented, mirrors do not work with minification, and will\ncause spurious errors depending on how code was optimized.\n\nThe authors of this program are aware of these problems and have\ndecided the thrill of using an experimental feature is outweighing the\nrisks.  Furthermore, the authors of this program understand that\nlong-term, to fix the problems mentioned above, mirrors may have\nnegative impact on size and performance of Dart programs compiled to\nJavaScript.\n";
$._TimerFactory__factory = null;
$.HttpRequest_DONE = 4;
$._HashMapImpl__DELETED_KEY = Isolate.$isolateProperties.CTC8;
$._HashMapImpl__INITIAL_CAPACITY = 8;
$._DateImpl__MAX_MILLISECONDS_SINCE_EPOCH = 8640000000000000;
$.currentSlidePosition = -15.5;
$.camTransDuration = 1;
$.camX = 1330;
$.camY = 400;
$.camZ = 50000;
$.camZr = 0;
$.camYr = 0;
$.camXr = 0;
$.Primitives_hashCodeSeed = 0;
$.Primitives_mirrorsEnabled = false;
$.Primitives_DOLLAR_CHAR_VALUE = 36;
$.XmlTokenizer_TAB = 9;
$.XmlTokenizer_NEW_LINE = 10;
$.XmlTokenizer_SPACE = 32;
$.XmlTokenizer_QUOTE = 34;
$.XmlTokenizer_CARRIAGE_RETURN = 13;
$.XmlTokenizer_SQUOTE = 39;
$.XmlTokenizer_SLASH = 47;
$.XmlTokenizer_COLON = 58;
$.XmlTokenizer_LT = 60;
$.XmlTokenizer_GT = 62;
$.XmlTokenizer_EQ = 61;
Isolate.$lazy($, 'slideshow', 'slideshow', 'get$slideshow', function() {
  return $.BasicSlideShow$($.query("#viewBox"));
});
Isolate.$lazy($, 'nextButton', 'nextButton', 'get$nextButton', function() {
  return $.query("#nextButton");
});
Isolate.$lazy($, 'backButton', 'backButton', 'get$backButton', function() {
  return $.query("#backButton");
});
Isolate.$lazy($, 'continueButton', 'continueButton', 'get$continueButton', function() {
  return $.query("#nextButton");
});
Isolate.$lazy($, 'explainButton', 'explainButton', 'get$explainButton', function() {
  return $.query("#explainButton");
});
Isolate.$lazy($, 'finishButton', 'finishButton', 'get$finishButton', function() {
  return $.query("#finishButton");
});
Isolate.$lazy($, '_START_TAG_REGEXP', '_START_TAG_REGEXP', 'get$_START_TAG_REGEXP', function() {
  return $.RegExp_RegExp("<(\\w+)", false, false);
});
Isolate.$lazy($, 'stampsEarned', 'stampsEarned', 'get$stampsEarned', function() {
  return $.List_List(null);
});
Isolate.$lazy($, 'quoteRegExp', 'quoteRegExp', 'get$quoteRegExp', function() {
  return $.JSSyntaxRegExp$("[-[\\]{}()*+?.,\\\\^$|#\\s]", false, false);
});
Isolate.$lazy($, 'test', 'test', 'get$test', function() {
  return $.Test$();
});
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''] || [];
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastCharCode = field.charCodeAt(len - 1);
    var needsAccessor = (lastCharCode & 63) >= 60;
    if (needsAccessor) {
      var needsGetter = (lastCharCode & 3) > 0;
      var needsSetter = (lastCharCode & 2) == 0;
      var renaming = (lastCharCode & 64) != 0;
      var accessorName = field = field.substring(0, len - 1);
      if (renaming) {
        var divider = field.indexOf(":");
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (needsGetter) {
        var getterString = "return this." + field + ";";
        prototype["get$" + accessorName] = new Function(getterString);
      }
      if (needsSetter) {
        var setterString = "this." + field + " = v;";
        prototype["set$" + accessorName] = new Function("v", setterString);
      }
    }
    return field;
  };
  for (var i = 0; i < fields.length; i++) {
    generateGetterSetter(fields[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method !== '') {
      if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table) {
    $.defineProperty(Object.prototype, key, table[key]);
  }
})({
 is$JavaScriptIndexingBehavior: function() { return false; },
 is$List: function() { return false; },
 is$File: function() { return false; },
 toString$0: function() { return $.toStringForNativeObject(this); },
 is$Blob: function() { return false; },
 is$ImageData: function() { return false; },
 is$Collection: function() { return false; },
 is$ArrayBufferView: function() { return false; },
 is$Map: function() { return false; },
 is$ArrayBuffer: function() { return false; },
 is$_FileList: function() { return false; },
 get$hashCode: function() { return $.hashCodeForNativeObject(this); },
 is$Element: function() { return false; }
});

$.$defineNativeClass('AbstractWorker', {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.AbstractWorkerEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLAnchorElement', {"": ["name>", "type="],
 toString$0: function() {
  return this.toString();
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('WebKitAnimation', {"": ["name>"]
});

$.$defineNativeClass('HTMLAppletElement', {"": ["height<", "name>", "width<"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLAreaElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('ArrayBuffer', {
 is$ArrayBuffer: function() { return true; }
});

$.$defineNativeClass('ArrayBufferView', {
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Attr', {"": ["name>", "value="]
});

$.$defineNativeClass('AudioBuffer', {"": ["length>"]
});

$.$defineNativeClass('AudioContext', {
 get$on: function() {
  return $.AudioContextEvents$(this);
}
});

$.$defineNativeClass('AudioParam', {"": ["name>", "value="]
});

$.$defineNativeClass('HTMLBRElement', {
 clear$0: function() { return this.clear.call$0(); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLBaseElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLBaseFontElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('BatteryManager', {
 get$on: function() {
  return $.BatteryManagerEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('BiquadFilterNode', {"": ["type="]
});

$.$defineNativeClass('Blob', {"": ["type>"],
 is$Blob: function() { return true; }
});

$.$defineNativeClass('HTMLBodyElement', {
 get$on: function() {
  return $.BodyElementEvents$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLButtonElement', {"": ["disabled<", "name>", "type=", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('CSSFontFaceRule', {"": ["style>"]
});

$.$defineNativeClass('WebKitCSSKeyframeRule', {"": ["style>"]
});

$.$defineNativeClass('WebKitCSSKeyframesRule', {"": ["name>"]
});

$.$defineNativeClass('WebKitCSSMatrix', {
 scale$3: function(scaleX, scaleY, scaleZ) {
  return this.scale(scaleX,scaleY,scaleZ);
},
 get$scale: function() { return new $.BoundClosure(this, 'scale$3'); },
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('CSSPageRule', {"": ["style>"]
});

$.$defineNativeClass('CSSRule', {"": ["type>"]
});

$.$defineNativeClass('CSSStyleDeclaration', {"": ["length>"],
 _getPropertyValue$1: function(propertyName) {
  return this.getPropertyValue(propertyName);
},
 getPropertyValue$1: function(propertyName) {
  var propValue = this._getPropertyValue$1(propertyName);
  return !(propValue == null) ? propValue : "";
},
 setProperty$3: function(propertyName, value, priority) {
  this.setProperty(propertyName, value, priority);
  if (!!this.setAttribute)
    this.setAttribute(propertyName, value);
},
 set$backgroundImage: function(value) {
  this.setProperty$3("background-image", value, "");
},
 set$boxShadow: function(value) {
  this.setProperty$3("box-shadow", value, "");
},
 get$clear: function() {
  return this.getPropertyValue$1("clear");
},
 clear$0: function() { return this.get$clear().call$0(); },
 get$display: function() {
  return this.getPropertyValue$1("display");
},
 display$0: function() { return this.get$display().call$0(); },
 get$filter: function() {
  return this.getPropertyValue$1($.S($._browserPrefix()) + "filter");
},
 filter$1: function(arg0) { return this.get$filter().call$1(arg0); },
 filter$3: function(arg0, arg1, arg2) { return this.get$filter().call$3(arg0, arg1, arg2); },
 set$fontFamily: function(value) {
  this.setProperty$3("font-family", value, "");
},
 set$fontSize: function(value) {
  this.setProperty$3("font-size", value, "");
},
 set$height: function(value) {
  this.setProperty$3("height", value, "");
},
 set$marginLeft: function(value) {
  this.setProperty$3("margin-left", value, "");
},
 set$marginRight: function(value) {
  this.setProperty$3("margin-right", value, "");
},
 set$marginTop: function(value) {
  this.setProperty$3("margin-top", value, "");
},
 set$opacity: function(value) {
  this.setProperty$3("opacity", value, "");
},
 get$position: function() {
  return this.getPropertyValue$1("position");
},
 set$position: function(value) {
  this.setProperty$3("position", value, "");
},
 set$src: function(value) {
  this.setProperty$3("src", value, "");
},
 set$textAlign: function(value) {
  this.setProperty$3("text-align", value, "");
},
 set$top: function(value) {
  this.setProperty$3("top", value, "");
},
 set$transform: function(value) {
  this.setProperty$3($.S($._browserPrefix()) + "transform", value, "");
},
 set$transformOriginX: function(value) {
  this.setProperty$3($.S($._browserPrefix()) + "transform-origin-x", value, "");
},
 set$transformOriginY: function(value) {
  this.setProperty$3($.S($._browserPrefix()) + "transform-origin-y", value, "");
},
 set$transformOriginZ: function(value) {
  this.setProperty$3($.S($._browserPrefix()) + "transform-origin-z", value, "");
},
 set$transformStyle: function(value) {
  this.setProperty$3($.S($._browserPrefix()) + "transform-style", value, "");
},
 set$transition: function(value) {
  this.setProperty$3($.S($._browserPrefix()) + "transition", value, "");
},
 set$visibility: function(value) {
  this.setProperty$3("visibility", value, "");
},
 set$width: function(value) {
  this.setProperty$3("width", value, "");
},
 set$zIndex: function(value) {
  this.setProperty$3("z-index", value, "");
}
});

$.$defineNativeClass('CSSStyleRule', {"": ["style>"]
});

$.$defineNativeClass('HTMLCanvasElement', {"": ["height<", "width<"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('CanvasRenderingContext2D', {"": ["textAlign<"],
 scale$2: function(sx, sy) {
  return this.scale(sx,sy);
},
 get$scale: function() { return new $.BoundClosure0(this, 'scale$2'); }
});

$.$defineNativeClass('CharacterData', {"": ["length>"],
 remove$0: function() {
  return this.remove();
}
});

Console = (typeof console == 'undefined' ? {} : console);
Console.group$1 = function(arg) {
  return this.group(arg);
};
$.$defineNativeClass('HTMLContentElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLDListElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('DOMApplicationCache', {"": ["status>"],
 get$on: function() {
  return $.DOMApplicationCacheEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('DOMError', {"": ["name>"]
});

$.$defineNativeClass('DOMException', {"": ["name>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMFileSystem', {"": ["name>"]
});

$.$defineNativeClass('DOMFileSystemSync', {"": ["name>"]
});

$.$defineNativeClass('MimeType', {"": ["type>"]
});

$.$defineNativeClass('MimeTypeArray', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Plugin', {"": ["length>", "name>"]
});

$.$defineNativeClass('PluginArray', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Selection', {"": ["type>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMSettableTokenList', {"": ["value="]
});

$.$defineNativeClass('DOMTokenList', {"": ["length>"],
 contains$1: function(token) {
  return this.contains(token);
},
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('HTMLDataListElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('DataTransferItem', {"": ["kind>", "type>"]
});

$.$defineNativeClass('DataTransferItemList', {"": ["length>"],
 add$2: function(data_OR_file, type) {
  return this.add(data_OR_file,type);
},
 add$1: function(data_OR_file) {
  return this.add(data_OR_file);
},
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('DedicatedWorkerContext', {
 get$on: function() {
  return $.DedicatedWorkerContextEvents$(this);
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
}
});

$.$defineNativeClass('HTMLDetailsElement', {
 open$3: function(arg0, arg1, arg2) { return this.open.call$3(arg0, arg1, arg2); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLDirectoryElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLDivElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('Document', {"": ["readyState>"],
 get$on: function() {
  return $.DocumentEvents$(this);
},
 createDocumentFragment$0: function() {
  return this.createDocumentFragment();
},
 $$dom_createElement$1: function(tagName) {
  return this.createElement(tagName);
},
 $$dom_createEvent$1: function(eventType) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$$dom_createEvent$1')) {
  {
  return this.createEvent(eventType);
}
  } else {
    return Object.prototype.$$dom_createEvent$1.call(this, eventType);
  }

},
 $$dom_getElementById$1: function(elementId) {
  return this.getElementById(elementId);
},
 $$dom_getElementsByName$1: function(elementName) {
  return this.getElementsByName(elementName);
},
 $$dom_getElementsByTagName$1: function(tagname) {
  return this.getElementsByTagName(tagname);
},
 $$dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 $$dom_querySelectorAll$1: function(selectors) {
  return this.querySelectorAll(selectors);
},
 query$1: function(selectors) {
  if ($.RegExp_RegExp("^#[_a-zA-Z]\\w*$", false, false).hasMatch$1(selectors) === true)
    return this.$$dom_getElementById$1($.getInterceptor(selectors).substring$1(selectors, 1));
  return this.$$dom_querySelector$1(selectors);
},
 queryAll$1: function(selectors) {
  var mutableMatches, len, copyOfMatches, t1, i;
  if ($.RegExp_RegExp("^\\[name=[\"'][^'\"]+['\"]\\]$", false, false).hasMatch$1(selectors) === true) {
    mutableMatches = this.$$dom_getElementsByName$1($.getInterceptor(selectors).substring$2(selectors, 7, selectors.length - 2));
    if (typeof mutableMatches !== 'string' && (typeof mutableMatches !== 'object' || mutableMatches === null || mutableMatches.constructor !== Array && !mutableMatches.is$JavaScriptIndexingBehavior()))
      return this.queryAll$1$bailout(1, mutableMatches);
    len = mutableMatches.length;
    copyOfMatches = $.List_List(len);
    for (t1 = mutableMatches.length, i = 0; i < len; ++i) {
      if (i >= t1)
        throw $.ioore(i);
      copyOfMatches[i] = mutableMatches[i];
    }
    return $._FrozenElementList$_wrap(copyOfMatches);
  } else if ($.RegExp_RegExp("^[*a-zA-Z0-9]+$", false, false).hasMatch$1(selectors) === true) {
    mutableMatches = this.$$dom_getElementsByTagName$1(selectors);
    if (typeof mutableMatches !== 'string' && (typeof mutableMatches !== 'object' || mutableMatches === null || mutableMatches.constructor !== Array && !mutableMatches.is$JavaScriptIndexingBehavior()))
      return this.queryAll$1$bailout(3, mutableMatches);
    len = mutableMatches.length;
    copyOfMatches = $.List_List(len);
    for (t1 = mutableMatches.length, i = 0; i < len; ++i) {
      if (i >= t1)
        throw $.ioore(i);
      copyOfMatches[i] = mutableMatches[i];
    }
    return $._FrozenElementList$_wrap(copyOfMatches);
  } else
    return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
},
 queryAll$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      mutableMatches = env0;
      break;
    case 2:
      len = env1;
      mutableMatches = env0;
      break;
    case 3:
      mutableMatches = env0;
      break;
    case 4:
      mutableMatches = env1;
      len = env0;
      break;
  }
  switch (state0) {
    case 0:
    default:
      var mutableMatches, len, copyOfMatches, i, t1;
      if (state0 === 2 || state0 === 1 || state0 === 0 && $.RegExp_RegExp("^\\[name=[\"'][^'\"]+['\"]\\]$", false, false).hasMatch$1(selectors) === true)
        switch (state0) {
          case 0:
            mutableMatches = this.$$dom_getElementsByName$1($.getInterceptor(selectors).substring$2(selectors, 7, selectors.length - 2));
          case 1:
            state0 = 0;
            len = $.getInterceptor(mutableMatches).get$length(mutableMatches);
          case 2:
            state0 = 0;
            copyOfMatches = $.List_List(len);
            for (i = 0; $.ltB(i, len); ++i) {
              t1 = $.index(mutableMatches, i);
              if (i >= copyOfMatches.length)
                throw $.ioore(i);
              copyOfMatches[i] = t1;
            }
            return $._FrozenElementList$_wrap(copyOfMatches);
        }
      else
        switch (state0) {
          case 0:
          default:
            if (state0 === 4 || state0 === 3 || state0 === 0 && $.RegExp_RegExp("^[*a-zA-Z0-9]+$", false, false).hasMatch$1(selectors) === true)
              switch (state0) {
                case 0:
                  mutableMatches = this.$$dom_getElementsByTagName$1(selectors);
                case 3:
                  state0 = 0;
                  len = $.getInterceptor(mutableMatches).get$length(mutableMatches);
                case 4:
                  state0 = 0;
                  copyOfMatches = $.List_List(len);
                  for (i = 0; $.ltB(i, len); ++i) {
                    t1 = $.index(mutableMatches, i);
                    if (i >= copyOfMatches.length)
                      throw $.ioore(i);
                    copyOfMatches[i] = t1;
                  }
                  return $._FrozenElementList$_wrap(copyOfMatches);
              }
            else
              return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
        }
  }
}
});

$.$defineNativeClass('DocumentFragment', {"": ["_children>"],
 get$elements: function() {
  return this.get$children();
},
 set$elements: function(value) {
  this.set$children(value);
},
 get$children: function() {
  if (this._children == null)
    this._children = $.FilteredElementList$(this);
  return this._children;
},
 set$children: function(value) {
  var copy, children;
  copy = $.List_List$from(value);
  children = this.get$children();
  $.getInterceptor(children).clear$0(children);
  $.getInterceptor(children).addAll$1(children, copy);
},
 query$1: function(selectors) {
  return this.$$dom_querySelector$1(selectors);
},
 queryAll$1: function(selectors) {
  return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
},
 set$innerHTML: function(value) {
  if (Object.getPrototypeOf(this).hasOwnProperty('set$innerHTML')) {
  {
  var t1, e, nodes;
  t1 = this.get$nodes();
  $.getInterceptor(t1).clear$0(t1);
  e = $.Element_Element$tag("div");
  e.set$innerHTML(value);
  nodes = $.List_List$from(e.get$nodes());
  t1 = this.get$nodes();
  $.getInterceptor(t1).addAll$1(t1, nodes);
}
  } else {
    return Object.prototype.set$innerHTML.call(this, value);
  }

},
 _insertAdjacentNode$2: function(where, node) {
  var t1;
  switch ($.getInterceptor(where).toLowerCase$0(where)) {
    case "beforebegin":
      return;
    case "afterend":
      return;
    case "afterbegin":
      t1 = this.get$nodes();
      this.insertBefore$2(node, $.gtB($.getInterceptor(t1).get$length(t1), 0) ? $.index(this.get$nodes(), 0) : null);
      return node;
    case "beforeend":
      t1 = this.get$nodes();
      $.getInterceptor(t1).add$1(t1, node);
      return node;
    default:
      throw $.$$throw($.ArgumentError$("Invalid position " + where));
  }
},
 insertAdjacentElement$2: function(where, element) {
  return this._insertAdjacentNode$2(where, element);
},
 insertAdjacentText$2: function(where, text) {
  this._insertAdjacentNode$2(where, $.Text_Text(text));
},
 insertAdjacentHTML$2: function(where, text) {
  this._insertAdjacentNode$2(where, $.DocumentFragment_DocumentFragment$html(text));
},
 addText$1: function(text) {
  this.insertAdjacentText$2("beforeend", text);
},
 addHtml$1: function(text) {
  this.insertAdjacentHTML$2("beforeend", text);
},
 get$id: function() {
  return "";
},
 get$parent: function() {
  return;
},
 get$attributes: function() {
  return $.CTC10;
},
 get$classes: function() {
  return $._FrozenCssClassSet$();
},
 get$style: function() {
  return $.Element_Element$tag("div").get$style();
},
 click$0: function() {
},
 get$click: function() { return new $.BoundClosure1(this, 'click$0'); },
 set$id: function(value) {
  throw $.$$throw($.UnsupportedError$("ID can't be set for document fragments."));
},
 get$on: function() {
  return $.ElementEvents$(this);
},
 $$dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 $$dom_querySelectorAll$1: function(selectors) {
  return this.querySelectorAll(selectors);
}
});

$.$defineNativeClass('DocumentType', {"": ["name>"],
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('Element', {"": ["id=", "innerHTML<", "clientHeight>", "clientWidth>", "style>"],
 get$attributes: function() {
  return $._ElementAttributeMap$(this);
},
 set$elements: function(value) {
  if (Object.getPrototypeOf(this).hasOwnProperty('set$elements')) {
  {
  this.set$children(value);
}
  } else {
    return Object.prototype.set$elements.call(this, value);
  }

},
 get$elements: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$elements')) {
  {
  return this.get$children();
}
  } else {
    return Object.prototype.get$elements.call(this);
  }

},
 get$children: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$children')) {
  {
  return $._ChildrenElementList$_wrap(this);
}
  } else {
    return Object.prototype.get$children.call(this);
  }

},
 set$children: function(value) {
  if (Object.getPrototypeOf(this).hasOwnProperty('set$children')) {
  {
  var copy, children;
  copy = $.List_List$from(value);
  children = this.get$children();
  $.getInterceptor(children).clear$0(children);
  $.getInterceptor(children).addAll$1(children, copy);
}
  } else {
    return Object.prototype.set$children.call(this, value);
  }

},
 query$1: function(selectors) {
  return this.$$dom_querySelector$1(selectors);
},
 queryAll$1: function(selectors) {
  return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
},
 get$classes: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$classes')) {
  {
  return $._ElementCssClassSet$(this);
}
  } else {
    return Object.prototype.get$classes.call(this);
  }

},
 addText$1: function(text) {
  this.insertAdjacentText$2("beforeend", text);
},
 addHtml$1: function(text) {
  this.insertAdjacentHTML$2("beforeend", text);
},
 insertAdjacentText$2: function(where, text) {
  if (!!this.insertAdjacentText)
    this._insertAdjacentText$2(where, text);
  else
    this._insertAdjacentNode$2(where, $.Text_Text(text));
},
 _insertAdjacentText$2: function(where, text) {
  return this.insertAdjacentText(where,text);
},
 insertAdjacentHTML$2: function(where, text) {
  if (!!this.insertAdjacentHTML)
    this._insertAdjacentHTML$2(where, text);
  else
    this._insertAdjacentNode$2(where, $.DocumentFragment_DocumentFragment$html(text));
},
 _insertAdjacentHTML$2: function(where, text) {
  return this.insertAdjacentHTML(where,text);
},
 insertAdjacentElement$2: function(where, element) {
  if (!!this.insertAdjacentElement)
    this._insertAdjacentElement$2(where, element);
  else
    this._insertAdjacentNode$2(where, element);
  return element;
},
 _insertAdjacentElement$2: function(where, element) {
  return this.insertAdjacentElement(where,element);
},
 _insertAdjacentNode$2: function(where, node) {
  var t1;
  switch ($.getInterceptor(where).toLowerCase$0(where)) {
    case "beforebegin":
      this.get$parent().insertBefore$2(node, this);
      break;
    case "afterbegin":
      t1 = this.get$nodes();
      this.insertBefore$2(node, $.gtB($.getInterceptor(t1).get$length(t1), 0) ? $.index(this.get$nodes(), 0) : null);
      break;
    case "beforeend":
      t1 = this.get$nodes();
      $.getInterceptor(t1).add$1(t1, node);
      break;
    case "afterend":
      this.get$parent().insertBefore$2(node, this.get$nextNode());
      break;
    default:
      throw $.$$throw($.ArgumentError$("Invalid position " + where));
  }
},
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.ElementEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 get$$$dom_children: function() {
  return this.children;
},
 click$0: function() {
  return this.click();
},
 get$click: function() { return new $.BoundClosure1(this, 'click$0'); },
 get$$$dom_className: function() {
  return this.className;
},
 set$$$dom_className: function(value) {
  this.className = value;
},
 get$$$dom_firstElementChild: function() {
  return this.firstElementChild;
},
 get$$$dom_lastElementChild: function() {
  return this.lastElementChild;
},
 $$dom_getAttribute$1: function(name) {
  return this.getAttribute(name);
},
 $$dom_hasAttribute$1: function(name) {
  return this.hasAttribute(name);
},
 $$dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 $$dom_querySelectorAll$1: function(selectors) {
  return this.querySelectorAll(selectors);
},
 $$dom_removeAttribute$1: function(name) {
  return this.removeAttribute(name);
},
 $$dom_setAttribute$2: function(name, value) {
  return this.setAttribute(name,value);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLEmbedElement', {"": ["height<", "name>", "src<", "type=", "width<"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('Entry', {"": ["name>"],
 remove$2: function(successCallback, errorCallback) {
  return this.remove($.convertDartClosureToJS(successCallback, 0),$.convertDartClosureToJS(errorCallback, 1));
},
 remove$1: function(successCallback) {
  successCallback = $.convertDartClosureToJS(successCallback, 0);
  return this.remove(successCallback);
}
});

$.$defineNativeClass('EntrySync', {"": ["name>"],
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('Event', {"": ["type>"]
});

$.$defineNativeClass('EventException', {"": ["name>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('EventSource', {"": ["readyState>"],
 get$on: function() {
  return $.EventSourceEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('EventTarget', {
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.Events$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$$dom_addEventListener$3')) {
  {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$$dom_addEventListener$3.call(this, type, listener, useCapture);
  }

},
 $$dom_dispatchEvent$1: function(event) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$$dom_dispatchEvent$1')) {
  {
  return this.dispatchEvent(event);
}
  } else {
    return Object.prototype.$$dom_dispatchEvent$1.call(this, event);
  }

},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$$dom_removeEventListener$3')) {
  {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }

}
});

$.$defineNativeClass('HTMLFieldSetElement', {"": ["disabled<", "elements>", "name>", "type>"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('File', {"": ["name>"],
 is$File: function() { return true; }
});

$.$defineNativeClass('FileException', {"": ["name>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('FileReader', {"": ["readyState>"],
 get$on: function() {
  return $.FileReaderEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('FileWriter', {"": ["length>", "position>", "readyState>"],
 get$on: function() {
  return $.FileWriterEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('FileWriterSync', {"": ["length>", "position>"]
});

$.$defineNativeClass('Float32Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Float64Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLFontElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLFormElement', {"": ["length>", "name>"],
 reset$0: function() {
  return this.reset();
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLFrameElement', {"": ["name>", "src<"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLFrameSetElement', {
 get$on: function() {
  return $.FrameSetElementEvents$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('Gamepad', {"": ["id>"]
});

$.$defineNativeClass('HTMLHRElement', {"": ["width<"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLAllCollection', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLCollection', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLOptionsCollection', {
 get$length: function() {
  return this.length;
},
 set$length: function(value) {
  this.length = value;
},
 remove$1: function(index) {
  return this.remove(index);
}
});

$.$defineNativeClass('HTMLHeadElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLHeadingElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLHtmlElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('XMLHttpRequest', {"": ["readyState>", "responseText>", "status>", "withCredentials<"],
 get$on: function() {
  return $.HttpRequestEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 open$5: function(method, url, async, user, password) {
  return this.open(method,url,async,user,password);
},
 open$3: function(method,url,async) {
  return this.open(method,url,async);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 send$1: function(data) {
  return this.send(data);
},
 send$0: function() {
  return this.send();
}
});

$.$defineNativeClass('XMLHttpRequestException', {"": ["name>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XMLHttpRequestProgressEvent', {"": ["position>"]
});

$.$defineNativeClass('XMLHttpRequestUpload', {
 get$on: function() {
  return $.HttpRequestUploadEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBCursor', {"": ["key>"]
});

$.$defineNativeClass('IDBCursorWithValue', {"": ["value>"]
});

$.$defineNativeClass('IDBDatabase', {"": ["name>"],
 get$on: function() {
  return $.IDBDatabaseEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBDatabaseException', {"": ["name>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('IDBIndex', {"": ["name>"]
});

$.$defineNativeClass('IDBObjectStore', {"": ["name>"],
 add$2: function(value, key) {
  var t1 = $ === key;
  if (t1)
    key = null;
  if (!t1)
    return this._add_1$2($._convertDartToNative_PrepareForStructuredClone(value), key);
  return this._add_2$1($._convertDartToNative_PrepareForStructuredClone(value));
},
 add$1: function(value) {
  return this.add$2(value,$)
},
 _add_1$2: function(value, key) {
  return this.add(value,key);
},
 _add_2$1: function(value) {
  return this.add(value);
},
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('IDBOpenDBRequest', {
 get$on: function() {
  return $.IDBOpenDBRequestEvents$(this);
}
});

$.$defineNativeClass('IDBRequest', {"": ["readyState>"],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.IDBRequestEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBTransaction', {
 get$on: function() {
  return $.IDBTransactionEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBVersionChangeRequest', {
 get$on: function() {
  return $.IDBVersionChangeRequestEvents$(this);
}
});

$.$defineNativeClass('HTMLIFrameElement', {"": ["height<", "name>", "src<", "width<"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ImageData', {
 is$ImageData: function() { return true; }
});

$.$defineNativeClass('HTMLImageElement', {"": ["height<", "name>", "src<", "width<", "x>", "y>"],
 complete$1: function(arg0) { return this.complete.call$1(arg0); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLInputElement', {"": ["disabled<", "height<", "name>", "pattern>", "src<", "type=", "value=", "width<"],
 get$on: function() {
  return $.InputElementEvents$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('Int16Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Int32Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Int8Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('JavaScriptCallFrame', {"": ["type>"]
});

$.$defineNativeClass('HTMLKeygenElement', {"": ["disabled<", "name>", "type>"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLIElement', {"": ["type=", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLabelElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLegendElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLinkElement', {"": ["disabled<", "type="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('History', {"": ["length>"]
});

$.$defineNativeClass('Location', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMWindow', {"": ["name>", "navigator>", "status>"],
 open$3: function(url, name$, options) {
  if (options == null)
    return $._DOMWindowCrossFrame__createSafe(this.open(url,name$));
  else
    return $._DOMWindowCrossFrame__createSafe(this.open(url,name$,options));
},
 get$_liblib2$_location: function() {
  return this.location;
},
 set$_liblib2$_location: function(value) {
  this.location = value;
},
 get$on: function() {
  return $.LocalWindowEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 _postMessage_1$2: function(message, targetOrigin) {
  return this.postMessage(message,targetOrigin);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
}
});

$.$defineNativeClass('HTMLMapElement', {"": ["name>"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLMarqueeElement', {"": ["height<", "width<"],
 start$0: function() {
  return this.start();
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('MediaController', {
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLMediaElement', {"": ["readyState>", "src<"],
 get$on: function() {
  return $.MediaElementEvents$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('MediaList', {"": ["length>"]
});

$.$defineNativeClass('MediaSource', {"": ["readyState>"],
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStream', {"": ["readyState>"],
 get$on: function() {
  return $.MediaStreamEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStreamTrack', {"": ["kind>", "readyState>"],
 get$on: function() {
  return $.MediaStreamTrackEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStreamTrackList', {"": ["length>"],
 get$on: function() {
  return $.MediaStreamTrackListEvents$(this);
},
 add$1: function(track) {
  return this.add(track);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 remove$1: function(track) {
  return this.remove(track);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLMenuElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('MessageEvent', {"": ["ports>"]
});

$.$defineNativeClass('MessagePort', {
 get$on: function() {
  return $.MessagePortEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 start$0: function() {
  return this.start();
}
});

$.$defineNativeClass('HTMLMetaElement', {"": ["name>"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLMeterElement', {"": ["value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLModElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('MouseEvent', {"": ["x>", "y>"],
 $$dom_initMouseEvent$15: function(type, canBubble, cancelable, view, detail, screenX, screenY, clientX, clientY, ctrlKey, altKey, shiftKey, metaKey, button, relatedTarget) {
  this._$dom_initMouseEvent_1$15(type, canBubble, cancelable, view, detail, screenX, screenY, clientX, clientY, ctrlKey, altKey, shiftKey, metaKey, button, $._convertDartToNative_EventTarget(relatedTarget));
  return;
},
 _$dom_initMouseEvent_1$15: function(type, canBubble, cancelable, view, detail, screenX, screenY, clientX, clientY, ctrlKey, altKey, shiftKey, metaKey, button, relatedTarget) {
  return this.initMouseEvent(type,canBubble,cancelable,view,detail,screenX,screenY,clientX,clientY,ctrlKey,altKey,shiftKey,metaKey,button,relatedTarget);
}
});

$.$defineNativeClass('MutationRecord', {"": ["type>"]
});

$.$defineNativeClass('NamedNodeMap', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Navigator', {"": ["userAgent>"]
});

$.$defineNativeClass('Node', {
 get$nodes: function() {
  return $._ChildNodeListLazy$(this);
},
 remove$0: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('remove$0')) {
  {
  if (!(this.get$parent() == null))
    this.get$parent().$$dom_removeChild$1(this);
}
  } else {
    return Object.prototype.remove$0.call(this);
  }

},
 replaceWith$1: function(otherNode, exception) {
  var parent$;
  try {
    parent$ = this.get$parent();
    parent$.$$dom_replaceChild$2(otherNode, this);
  } catch (exception) {
    $.unwrapException(exception);
  }

  return this;
},
 get$$$dom_attributes: function() {
  return this.attributes;
},
 get$$$dom_childNodes: function() {
  return this.childNodes;
},
 get$nextNode: function() {
  return this.nextSibling;
},
 get$parent: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$parent')) {
  {
  return this.parentNode;
}
  } else {
    return Object.prototype.get$parent.call(this);
  }

},
 get$text: function() {
  return this.textContent;
},
 set$text: function(value) {
  this.textContent = value;
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_appendChild$1: function(newChild) {
  return this.appendChild(newChild);
},
 contains$1: function(other) {
  return this.contains(other);
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 insertBefore$2: function(newChild, refChild) {
  return this.insertBefore(newChild,refChild);
},
 $$dom_removeChild$1: function(oldChild) {
  return this.removeChild(oldChild);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_replaceChild$2: function(newChild, oldChild) {
  return this.replaceChild(newChild,oldChild);
}
});

$.$defineNativeClass('NodeIterator', {
 filter$1: function(arg0) { return this.filter.call$1(arg0); },
 filter$3: function(arg0, arg1, arg2) { return this.filter.call$3(arg0, arg1, arg2); }
});

$.$defineNativeClass('Notification', {
 get$on: function() {
  return $.NotificationEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLOListElement', {"": ["type="],
 start$0: function() { return this.start.call$0(); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLObjectElement', {"": ["height<", "name>", "type=", "width<"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLOptGroupElement', {"": ["disabled<"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLOptionElement', {"": ["disabled<", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('OscillatorNode', {"": ["type="]
});

$.$defineNativeClass('HTMLOutputElement', {"": ["name>", "type>", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLParagraphElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLParamElement', {"": ["name>", "type=", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('PeerConnection00', {"": ["readyState>"],
 get$on: function() {
  return $.PeerConnection00Events$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('PerformanceNavigation', {"": ["type>"]
});

$.$defineNativeClass('WebKitPoint', {"": ["x=", "y="]
});

$.$defineNativeClass('HTMLPreElement', {"": ["width<"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLProgressElement', {"": ["position>", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLQuoteElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('RTCDataChannel', {"": ["readyState>"],
 get$on: function() {
  return $.RTCDataChannelEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('RTCPeerConnection', {"": ["readyState>"],
 get$on: function() {
  return $.RTCPeerConnectionEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('RTCSessionDescription', {"": ["type="]
});

$.$defineNativeClass('RadioNodeList', {"": ["value="]
});

$.$defineNativeClass('Range', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('RangeException', {"": ["name>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('SQLResultSetRowList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLScriptElement', {"": ["src<", "type="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ScriptProcessorNode', {
 get$on: function() {
  return $.ScriptProcessorNodeEvents$(this);
}
});

$.$defineNativeClass('ScriptProfileNode', {
 children$0: function() {
  return this.children();
},
 get$children: function() { return new $.BoundClosure1(this, 'children$0'); }
});

$.$defineNativeClass('HTMLSelectElement', {"": ["disabled<", "length=", "name>", "type>", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLShadowElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('ShadowRoot', {"": ["innerHTML<"]
});

$.$defineNativeClass('SharedWorkerContext', {"": ["name>"],
 get$on: function() {
  return $.SharedWorkerContextEvents$(this);
}
});

$.$defineNativeClass('SourceBufferList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLSourceElement', {"": ["src<", "type="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLSpanElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('SpeechGrammar', {"": ["src<"]
});

$.$defineNativeClass('SpeechGrammarList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechRecognition', {
 get$on: function() {
  return $.SpeechRecognitionEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 start$0: function() {
  return this.start();
}
});

$.$defineNativeClass('SpeechRecognitionResult', {"": ["length>"]
});

$.$defineNativeClass('Storage', {
 containsValue$1: function(value) {
  var t1 = this.get$values();
  return $.getInterceptor(t1).some$1(t1, new $.Storage_containsValue_anon(value));
},
 containsKey$1: function(key) {
  return !(this.$$dom_getItem$1(key) == null);
},
 operator$index$1: function(key) {
  return this.$$dom_getItem$1(key);
},
 oprator$indexSet$2: function(key, value) {
  this.$$dom_setItem$2(key, value);
},
 remove$1: function(key) {
  var value = this.operator$index$1(key);
  this.$$dom_removeItem$1(key);
  return value;
},
 clear$0: function() {
  return this.$$dom_clear$0();
},
 forEach$1: function(f) {
  var i, key;
  for (i = 0; true; ++i) {
    key = this.$$dom_key$1(i);
    if (key == null)
      return;
    f.call$2(key, this.operator$index$1(key));
  }
},
 get$keys: function() {
  var keys = [];
  $.getInterceptor(this).forEach$1(this, new $.Storage_keys_anon(keys));
  return keys;
},
 get$values: function() {
  var values = [];
  $.getInterceptor(this).forEach$1(this, new $.Storage_values_anon(values));
  return values;
},
 get$length: function() {
  return this.get$$$dom_length();
},
 get$isEmpty: function() {
  return this.$$dom_key$1(0) == null;
},
 get$$$dom_length: function() {
  return this.length;
},
 $$dom_clear$0: function() {
  return this.clear();
},
 $$dom_getItem$1: function(key) {
  return this.getItem(key);
},
 $$dom_key$1: function(index) {
  return this.key(index);
},
 $$dom_removeItem$1: function(key) {
  return this.removeItem(key);
},
 $$dom_setItem$2: function(key, data) {
  return this.setItem(key,data);
},
 is$Map: function() { return true; }
});

$.$defineNativeClass('StorageEvent', {"": ["key>"]
});

$.$defineNativeClass('HTMLStyleElement', {"": ["disabled<", "type="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('StyleMedia', {"": ["type>"]
});

$.$defineNativeClass('StyleSheet', {"": ["disabled<", "type>"]
});

$.$defineNativeClass('HTMLTableCaptionElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableCellElement', {"": ["height<", "width<"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableColElement', {"": ["width<"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableElement', {"": ["width<"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableRowElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableSectionElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTextAreaElement', {"": ["disabled<", "name>", "type>", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('TextTrack', {"": ["kind>"],
 get$on: function() {
  return $.TextTrackEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('TextTrackCue', {"": ["id=", "position=", "text>"],
 get$on: function() {
  return $.TextTrackCueEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('TextTrackCueList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('TextTrackList', {"": ["length>"],
 get$on: function() {
  return $.TextTrackListEvents$(this);
},
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('TimeRanges', {"": ["length>"]
});

$.$defineNativeClass('HTMLTitleElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('TouchList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLTrackElement', {"": ["kind>", "readyState>", "src<"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('TreeWalker', {
 filter$1: function(arg0) { return this.filter.call$1(arg0); },
 filter$3: function(arg0, arg1, arg2) { return this.filter.call$3(arg0, arg1, arg2); }
});

$.$defineNativeClass('HTMLUListElement', {"": ["type="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('Uint16Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Uint32Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Uint8Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLUnknownElement', {
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLVideoElement', {"": ["height<", "width<"]
});

$.$defineNativeClass('WebGLActiveInfo', {"": ["name>", "type>"]
});

$.$defineNativeClass('WebKitNamedFlow', {"": ["name>"],
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_dispatchEvent$1: function(event) {
  return this.dispatchEvent(event);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('WebSocket', {"": ["readyState>"],
 get$on: function() {
  return $.WebSocketEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$2: function(code, reason) {
  return this.close(code,reason);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('Worker', {
 get$on: function() {
  return $.WorkerEvents$(this);
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
}
});

$.$defineNativeClass('WorkerContext', {"": ["navigator>"],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.WorkerContextEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_dispatchEvent$1: function(evt) {
  return this.dispatchEvent(evt);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
}
});

$.$defineNativeClass('WorkerLocation', {
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('WorkerNavigator', {"": ["userAgent>"]
});

$.$defineNativeClass('XPathException', {"": ["name>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XSLTProcessor', {
 reset$0: function() {
  return this.reset();
}
});

$.$defineNativeClass('CSSRuleList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('CSSValueList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('ClientRectList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('DOMStringList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 contains$1: function(string) {
  return this.contains(string);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('EntryArray', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('EntryArraySync', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('FileList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$_FileList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('GamepadList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('MediaStreamList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('NodeList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechInputResultList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechRecognitionResultList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('StyleSheetList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('WebKitAnimationList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.getInterceptor(this).iterator$0(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Worker', {
 get$id: function() {
  return this.id;
},
 set$id: function(i) {
  this.id = i;
},
 postMessage$1: function(msg) {
  return this.postMessage(msg);
}
});

$.$defineNativeClass('DOMWindow', {
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
}
});

$.$defineNativeClass('SVGAngle', {"": ["value="]
});

$.$defineNativeClass('SVGAnimatedLengthList', {
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  var t1 = this.get$_Collections();
  return $.getInterceptor(t1).contains$2(t1, this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 some$1: function(f) {
  return this.get$_Collections().some$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedNumberList', {
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  var t1 = this.get$_Collections();
  return $.getInterceptor(t1).contains$2(t1, this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 some$1: function(f) {
  return this.get$_Collections().some$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedTransformList', {
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  var t1 = this.get$_Collections();
  return $.getInterceptor(t1).contains$2(t1, this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 some$1: function(f) {
  return this.get$_Collections().some$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGComponentTransferFunctionElement', {"": ["type>"]
});

$.$defineNativeClass('SVGCursorElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGElementInstance', {
 get$on: function() {
  return $.ElementInstanceEvents$(this);
}
});

$.$defineNativeClass('SVGException', {"": ["name>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('SVGFEBlendElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGFEColorMatrixElement', {"": ["type>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEComponentTransferElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGFECompositeElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGFEConvolveMatrixElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGFEDiffuseLightingElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGFEDisplacementMapElement', {"": ["scale>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEDropShadowElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGFEFloodElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGFEGaussianBlurElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGFEImageElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGFEMergeElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGFEMorphologyElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGFEOffsetElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGFEPointLightElement', {"": ["x>", "y>", "z>"]
});

$.$defineNativeClass('SVGFESpecularLightingElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGFESpotLightElement', {"": ["x>", "y>", "z>"]
});

$.$defineNativeClass('SVGFETileElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGFETurbulenceElement', {"": ["type>", "x>", "y>"]
});

$.$defineNativeClass('SVGFilterElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGForeignObjectElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGGlyphRefElement', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGImageElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGLength', {"": ["value="]
});

$.$defineNativeClass('SVGLengthList', {
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  var t1 = this.get$_Collections();
  return $.getInterceptor(t1).contains$2(t1, this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 some$1: function(f) {
  return this.get$_Collections().some$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGMaskElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGMatrix', {
 scale$1: function(scaleFactor) {
  return this.scale(scaleFactor);
},
 get$scale: function() { return new $.BoundClosure2(this, 'scale$1'); }
});

$.$defineNativeClass('SVGNumber', {"": ["value="]
});

$.$defineNativeClass('SVGNumberList', {
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  var t1 = this.get$_Collections();
  return $.getInterceptor(t1).contains$2(t1, this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 some$1: function(f) {
  return this.get$_Collections().some$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGPathSegArcAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegArcRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoCubicAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoCubicRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegLinetoAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalAbs', {"": ["x="]
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalRel', {"": ["x="]
});

$.$defineNativeClass('SVGPathSegLinetoRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegLinetoVerticalAbs', {"": ["y="]
});

$.$defineNativeClass('SVGPathSegLinetoVerticalRel', {"": ["y="]
});

$.$defineNativeClass('SVGPathSegList', {
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  var t1 = this.get$_Collections();
  return $.getInterceptor(t1).contains$2(t1, this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 some$1: function(f) {
  return this.get$_Collections().some$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGPathSegMovetoAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegMovetoRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPatternElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGPoint', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPointList', {
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('SVGPolygonElement', {"": ["points>"]
});

$.$defineNativeClass('SVGPolylineElement', {"": ["points>"]
});

$.$defineNativeClass('SVGRect', {"": ["height<", "width<", "x=", "y="]
});

$.$defineNativeClass('SVGRectElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGScriptElement', {"": ["type="]
});

$.$defineNativeClass('SVGStringList', {
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  var t1 = this.get$_Collections();
  return $.getInterceptor(t1).contains$2(t1, this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 some$1: function(f) {
  return this.get$_Collections().some$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGStyleElement', {"": ["disabled<", "type="]
});

$.$defineNativeClass('SVGDocument', {
 $$dom_createEvent$1: function(eventType) {
  return this.createEvent(eventType);
}
});

$.$defineNativeClass('SVGElement', {
 get$classes: function() {
  if (this._cssClassSet == null)
    this._cssClassSet = $._AttributeClassSet$(this);
  return this._cssClassSet;
},
 get$elements: function() {
  return $.FilteredElementList$(this);
},
 set$elements: function(value) {
  var elements = this.get$elements();
  $.getInterceptor(elements).clear$0(elements);
  $.getInterceptor(elements).addAll$1(elements, value);
},
 get$children: function() {
  return $.FilteredElementList$(this);
},
 set$children: function(value) {
  var children = this.get$children();
  $.getInterceptor(children).clear$0(children);
  $.getInterceptor(children).addAll$1(children, value);
},
 set$innerHTML: function(svg) {
  var container = $.Element_Element$tag("div");
  container.set$innerHTML("<svg version=\"1.1\">" + $.S(svg) + "</svg>");
  this.set$children($.index(container.get$children(), 0).get$children());
},
 get$id: function() {
  return this.id;
},
 set$id: function(value) {
  this.id = value;
}
});

$.$defineNativeClass('SVGSVGElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGTextPositioningElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGTransform', {"": ["type>"]
});

$.$defineNativeClass('SVGTransformList', {
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  var t1 = this.get$_Collections();
  return $.getInterceptor(t1).contains$2(t1, this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 some$1: function(f) {
  return this.get$_Collections().some$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('SVGUseElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGElementInstanceList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
},
 contains$1: function(element) {
  var t1 = this.get$_Collections();
  return $.getInterceptor(t1).contains$2(t1, this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 some$1: function(f) {
  return this.get$_Collections().some$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.getInterceptor(this).get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.getInterceptor(this).get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$first: function() {
  return this.operator$index$1(0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$("Cannot removeLast on immutable List."));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

// 295 dynamic classes.
// 406 classes
// 35 !leaf
(function() {
  var v0_Uint8Array = 'Uint8Array|Uint8ClampedArray', v1_TextPositioningElement = 'SVGTextPositioningElement|SVGAltGlyphElement|SVGTRefElement|SVGTSpanElement|SVGTextElement', v2_ComponentTransferFunctionElement = 'SVGComponentTransferFunctionElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement', v3_MediaElement = 'HTMLMediaElement|HTMLAudioElement|HTMLVideoElement', v4_SvgElement = [v1_TextPositioningElement, v2_ComponentTransferFunctionElement, 'SVGElement|SVGAElement|SVGAltGlyphDefElement|SVGTextContentElement|SVGTextPathElement|SVGAltGlyphItemElement|SVGAnimationElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGSetElement|SVGCircleElement|SVGClipPathElement|SVGCursorElement|SVGDefsElement|SVGDescElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFloodElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMergeNodeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFEPointLightElement|SVGFESpecularLightingElement|SVGFESpotLightElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement|SVGHKernElement|SVGImageElement|SVGLineElement|SVGMPathElement|SVGMarkerElement|SVGMaskElement|SVGMetadataElement|SVGMissingGlyphElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGScriptElement|SVGStopElement|SVGStyleElement|SVGSVGElement|SVGSwitchElement|SVGSymbolElement|SVGTitleElement|SVGUseElement|SVGVKernElement|SVGViewElement'].join('|'), v5_MouseEvent = 'MouseEvent|WheelEvent', v6_Element = [v3_MediaElement, v4_SvgElement, 'Element|HTMLElement|HTMLAnchorElement|HTMLAppletElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBaseFontElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDirectoryElement|HTMLDivElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMarqueeElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement'].join('|'), v7_CharacterData = 'CharacterData|Text|CDATASection|Comment', v8_Document = 'Document|HTMLDocument|SVGDocument', v9_DocumentFragment = 'DocumentFragment|ShadowRoot', v10_Node = [v6_Element, v7_CharacterData, v8_Document, v9_DocumentFragment, 'Node|Attr|DocumentType|EntityReference|Notation|ProcessingInstruction'].join('|'), v11_AbstractWorker = 'AbstractWorker|SharedWorker|Worker', v12_WorkerContext = 'WorkerContext|DedicatedWorkerContext|SharedWorkerContext', v13_IDBRequest = 'IDBRequest|IDBOpenDBRequest|IDBVersionChangeRequest', v14_MediaStream = 'MediaStream|LocalMediaStream';
  $.dynamicSetMetadata([['Uint8Array', v0_Uint8Array], ['WorkerContext', v12_WorkerContext], ['CSSValueList', 'CSSValueList|WebKitCSSTransformValue|WebKitCSSFilterValue'], ['NodeList', 'NodeList|RadioNodeList'], ['AbstractWorker', v11_AbstractWorker], ['ArrayBufferView', [v0_Uint8Array, 'ArrayBufferView|DataView|Float32Array|Float64Array|Int16Array|Int32Array|Int8Array|Uint16Array|Uint32Array'].join('|')], ['AudioParam', 'AudioParam|AudioGain'], ['Blob', 'Blob|File'], ['CSSRule', 'CSSRule|CSSCharsetRule|CSSFontFaceRule|CSSImportRule|WebKitCSSKeyframeRule|WebKitCSSKeyframesRule|CSSMediaRule|CSSPageRule|CSSStyleRule|CSSUnknownRule'], ['CharacterData', v7_CharacterData], ['DOMTokenList', 'DOMTokenList|DOMSettableTokenList'], ['SVGComponentTransferFunctionElement', v2_ComponentTransferFunctionElement], ['Document', v8_Document], ['DocumentFragment', v9_DocumentFragment], ['HTMLMediaElement', v3_MediaElement], ['SVGTextPositioningElement', v1_TextPositioningElement], ['SVGElement', v4_SvgElement], ['Element', v6_Element], ['Entry', 'Entry|DirectoryEntry|FileEntry'], ['EntrySync', 'EntrySync|DirectoryEntrySync|FileEntrySync'], ['MouseEvent', v5_MouseEvent], ['Event', [v5_MouseEvent, 'Event|WebKitAnimationEvent|AudioProcessingEvent|BeforeLoadEvent|CloseEvent|UIEvent|CompositionEvent|KeyboardEvent|TextEvent|TouchEvent|SVGZoomEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|ErrorEvent|HashChangeEvent|ProgressEvent|XMLHttpRequestProgressEvent|IDBVersionChangeEvent|IDBVersionChangeEvent|MediaKeyEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SpeechInputEvent|SpeechRecognitionError|SpeechRecognitionEvent|StorageEvent|TrackEvent|WebKitTransitionEvent|WebGLContextEvent'].join('|')], ['Node', v10_Node], ['IDBRequest', v13_IDBRequest], ['MediaStream', v14_MediaStream], ['EventTarget', [v10_Node, v11_AbstractWorker, v12_WorkerContext, v13_IDBRequest, v14_MediaStream, 'EventTarget|AudioContext|BatteryManager|DOMApplicationCache|EventSource|FileReader|FileWriter|XMLHttpRequest|XMLHttpRequestUpload|IDBDatabase|IDBTransaction|DOMWindow|MediaController|MediaSource|MediaStreamTrack|MediaStreamTrackList|MessagePort|Notification|PeerConnection00|Performance|RTCDataChannel|RTCPeerConnection|SourceBufferList|SpeechRecognition|TextTrack|TextTrackCue|TextTrackList|WebKitNamedFlow|WebSocket|SVGElementInstance'].join('|')], ['HTMLCollection', 'HTMLCollection|HTMLOptionsCollection'], ['IDBCursor', 'IDBCursor|IDBCursorWithValue'], ['StyleSheet', 'StyleSheet|CSSStyleSheet']]);
})();

var $globalThis = $;
var $globalState;
var $globals;
var $isWorker = false;
var $supportsWorkers = false;
var $thisScriptUrl;
function $static_init(){};

function $initGlobals(context) {
  context.isolateStatics = new Isolate();
}
function $setGlobals(context) {
  $ = context.isolateStatics;
  $globalThis = $;
}
$.main.call$0 = $.main

//
// BEGIN invoke [main].
//
if (typeof document !== 'undefined' && document.readyState != 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner === 'function') {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === 'function') {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
Isolate.$defineClass = function(cls, fields, prototype) {
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastCharCode = field.charCodeAt(len - 1);
    var needsAccessor = (lastCharCode & 63) >= 60;
    if (needsAccessor) {
      var needsGetter = (lastCharCode & 3) > 0;
      var needsSetter = (lastCharCode & 2) == 0;
      var renaming = (lastCharCode & 64) != 0;
      var accessorName = field = field.substring(0, len - 1);
      if (renaming) {
        var divider = field.indexOf(":");
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (needsGetter) {
        var getterString = "return this." + field + ";";
        prototype["get$" + accessorName] = new Function(getterString);
      }
      if (needsSetter) {
        var setterString = "this." + field + " = v;";
        prototype["set$" + accessorName] = new Function("v", setterString);
      }
    }
    return field;
  };
  var constructor;
  if (typeof fields == 'function') {
    constructor = fields;
  } else {
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0) str += ", ";
      var field = fields[i];
      field = generateGetterSetter(field, prototype);
      str += field;
      body += "this." + field + " = " + field + ";\n";
    }
    str += ") {" + body + "}\n";
    str += "return " + cls + ";";
    constructor = new Function(str)();
  }
  constructor.prototype = prototype;
  constructor.builtin$cls = cls;
  return constructor;
};
var supportsProto = false;
var tmp = Isolate.$defineClass('c', ['f?'], {}).prototype;
if (tmp.__proto__) {
  tmp.__proto__ = {};
  if (typeof tmp.get$f !== 'undefined') supportsProto = true;
}
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var cls in collectedClasses) {
    if (hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, desc[''] || [], desc);
      if (desc['super'] !== "") Isolate.$pendingClasses[cls] = desc['super'];
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (hasOwnProperty.call(finishedClasses, cls)) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      for (var member in prototype) {
        if (member == '' || member == 'super') continue;
        if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
  var getter = new Function("{ return $." + fieldName + ";}");
  var sentinelUndefined = {};
  var sentinelInProgress = {};
  prototype[fieldName] = sentinelUndefined;
  prototype[getterName] = function() {
    var result = $[fieldName];
    try {
      if (result === sentinelUndefined) {
        $[fieldName] = sentinelInProgress;
        try {
          result = $[fieldName] = lazyValue();
        } catch (e) {
          if ($[fieldName] === sentinelInProgress) {
            $[fieldName] = null;
          }
          throw e;
        }
      } else if (result === sentinelInProgress) {
        $.throwCyclicInit(staticName);
      }
      return result;
    } finally {
      $[getterName] = getter;
    }
  };
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  var isolatePrototype = oldIsolate.prototype;
  var str = "{\n";
  str += "var properties = Isolate.$isolateProperties;\n";
  for (var staticName in isolateProperties) {
    if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
      str += "this." + staticName + "= properties." + staticName + ";\n";
    }
  }
  str += "}\n";
  var newIsolate = new Function(str);
  newIsolate.prototype = isolatePrototype;
  isolatePrototype.constructor = newIsolate;
  newIsolate.$isolateProperties = isolateProperties;
  return newIsolate;
};
}

//@ sourceMappingURL=client.dart.js.map